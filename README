README file for JADE, Version $Name$

INTRODUCTION
============

This package contains a Java framework to build agent-based systems
according to FIPA standard specifications.



LICENSE
=======

THE SOFTWARE CAN BE USED ONLY FOR THE FACTS PROJECT. 
YOU HAVE ALREADY AGREED TO SIGN AN AGREEMENT WITH CSELT WHERE YOU COMMIT TO: 
- NOT TO DISCLOSE THE SOFTWARE, AND ANY SOFTWARE DETAIL, TO ANYONE ELSE;
- NOT TO USE THE SOFTWARE OUTSIDE THE FACTS PROJECT;
- NOT TO REVERSE ENGINEER ANY MODULE OF THE SOFTWARE.

I'm sending the software to you before the agreement 
has been signed explicitly. However, it is our intention that this email binds you to 
the above agreements. If you feel unable to accept these agreements then you should NOT 
use the software in any way. 

Your feedback as users is very important to us. Please, if you have new requirements that 
you would like to see implemented or if you have examples of usage or if you discover some 
bugs, send me information. 


SYSTEM REQUIREMENTS
===================

To build the framework a complete Java programming environment is
needed. At least a Java Development Kit version 1.2 is required. 
Besides, JavaCC 0.8pre1 is
needed to generate Java code from grammar description files.


INSTALLATION AND TEST
==============================

After uncompressing the archive, you will have a directory tree
starting with JADE; from that directory, you can type

- make clean            To remove compiled classes, HTML docs and the like.

- make src              To compile source code and create RMI stubs and skeletons.

- make lib              To create a compressed file in 'lib' directory, containing all compiled classes.

- make doc              To create HTML documentation for the framework in 'doc' directory.

- make examples         To build example programs.

- make all              Performs 'make lib' and 'make examples'


After compiling, one can run the example programs in 'src/examples'
subdirectory; remember to set CLASSPATH environment variable to
include the file jade.zip in 'lib' directory and the current directory,
then change to 'src' directory.

Be careful to set a suitable CLASSPATH (i.e. including both the
jade.zip file with compiled classes and the current directory)
otherwise you will get a 'ClassNotFoundException' during
'Naming.bind()' operation.

To run the Agent Platform, one must issue the command:

        java jade.Boot -platform [options] [Agent list]

Use -h option to get a list of command line arguments.

To start some agents on additional hosts, one must create and run more
Agent Containers; these components connect themselves with the main
Agent Platform, resulting in a distributed system that seems a single
Agent Platform from outside.

An Agent Container can be started using the command:

        java jade.Boot [options] [Agent list]

Again, using -h command-line option explains program usage. As can be
seen from above, the same command is issued in the two cases, with the
'-platform' command-line switch used to choose between an ordinary
Agent Container and the global Agent Platform.

Using command-line options, users can state host name and port number
where the main Agent Platform resides, and the name with which it is
registered in RMI Registry. This way, multiple platform can be
executed on a single host.

The agent list is a sequence of character strings; each one of them
must be broken in two parts by a colon ':'. The substring before the
colon is taken as the agent name, whereas the substring after the
colon is the name of the Java class implementing the agent. This class
will be dynamically loaded by the Agent Container.

For example, a string 'Peter:myAgent' means "create a new agent named
Peter whose implementation is an object of class myAgent". The name of
the class must be fully qualified, (e.g. Peter:myPackage.myAgent) and
will be searched for according to CLASSPATH definition.

After compilation, some simple agents (just to test the basic platform
mechanisms) can be found in test subdirectory. Please refer to the
'README' file in 'src/examples' directory to get some explanations of
each example program behaviour:

NEW FEATURES
============

Version 0.99b3:

- Timeout support on message receive, both agent-level and
  behaviour-level. Now a timeout version of blockingReceive() is
  available, and a new constructor has been added to ReceiverBehaviour
  class to support timeout. Moreover, a block() version with timeout
  has been added to Behaviour class.

- AgentReceiver example program in directory src/examples/ex2 was
  modified and now times out every 10 seconds if no message is
  received.

- A new example program, AgentTimeout, was added to directory
  src/examples/ex2 to show new ReceiverBehaviour support for timeouts.


Version 0.99b2:

 - Moved all behaviours in a separate package. Now they are in
   jade.core.behaviours package. User application must be updated to
   either 'import jade.core.behaviours.*' or the individual behaviours
   they use.

 - Moved RMA agent in a different package; now the Remote Management
   Agent has class named jade.tools.rma.rma . It can still be started
   with '-gui' command line option.

 - Multiple RMAs can be started on the same platform; they can be
   given any name and still perform their functions.

 - When requesting AMS actions via an RMA, if a 'refuse' or a
   'failure' message is received, a suitable error dialog pops out,
   allowing to view the ACL message.

 - Fixed a bug in RMA graphical user interface, which sometimes caused
   a deadlock on platform startup.

 - When an ACL message has an empty ':sender' slot, JADE puts the
   sender agent name in it automatically.

 - Added a new tool agent: jade.tools.DummyAgent.DummyAgent, allowing
   ACL messages manipulations through a GUI. This agent can be either
   started from an RMA or directly, since is an ordinary agent.


Version 0.99b1:

 - Javadoc-generated HTML documentation for all JADE public classes.

 - jade.domain.FipaRequestClientBehaviour has been replaced by
   jade.proto.FipaRequestInitiatorBehaviour and a new
   FipaRequestResponderBehaviour has been added in jade.proto package.

 - ACL messages now can have many agent names in ':receiver' slot. This
   required making some changes to ACLMessage interface. Please see
   HTML documentation for ACLMessage class.

 - Agents can be suspended and resumed by the GUI or they can suspend
   themselves; user should not suspend neither the AMS nor the RMA,
   since they obviously wouldn't be able to resume then back.

 - Now an agent can create another agent and starting it up with
   Agent.doStart(String name).


BUGS
====

  1) When an ACL message has more than one agent in its ':receiver'
     field, every agent in the list receives a copy of that message,
     but in the ':receiver' slot of the copy only that agent name is
     present, instead of the complete receiver list. This is not
     strictly a bug, but is probably non compliant.

  2) The Programmer's Guide has not been updated since Version
     0.975. Please refer to HTML documentation for the new features.

  3) On Solaris 7 with Jdk 1.2, the dialog for viewing or editing ACL
     messages fills the whole screen, even if if would fit in a much
     smaller fraction of it.

  4) If more than a single instance of an RMA agent is run within the
     same agent container, incorrect behaviour results. Presently,
     willing to run multiple RMA agents on the same JADE platform,
     each one of them must live in a separate agent container.

  5) On Windows 95, sometimes the DummyAgent message list locks up
     when the first message is sent, the sent message is not shown and
     the list does not accept selections by the user. To unlock it,
     just send again the same message; then the previous message is
     displayed, too, and the list starts its normal operations.

  6) On Solaris 7 with Jdk 1.2, a message "Resource temporarily
     unavailable" appears during platform shutdown, but then the
     process completes without any problems.

  7) When an agent or a container is killed, an exception can arise
     when Swing tries to remove the item from the container/agent
     tree.


TODO
====

 - Add support for agent mobility.

 - Add support for message content language parsing.

 - Add support for message ontology checking.


CONTACT
=======
Fabio Bellifemine - CSELT Centro Studi e Laboratori Telecomunicazioni S.p.A.
e-mail: bellifemine@cselt.it

EXAMPLE
=======
#first of all set the CLASSPATH to include also jade.zip and the current directory
# (WindowsNT: set CLASSPATH=%CLASSPATH%;.;c:\jade\lib\jade.zip

java jade.Boot -name facts -platform -host kim.cselt.it 
        # start the platform on another shell on the same host
java jade.Boot -name facts -host kim.cselt.it sender1:examples.ex2.AgentSender 
        # start an agent container on another shell and tell to join the AgentPlatform
        # called "facts" running on the host "kim.cselt.it" and
        # start an agent. The name of this agent is "sender1", 
        # while examples.ex2.AgentSender is the code that implements the agent
java jade.Boot -name facts -host kim.cselt.it receiver2:examples.ex2.AgentReceiver sender2:examples.ex2.AgentSender
        # start an agent container on another shell and tell to join the AgentPlatform
        # called "facts" running on the host "kim.cselt.it" and
        # start two agents. The name of these agents are "sender2" (and 
        # examples.ex2.AgentSender is the code that implements the agent) and
        # receiver2 and examples.ex2.AgentReceiver is the code that implements the agent.


