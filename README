README file for JADE, Version $Name$

INTRODUCTION
============

This package contains a Java framework to build agent-based systems
according to FIPA standard specifications.



LICENSE
=======
see file License.

FEEDBACK
=======
As you know already, this is still an on-going project. 
We are still working on the framework and new versions will be distributed asap.
Your feedback as users is very important to us. Please, if you have new 
requirements that you would like to see implemented or if you have examples 
of usage or if you discover some bugs, send us information.
Check the website http:sharon.cselt.it/projects/jade for how to report bugs and send suggestions.  



SYSTEM REQUIREMENTS
===================

To build the framework a complete Java programming environment is
needed. At least a Java Development Kit version 1.2 is required. 



INSTALLATION AND TEST
==============================

First of all, you can download JADE in source form and recompile it yourself, or get the pre-compiled binaries (actually they are JAR files). 


	Running JADE from the binary distribution
        -----------------------------------------

After uncompressing the archive, you will have a directory tree starting with jade with a lib subdirectory, containing some JAR files.  You just have to add all the JAR files to your CLASSPATH, and you are ready to start JADE.
To run the Agent Platform, one must issue the command:

        java jade.Boot -platform [options] [Agent list]

Use -h option to get a list of command line arguments.
To start some agents on additional hosts, one must create and run more Agent Containers; these components connect themselves with the main Agent Platform, resulting in a distributed system that seems a single Agent Platform from the outside.
An Agent Container can be started using the command:

        java jade.Boot [options] [Agent list]

Again, using -h command-line option explains program usage. 
As can be seen from above, the same command is issued in the two cases, with the -platform command-line switch used to choose between an ordinary Agent Container and the global Agent Platform. Using command-line options, users can state host name and port number where the main Agent Platform resides, and the name with which it is registered in RMI Registry. This way, multiple platforms can be executed on a single host.
The agent list is a sequence of character strings; each of them must be broken in two parts by a colon ':'. The substring before the colon is taken as the agent name, whereas the substring after the colon is the name of the Java class implementing the agent. This class will be dynamically loaded by the Agent Container.
For example, a string Peter:myAgent means "create a new agent named Peter whose implementation is an object of class myAgent". The name of the class must be fully qualified, (e.g. Peter:myPackage.myAgent) and will be searched for according to CLASSPATH definition.
Refer to the README file in src/examples directory to get some explanations of each example program behaviour.



	Building JADE from the source distribution
        ------------------------------------------

If you downloaded JADE in source form and want to compile it, you basically have two methods: either you use the provided makefiles (for GNU make), or you run the Win32 .BAT files you can find in the root directory of the package. Of course, using makefiles yields more flexibility because they just build what is needed; JADE makefiles have been tested under Sun Solaris 7 with JDK 1.2.0 and under Linux under JDK 1.2.2 RC4. The batch files have been tested under Windows NT 4.0 and under Windows 95, both with JDK 1.2.2.
You can perform the following build operations:

Building JADE platform

If you use the makefiles, just type
make all
in the root directory; if you use the batch files, type
makejade
in the root directory. Beware that the batch file will not be able to check whether IDL stubs and parser classes already exist, so either you have idltojava and JavaCC installed, or you comment out them in the batch file.
You will end up with all JADE classes in a classes subdirectory. You can add that directory to your CLASSPATH and make sure that everything is OK by running JADE, as described in the previous section.

Building JADE libraries

With makefiles, type
make lib
With batch files, type
makelib
This will remove the content of the classes directory and will create some JAR files in the lib directory. These JAR files are just the same you get from the binary distribution. See section 5.2 for running JADE when you have built the JAR files. Beware that, both with makefiles and batches, you must first build the classes and then the libraries, otherwise you will end up wuth empty JAR files.

Building JADE HTML documentation

With makefiles, type
make doc
With batch files, type
makedoc

You will end up with Javadoc generated HTML pages, integrated within the overall documentation. Beware that the Programmer’s Guide is a PDF file that cannot be generated at your site, but you must download it (it is, of course, in the JADE documentation distribution).

Building JADE examples and demo application

If you downloaded the examples/demo archive and have unpacked it within the same source tree, you will have to set your CLASSPATH to contain either the classes directory or the JAR files in the lib directory, depending on your JADE distribution, and then type:
make examples
with makefiles, or
makeexamples
with batch files.

Cleaning up the source tree

If you type
make clean
with makefiles, or if you type
clean
with batch files, you will remove all generated files (classes, HTML pages, JAR files, etc.) from the source tree. If you use makefiles, you will find some other make targets you can use. Feel free to try them, especially if you are modifying JADE source code, but be aware that these other make targets are for internal use only, so they have not been documented.


NOTE: jade/lib/Base64.jar is only needed if you want to use the support for JADE 
      serialization and trasmitting sequences of bytes within an ACLMessage. In all
      other cases, it is not necessary adding it to CLASSPATH .

BUGS
====

  1) When an ACL message has more than one agent in its ':receiver'
     field, every agent in the list receives a copy of that message,
     but in the ':receiver' slot of the copy only that agent name is
     present, instead of the complete receiver list. This is not
     strictly a bug, but is probably non compliant.

  2) On Solaris 7 with Jdk 1.2, a message "Resource temporarily
     unavailable" appears during platform shutdown, but then the
     process completes without any problems.



CONTACT
=======
Fabio Bellifemine - CSELT Centro Studi e Laboratori Telecomunicazioni S.p.A.
e-mail: bellifemine@cselt.it

Tiziana Trucco - CSELT Centro Studi e Laboratori Telecomunicazioni S.p.A.
e-mail tiziana.trucco@cselt.it

EXAMPLE
=======
#first of all set the CLASSPATH to include also jade.jar, jade.tools.jar and 
#the current directory
#(WindowsNT: set CLASSPATH=%CLASSPATH%;.;c:\jade\lib\jade.jar

java jade.Boot -platform -host kim.cselt.it 
        # start the platform on another shell on the same host
java jade.Boot -name facts -host kim.cselt.it sender1:examples.receivers.AgentSender 
        # start an agent container on another shell and tell to join the AgentPlatform
        # called "facts" running on the host "kim.cselt.it" and
        # start an agent. The name of this agent is "sender1", 
        # while examples.receivers.AgentSender is the code that implements the agent
java jade.Boot -name facts -host kim.cselt.it receiver2:examples.receivers.AgentReceiver sender2:examples.receivers.AgentSender
        # start an agent container on another shell and tell to join the AgentPlatform
        # called "facts" running on the host "kim.cselt.it" and
        # start two agents. The name of these agents are "sender2" (and 
        # examples.receivers.AgentSender is the code that implements the agent) and
        # "receiver2" and examples.receivers.AgentReceiver is the code that implements         # the agent.


