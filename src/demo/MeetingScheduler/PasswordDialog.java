/*****************************************************************
JADE - Java Agent DEvelopment Framework is a framework to develop multi-agent systems in compliance with the FIPA specifications.
Copyright (C) 2000 CSELT S.p.A. 

GNU Lesser General Public License

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation, 
version 2.1 of the License. 

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the
Free Software Foundation, Inc., 59 Temple Place - Suite 330,
Boston, MA  02111-1307, USA.
*****************************************************************/


package demo.MeetingScheduler;
import java.awt.*;
// import symantec.itools.awt.util.dialog.ModalDialog;
import jade.core.Agent;
import jade.gui.GuiEvent;

/**
Javadoc documentation for the file
@author Fabio Bellifemine - CSELT S.p.A
@version $Date$ $Revision$
*/

public class PasswordDialog extends Frame // ModalDialog
{
  MeetingSchedulerAgent myAgent; // pointer to AppointmentAgent
  
public PasswordDialog(MeetingSchedulerAgent a, String title) {
  this((Frame)null,title);
  myAgent=a;
}
	public PasswordDialog(Frame parent, String title)
	{
	  //		super(parent, title);
	  setTitle(title);
		// This code is automatically generated by Visual Cafe when you add
		// components to the visual environment. It instantiates and initializes
		// the components. To modify the code, only use code syntax that matches
		// what Visual Cafe can generate, or Visual Cafe may be unable to back
		// parse your Java file into its visual environment.
		//{{INIT_CONTROLS
		setLayout(null);
		setSize(215, 130);

		nameLabel = new Label("Name:");
		nameLabel.setBounds(10, 32, 75, 15);
		add(nameLabel);

		passwordLabel = new Label("Password:");
		passwordLabel.setBounds(10, 60, 75, 15);
		add(passwordLabel);

		userTextField = new TextField(1);
		userTextField.setBounds(85, 28, 100, 22);
		add(userTextField);

		passTextField = new TextField(1);
		passTextField.setEchoCharacter('*');
		passTextField.setBounds(85, 57, 100, 22);
		add(passTextField);

		okButton = new Button("OK");
		okButton.setBounds(80, 95, 40, 20);
		add(okButton);
		//}}

	
		//{{REGISTER_LISTENERS
		SymMouse aSymMouse = new SymMouse();
		okButton.addMouseListener(aSymMouse);
		SymAction lSymAction = new SymAction();
		userTextField.addActionListener(lSymAction);
		passTextField.addActionListener(lSymAction);
		//}}
	}

	public PasswordDialog(Frame parent)
	{
		this(parent, "Username/Password");
	}

	// Add a constructor for Interactions (ignoring modal)
	public PasswordDialog(Frame parent, boolean modal)
	{
		this(parent);
	}

	// Add a constructor for Interactions (ignoring modal)
	public PasswordDialog(Frame parent, String title, boolean modal)
	{
		this(parent, title);
	}

	public String getUserName()
	{
		return userTextField.getText();
	}

	public String getPassword()
	{
		return passTextField.getText();
	}

	public void setUserName(String name)
	{
		userTextField.setText(name);
	}

	public void setPassword(String pass)
	{
		passTextField.setText(pass);
	}

	public void addNotify()
	{
	    // Record the size of the window prior to calling parents addNotify.
	    Dimension d = getSize();
	    
		super.addNotify();

		if (fComponentsAdjusted)
			return;

		// Adjust components according to the insets
		setSize(insets().left + insets().right + d.width, insets().top + insets().bottom + d.height);
		Component components[] = getComponents();
		for (int i = 0; i < components.length; i++)
		{
			Point p = components[i].getLocation();
			p.translate(insets().left, insets().top);
			components[i].setLocation(p);
		}
		fComponentsAdjusted = true;
	}
	
    // Used for addNotify check.
	boolean fComponentsAdjusted = false;

	//{{DECLARE_CONTROLS
	java.awt.Label nameLabel;
	java.awt.Label passwordLabel;
	java.awt.TextField userTextField;
	java.awt.TextField passTextField;
	java.awt.Button okButton;
	//}}

	class SymMouse extends java.awt.event.MouseAdapter
	{
		public void mouseClicked(java.awt.event.MouseEvent event)
		{
			Object object = event.getSource();
			if (object == okButton)
				okButton_MouseClicked(event);
		}
	}

	void okButton_MouseClicked(java.awt.event.MouseEvent event)
	{
		dispose();
		GuiEvent ev = new GuiEvent(this, myAgent.STARTTASKS);
		ev.addParameter(getUserName());
		myAgent.postGuiEvent(ev);
	}

	class SymAction implements java.awt.event.ActionListener
	{
		public void actionPerformed(java.awt.event.ActionEvent event)
		{
			Object object = event.getSource();
			if (object == userTextField)
				userTextField_EnterHit(event);
			else if (object == passTextField)
				passTextField_EnterHit(event);
		}
	}

	void userTextField_EnterHit(java.awt.event.ActionEvent event)
	{
		// Request the focus
		passTextField.requestFocus();
	}

	void passTextField_EnterHit(java.awt.event.ActionEvent event)
	{
	  okButton_MouseClicked(null);			 
	}
}
