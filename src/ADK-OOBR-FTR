
/home/Giovanni/DEVEL/ADK/src/fipa/core/Agent.java
Agent@- CommChanged@public synchronized void CommChanged( CommEvent event ) {
Agent@- CommListener@public void CommListener( CommListener l ) {
Agent@- FipaRequest@public int FipaRequest( String content, String reply, String dest, String cont1, String cont2, int status ) {
Agent@- SendReceive@public int SendReceive( String type, String content, String reply, String dest, String type1, int status ) {
Agent@- addLightTask@public void addLightTask( String task ) {
Agent@- blockingFipaRequest@public synchronized void blockingFipaRequest( String content, String dest, String cont1, String cont2 ) {
Agent@- blockingSendReceive@public synchronized void blockingSendReceive( String type, String content, String reply, String dest, String type1 ) {
Agent@- deregister@public void deregister() {
Agent@- deregisterAgent@public void deregisterAgent() {
Agent@- getAgentName@public String getAgentName() {
Agent@- getServices@public int getServices() {
Agent@- localCommChanged@public synchronized void localCommChanged( CommEvent event ) {
Agent@- local_startup@protected void local_startup() {
Agent@- parseMsg@protected void parseMsg( aclMessage msg ) {
Agent@- play@public void play( String host, int port, URL codeBase, boolean isApplet, String[] args ) {
Agent@- processCommEvent@public void processCommEvent( CommEvent event ) {
Agent@- receiveIf@public synchronized aclMessage receiveIf( String source, String type, String content, String reply ) {
Agent@- register@public int register() {
Agent@- registerAgent@public void registerAgent() {
Agent@- removeCommListener@public void removeCommListener( CommListener l ) {
Agent@- retrieveDFAddress@public int retrieveDFAddress() {
Agent@- run@public void run() {
Agent@- schedule@public void schedule() {
Agent@- send@public void send( aclMessage msg ) {
Agent@- verifyMsg@public boolean verifyMsg( aclMessage msg, String source, String type, String content, String reply ) {

/home/Giovanni/DEVEL/ADK/src/fipa/core/AgentContainer.java
AgentContainerImpl@- AgentContainer@public AgentContainer( Vector agents, String[] args ) {
AgentContainerImpl@- CommHandle@public void CommHandle( CommEvent event ) {
AgentContainerImpl@- main@public static void main( String[] args ) {
AgentContainerImpl@- usage@private static void usage(){

/home/Giovanni/DEVEL/ADK/src/fipa/core/AgentPlatform.java
AgentPlatform@> addContainer@public void addContainer(AgentContainer ac) throws RemoteException;
AgentPlatformImpl@- addContainer@public synchronized void addContainer(AgentContainer ac) throws RemoteException {
AgentPlatform@> bornAgent@public void bornAgent(AgentDescriptor desc) throws RemoteException;
AgentPlatformImpl@- bornAgent@public void bornAgent(AgentDescriptor desc) throws RemoteException {
AgentPlatform@> deadAgent@public void deadAgent(String name) throws RemoteException;
AgentPlatformImpl@- deadAgent@public void deadAgent(String name) throws RemoteException {
AgentPlatform@> lookup@public AgentDescriptor lookup(String agentName) throws RemoteException, NotFoundException;
AgentPlatformImpl@- lookup@public AgentDescriptor lookup(String agentName) throws RemoteException, NotFoundException {
AgentPlatform@> removeContainer@public void removeContainer(AgentContainer ac) throws RemoteException;
AgentPlatformImpl@- removeContainer@public synchronized void removeContainer(AgentContainer ac) throws RemoteException {

/home/Giovanni/DEVEL/ADK/src/fipa/core/Behaviour.java
Behaviour@> execute@public void execute();

/home/Giovanni/DEVEL/ADK/src/fipa/core/CommBroadcaster.java
CommBroadcaster@> addCommListener@void addCommListener (CommListener l);
CommBroadcaster@> removeCommListener@void removeCommListener(CommListener event);

/home/Giovanni/DEVEL/ADK/src/fipa/core/CommEvent.java
CommEvent@+ CommEvent@public CommEvent(CommBroadcaster source, aclMessage message) {
CommEvent@+ CommEvent@public CommEvent(CommBroadcaster source, String command) {
CommEvent@- getCommand@public String getCommand() {
CommEvent@- getMessage@public aclMessage getMessage() {

/home/Giovanni/DEVEL/ADK/src/fipa/core/CommListener.java
CommListener@> CommHandle@void CommHandle( CommEvent event );

/home/Giovanni/DEVEL/ADK/src/fipa/core/MessageDispatcher.java
MessageDispatcherImpl@- CommHandle@public void CommHandle( CommEvent event ) {
MessageDispatcherImpl@- MessageDispatcher@public MessageDispatcher( String HOST, int PORT ) {
MessageDispatcherImpl@- addAgent@public void addAgent( Agent a ) {
MessageDispatcherImpl@- addCommListener@public void addCommListener( CommListener l ) {
MessageDispatcherImpl@- connectionClosed@public void connectionClosed() {
MessageDispatcher@> dispatch@void dispatch(ACLMessage msg) throws RemoteException;
MessageDispatcherImpl@- getLocalHost@public String getLocalHost() {
MessageDispatcherImpl@- getLocalPort@public int getLocalPort() {
MessageDispatcherImpl@- processCommEvent@public void processCommEvent( CommEvent event ) {
MessageDispatcherImpl@- receive@public aclMessage receive() throws ParseException {
MessageDispatcherImpl@- removeCommListener@public void removeCommListener( CommListener l ) {
MessageDispatcherImpl@- run@public void run() {
MessageDispatcherImpl@- sendLocal@public void sendLocal( aclMessage msg ) {
MessageDispatcherImpl@- sendRemote@public void sendRemote( aclMessage msg ) {

/home/Giovanni/DEVEL/ADK/src/fipa/domain/ams.java
ams@- ThreadChanged@public void ThreadChanged( ThreadEvent event ) {
ams@+ ams@public ams(int dfPort, Socket sock, Vector agents, Vector sockets ) {
ams@- parseMsg@public void parseMsg( aclMessage msg ) {
ams@- receive@public aclMessage receive() throws ParseException {
ams@- run@public void run() {
ams@- send@private void send( aclMessage msg, OutputStream localOs ) {
ams@- sendAddress@private void sendAddress( String requestedAdd, aclMessage msg, String type ) {
ams@- updateDb@private synchronized void updateDb( String source, String name ) {
ams@- waiting@public void waiting() {

/home/Giovanni/DEVEL/ADK/src/fipa/domain/df.java
df@- local_startup@public void local_startup() {
df@- parseMsg@public int parseMsg() {
df@- sendAddress@private void sendAddress( String requestedAdd, aclMessage msg, String type ) {
df@- updateService@private void updateService( String source, String name, String service ) {

/home/Giovanni/DEVEL/ADK/src/fipa/lang/Parser.java
Parser@> parse@public void parse(Reader textSource);

/home/Giovanni/DEVEL/ADK/src/fipa/lang/acl/ACLParser.java
ACLParser@+ ACLParser@public ACLParser() {
ACLParser@- getMessage@public Message getMessage() {
ACLParser@- parse@public void parse(Reader textSource) {

/home/Giovanni/DEVEL/ADK/src/fipa/lang/acl/Message.java
MessageImpl@+ MessageImpl@public MessageImpl() {
Message@> getKind@public String getKind();
MessageImpl@- getKind@public String getKind() {
Message@> getValue@public String getValue(String name);
MessageImpl@- getValue@public String getValue(String name) {
MessageImpl@- initKinds@private static synchronized void initKinds() {

/home/Giovanni/DEVEL/ADK/src/fipa/lang/acl/grammar.java
MessageParameter@> value@public String value();
senderParam@- value@public String value() {
receiverParam@- value@public String value() {
contentParam@- value@public String value() {
replyWithParam@- value@public String value() {
replyByParam@- value@public String value() {
inReplyToParam@- value@public String value() {
envelopeParam@- value@public String value() {
languageParam@- value@public String value() {
ontologyParam@- value@public String value() {
protocolParam@- value@public String value() {
conversationIdParam@- value@public String value() {
