
/home/Giovanni/DEVEL/ADK/src/fipa/core/Agent.java
Agent@+ Agent@public Agent() {
Agent@- addBehaviour@public void addBehaviour(Behaviour b) {
Agent@- addCommListener@public final void addCommListener(CommListener l) {
Agent@- blockingReceive@protected final ACLMessage blockingReceive() {
Agent@- doActivate@public void doActivate() {
Agent@- doMove@public void doMove() {
Agent@- doStart@public void doStart(String name) {
Agent@- doSuspend@public void doSuspend() {
Agent@- doWait@public void doWait() {
Agent@- doWake@public void doWake() {
Agent@- localStartup@protected void localStartup() {
Agent@- postMessage@public final synchronized void postMessage (ACLMessage msg) {
Agent@- receive@protected final ACLMessage receive() {
Agent@- removeBehaviour@public void removeBehaviour(Behaviour b) {
Agent@- removeCommListener@public final void removeCommListener(CommListener l) {
Agent@- run@public final void run() {
Agent@- schedule@public void schedule() {
Agent@- send@protected final void send(ACLMessage msg) {

/home/Giovanni/DEVEL/ADK/src/fipa/core/AgentPlatform.java
AgentPlatform@> addContainer@public void addContainer(AgentContainer ac) throws RemoteException;
AgentPlatform@> bornAgent@public void bornAgent(AgentDescriptor desc) throws RemoteException;
AgentPlatform@> deadAgent@public void deadAgent(String name) throws RemoteException;
AgentPlatform@> lookup@public AgentDescriptor lookup(String agentName) throws RemoteException, NotFoundException;
AgentPlatform@> removeContainer@public void removeContainer(AgentContainer ac) throws RemoteException;

/home/Giovanni/DEVEL/ADK/src/fipa/core/Behaviour.java
Behaviour@> done@public boolean done();
Behaviour@> execute@public void execute();

/home/Giovanni/DEVEL/ADK/src/fipa/core/CommBroadcaster.java
CommBroadcaster@> addCommListener@void addCommListener (CommListener l);
CommBroadcaster@> removeCommListener@void removeCommListener(CommListener event);

/home/Giovanni/DEVEL/ADK/src/fipa/core/CommEvent.java
CommEvent@+ CommEvent@public CommEvent(CommBroadcaster source, ACLMessage message) {
CommEvent@+ CommEvent@public CommEvent(CommBroadcaster source, String command) {
CommEvent@- getCommand@public String getCommand() {
CommEvent@- getMessage@public ACLMessage getMessage() {

/home/Giovanni/DEVEL/ADK/src/fipa/core/CommListener.java
CommListener@> CommHandle@void CommHandle( CommEvent event );

/home/Giovanni/DEVEL/ADK/src/fipa/core/MessageDispatcher.java
MessageDispatcher@> dispatch@public void dispatch(String msg) throws RemoteException, NotFoundException;
MessageDispatcher@> dispatch@public void dispatch(ACLMessage msg) throws RemoteException, NotFoundException;

/home/Giovanni/DEVEL/ADK/src/fipa/domain/ams.java
ams@- ThreadChanged@public void ThreadChanged( ThreadEvent event ) {
ams@+ ams@public ams(int dfPort, Socket sock, Vector agents, Vector sockets ) {
ams@- parseMsg@public void parseMsg( aclMessage msg ) {
ams@- receive@public aclMessage receive() throws ParseException {
ams@- run@public void run() {
ams@- send@private void send( aclMessage msg, OutputStream localOs ) {
ams@- sendAddress@private void sendAddress( String requestedAdd, aclMessage msg, String type ) {
ams@- updateDb@private synchronized void updateDb( String source, String name ) {
ams@- waiting@public void waiting() {

/home/Giovanni/DEVEL/ADK/src/fipa/domain/df.java
df@- local_startup@public void local_startup() {
df@- parseMsg@public int parseMsg() {
df@- sendAddress@private void sendAddress( String requestedAdd, aclMessage msg, String type ) {
df@- updateService@private void updateService( String source, String name, String service ) {

/home/Giovanni/DEVEL/ADK/src/fipa/lang/Parser.java
Parser@> parse@public void parse(Reader textSource);

/home/Giovanni/DEVEL/ADK/src/fipa/lang/acl/Message.java
MessageImpl@+ MessageImpl@public MessageImpl() {
MessageImpl@= acceptProposalKind@private static final Object acceptProposalKind =
MessageImpl@= agreeKind@private static final Object agreeKind =
MessageImpl@= cancelKind@private static final Object cancelKind =
MessageImpl@= cfpKind@private static final Object cfpKind =
MessageImpl@= confirmKind@private static final Object confirmKind =
MessageImpl@= disconfirmKind@private static final Object disconfirmKind =
MessageImpl@= failureKind@private static final Object failureKind =
Message@= getKind@public String getKind();
MessageImpl@- getKind@public String getKind() {
Message@= getValue@public String getValue(String name);
MessageImpl@- getValue@public String getValue(String name) {
MessageImpl@= informIfKind@private static final Object informIfKind =
MessageImpl@= informKind@private static final Object informKind =
MessageImpl@= informRefKind@private static final Object informRefKind =
MessageImpl@- initKinds@private static synchronized void initKinds() {
MessageImpl@= messageKinds@private static Hashtable messageKinds;
MessageImpl@= notUnderstoodKind@private static final Object notUnderstoodKind =
MessageImpl@= parameters@private Hashtable parameters;
MessageImpl@= proposeKind@private static final Object proposeKind =
MessageImpl@= queryIfKind@private static final Object queryIfKind =
MessageImpl@= queryRefKind@private static final Object queryRefKind =
MessageImpl@= refuseKind@private static final Object refuseKind =
MessageImpl@= rejectProposalKind@private static final Object rejectProposalKind =
MessageImpl@= requestKind@private static final Object requestKind =
MessageImpl@= requestWhenKind@private static final Object requestWhenKind =
MessageImpl@= requestWheneverKind@private static final Object requestWheneverKind =
MessageImpl@= subscribeKind@private static final Object subscribeKind =

/home/Giovanni/DEVEL/ADK/src/fipa/lang/acl/grammar.java
MessageParameter@= value@public String value();
senderParam@- value@public String value() {
receiverParam@- value@public String value() {
contentParam@- value@public String value() {
replyWithParam@- value@public String value() {
replyByParam@- value@public String value() {
inReplyToParam@- value@public String value() {
envelopeParam@- value@public String value() {
languageParam@- value@public String value() {
ontologyParam@- value@public String value() {
protocolParam@- value@public String value() {
conversationIdParam@- value@public String value() {

/home/Giovanni/DEVEL/ADK/src/fipa/core/AgentDescriptor.java
AgentDescriptor@- getDemux@public MessageDispatcher getDemux() {
AgentDescriptor@- getName@public String getName() {
AgentDescriptor@- set@public void set(String s, MessageDispatcher md) {

/home/Giovanni/DEVEL/ADK/src/fipa/core/NotFoundException.java
NotFoundException@+ NotFoundException@NotFoundException(String msg) {

/home/Giovanni/DEVEL/ADK/src/fipa/core/StartContainer.java
StartContainer@- main@public static void main(String args[]) {
StartContainer@- usage@private static void usage(){

/home/Giovanni/DEVEL/ADK/src/fipa/core/StartPlatform.java
StartPlatform@- main@public static void main(String args[]) {
StartPlatform@- usage@private static void usage() {

/home/Giovanni/DEVEL/ADK/src/fipa/core/AgentContainerImpl.java
AgentContainerImpl@+ AgentContainerImpl@public AgentContainerImpl(String platformURL, Vector agentNamesAndClasses) throws RemoteException {
AgentContainerImpl@- CommHandle@public void CommHandle(CommEvent event) {
AgentContainerImpl@+ finalize@protected void finalize() {
AgentContainerImpl@- postRemote@private void postRemote(ACLMessage msg, String receiverName) {

/home/Giovanni/DEVEL/ADK/src/fipa/core/AgentPlatformImpl.java
AgentPlatformImpl@+ AgentPlatformImpl@public AgentPlatformImpl() throws RemoteException {
AgentPlatformImpl@- addContainer@public void addContainer(AgentContainer ac) throws RemoteException {
AgentPlatformImpl@- bornAgent@public void bornAgent(AgentDescriptor desc) throws RemoteException {
AgentPlatformImpl@- deadAgent@public void deadAgent(String name) throws RemoteException {
AgentPlatformImpl@- lookup@public AgentDescriptor lookup(String agentName) throws RemoteException, NotFoundException {
AgentPlatformImpl@- removeContainer@public void removeContainer(AgentContainer ac) throws RemoteException {

/home/Giovanni/DEVEL/ADK/src/fipa/core/MessageDispatcherImpl.java
MessageDispatcherImpl@+ MessageDispatcherImpl@public MessageDispatcherImpl(Hashtable h) throws RemoteException {
MessageDispatcherImpl@- dispatch@public void dispatch(String msg) throws RemoteException, NotFoundException {
MessageDispatcherImpl@- dispatch@public void dispatch(ACLMessage msg) throws RemoteException, NotFoundException {

/home/Giovanni/DEVEL/ADK/src/fipa/lang/acl/ACLMessage.java
ACLMessage@+ ACLMessage@public ACLMessage( String source, int port ) {
ACLMessage@+ ACLMessage@public ACLMessage() {
ACLMessage@- dump@public void dump() {
ACLMessage@- duplicate@public void duplicate() {
ACLMessage@- getContent@public String getContent() {
ACLMessage@- getConversationId@public String getConversationId() {
ACLMessage@- getDest@public String getDest() {
ACLMessage@- getEnvelope@public String getEnvelope() {
ACLMessage@- getLanguage@public String getLanguage() {
ACLMessage@- getOntology@public String getOntology() {
ACLMessage@- getProtocol@public String getProtocol() {
ACLMessage@- getReplyBy@public String getReplyBy() {
ACLMessage@- getReplyTo@public String getReplyTo() {
ACLMessage@- getReplyWith@public String getReplyWith() {
ACLMessage@- getSource@public String getSource() {
ACLMessage@- getSrcPort@public int getSrcPort() {
ACLMessage@- getType@public String getType() {
ACLMessage@- receive@public void receive( String s ) {
ACLMessage@- send@public void send() {
ACLMessage@- setContent@public void setContent( String content ) {
ACLMessage@- setConversationId@public void setConversationId( String str ) {
ACLMessage@- setDest@public void setDest( String dest ) {
ACLMessage@- setEnvelope@public void setEnvelope( String str ) {
ACLMessage@- setLanguage@public void setLanguage( String str ) {
ACLMessage@- setOldString@private void setOldString( StringBuffer s, int type ) {
ACLMessage@- setOntology@public void setOntology( String str ) {
ACLMessage@- setProtocol@public void setProtocol( String str ) {
ACLMessage@- setReplyBy@public void setReplyBy( String str ) {
ACLMessage@- setReplyTo@public void setReplyTo( String reply ) {
ACLMessage@- setReplyWith@public void setReplyWith( String reply ) {
ACLMessage@- setSource@public void setSource( String source ) {
ACLMessage@- setType@public void setType( String type ) {

/home/Giovanni/DEVEL/ADK/src/ADK/src/fipa/core/Agent.java
Agent@- activate@public void activate(String name) {
Agent@- addBehaviour@public void addBehaviour(Behaviour b) {
Agent@- addCommListener@public final void addCommListener(CommListener l) {
Agent@- localStartup@protected void localStartup() {
Agent@- postMessage@public final synchronized void postMessage (ACLMessage msg) {
Agent@- receive@protected final ACLMessage receive() {
Agent@- removeBehaviour@public void removeBehaviour(Behaviour b) {
Agent@- removeCommListener@public final void removeCommListener(CommListener l) {
Agent@- run@public final void run() {
Agent@- schedule@public void schedule() {
Agent@- send@protected final void send(String msg) {
Agent@- send@protected final void send(ACLMessage msg) {

/home/Giovanni/DEVEL/ADK/src/ADK/src/fipa/core/AgentContainerImpl.java
AgentContainerImpl@+ AgentContainerImpl@public AgentContainerImpl(String platformURL, Vector agentNamesAndClasses) throws RemoteException {
AgentContainerImpl@- CommHandle@public void CommHandle(CommEvent event) {
AgentContainerImpl@+ finalize@protected void finalize() {
AgentContainerImpl@- postRemote@private void postRemote(ACLMessage msg, String receiverName) {

/home/Giovanni/DEVEL/ADK/src/ADK/src/fipa/core/AgentDescriptor.java
AgentDescriptor@- getDemux@public MessageDispatcher getDemux() {
AgentDescriptor@- getName@public String getName() {
AgentDescriptor@- set@public void set(String s, MessageDispatcher md) {

/home/Giovanni/DEVEL/ADK/src/ADK/src/fipa/core/AgentPlatform.java
AgentPlatform@> addContainer@public void addContainer(AgentContainer ac) throws RemoteException;
AgentPlatform@> bornAgent@public void bornAgent(AgentDescriptor desc) throws RemoteException;
AgentPlatform@> deadAgent@public void deadAgent(String name) throws RemoteException;
AgentPlatform@> lookup@public AgentDescriptor lookup(String agentName) throws RemoteException, NotFoundException;
AgentPlatform@> removeContainer@public void removeContainer(AgentContainer ac) throws RemoteException;

/home/Giovanni/DEVEL/ADK/src/ADK/src/fipa/core/AgentPlatformImpl.java
AgentPlatformImpl@+ AgentPlatformImpl@public AgentPlatformImpl() throws RemoteException {
AgentPlatformImpl@- addContainer@public void addContainer(AgentContainer ac) throws RemoteException {
AgentPlatformImpl@- bornAgent@public void bornAgent(AgentDescriptor desc) throws RemoteException {
AgentPlatformImpl@- deadAgent@public void deadAgent(String name) throws RemoteException {
AgentPlatformImpl@- lookup@public AgentDescriptor lookup(String agentName) throws RemoteException, NotFoundException {
AgentPlatformImpl@- removeContainer@public void removeContainer(AgentContainer ac) throws RemoteException {

/home/Giovanni/DEVEL/ADK/src/ADK/src/fipa/core/Behaviour.java
Behaviour@> execute@public void execute();

/home/Giovanni/DEVEL/ADK/src/ADK/src/fipa/core/CommBroadcaster.java
CommBroadcaster@> addCommListener@void addCommListener (CommListener l);
CommBroadcaster@> removeCommListener@void removeCommListener(CommListener event);

/home/Giovanni/DEVEL/ADK/src/ADK/src/fipa/core/CommEvent.java
CommEvent@+ CommEvent@public CommEvent(CommBroadcaster source, ACLMessage message) {
CommEvent@+ CommEvent@public CommEvent(CommBroadcaster source, String command) {
CommEvent@- getCommand@public String getCommand() {
CommEvent@- getMessage@public ACLMessage getMessage() {

/home/Giovanni/DEVEL/ADK/src/ADK/src/fipa/core/CommListener.java
CommListener@> CommHandle@void CommHandle( CommEvent event );

/home/Giovanni/DEVEL/ADK/src/ADK/src/fipa/core/MessageDispatcher.java
MessageDispatcher@> dispatch@public void dispatch(String msg) throws RemoteException, NotFoundException;
MessageDispatcher@> dispatch@public void dispatch(ACLMessage msg) throws RemoteException, NotFoundException;

/home/Giovanni/DEVEL/ADK/src/ADK/src/fipa/core/MessageDispatcherImpl.java
MessageDispatcherImpl@+ MessageDispatcherImpl@public MessageDispatcherImpl(Hashtable h) throws RemoteException {
MessageDispatcherImpl@- dispatch@public void dispatch(String msg) throws RemoteException, NotFoundException {
MessageDispatcherImpl@- dispatch@public void dispatch(ACLMessage msg) throws RemoteException, NotFoundException {

/home/Giovanni/DEVEL/ADK/src/ADK/src/fipa/core/NotFoundException.java
NotFoundException@+ NotFoundException@NotFoundException(String msg) {

/home/Giovanni/DEVEL/ADK/src/ADK/src/fipa/core/StartContainer.java
StartContainer@- main@public static void main(String args[]) {
StartContainer@- usage@private static void usage(){

/home/Giovanni/DEVEL/ADK/src/ADK/src/fipa/core/StartPlatform.java
StartPlatform@- main@public static void main(String args[]) {

/home/Giovanni/DEVEL/ADK/src/fipa/core/ComplexBehaviour.java
ComplexBehaviour@- BehaviourList@public BehaviourList() {
ComplexBehaviour@+ ComplexBehaviour@public ComplexBehaviour(Agent a) {
ComplexBehaviour@+ ComplexBehaviour@public ComplexBehaviour() {
ComplexBehaviour@- addBehaviour@public void addBehaviour(Behaviour b) {
ComplexBehaviour@- addElement@public final synchronized void addElement(Behaviour b) {
ComplexBehaviour@- begin@public void begin() {
ComplexBehaviour@- done@public boolean done() {
ComplexBehaviour@- end@public void end() {
ComplexBehaviour@- execute@public final void execute() {
ComplexBehaviour@- getCurrent@public Behaviour getCurrent() {
ComplexBehaviour@- isEmpty@public boolean isEmpty() {
ComplexBehaviour@- next@public boolean next() {
ComplexBehaviour@> postAction@protected abstract void postAction();
ComplexBehaviour@> preAction@protected abstract void preAction();
ComplexBehaviour@- removeBehaviour@public void removeBehaviour(Behaviour b) {
ComplexBehaviour@- removeElement@public final synchronized boolean removeElement(Behaviour b) {

/home/Giovanni/DEVEL/ADK/src/fipa/core/SimpleBehaviour.java
SimpleBehaviour@+ SimpleBehaviour@public SimpleBehaviour(Agent a) {
SimpleBehaviour@+ SimpleBehaviour@public SimpleBehaviour() {
SimpleBehaviour@> action@protected abstract void action();
SimpleBehaviour@- done@public boolean done() {
SimpleBehaviour@- execute@public final void execute() {
