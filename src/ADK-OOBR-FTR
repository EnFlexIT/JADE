
/home/rimassa/DEVEL/JADE/src/jade/core/Agent.java
Agent@= AP_ACTIVE@public static final int AP_ACTIVE =
Agent@= AP_DELETED@public static final int AP_DELETED =
Agent@= AP_INITIATED@public static final int AP_INITIATED =
Agent@= AP_MAX@public static final int AP_MAX =
Agent@= AP_MIN@public static final int AP_MIN =
Agent@= AP_SUSPENDED@public static final int AP_SUSPENDED =
Agent@= AP_WAITING@public static final int AP_WAITING =
Agent@+ Agent@public Agent() {
Agent@= D_ACTIVE@public static final int D_ACTIVE =
Agent@= D_MAX@public static final int D_MAX =
Agent@= D_MIN@public static final int D_MIN =
Agent@= D_RETIRED@public static final int D_RETIRED =
Agent@= D_SUSPENDED@public static final int D_SUSPENDED =
Agent@= D_UNKNOWN@public static final int D_UNKNOWN =
Agent@- addBehaviour@public void addBehaviour(Behaviour b) {
Agent@- addCommListener@public final void addCommListener(CommListener l) {
Agent@- blockingReceive@public final synchronized ACLMessage blockingReceive(MessageTemplate pattern) {
Agent@- blockingReceive@public final synchronized ACLMessage blockingReceive() {
Agent@- broadcastEvent@private void broadcastEvent(CommEvent event) {
Agent@= currentMessage@protected ACLMessage currentMessage;
Agent@- destroy@private void destroy() {
Agent@- doActivate@public void doActivate() {
Agent@- doDelete@public void doDelete() {
Agent@- doMove@public void doMove() {
Agent@- doStart@public void doStart(String name, String platformAddress) {
Agent@- doSuspend@public void doSuspend() {
Agent@- doWait@public synchronized void doWait() {
Agent@- doWake@public synchronized void doWake() {
Agent@- getName@public String getName() {
Agent@= listeners@protected Vector listeners =
Agent@- mainLoop@private void mainLoop() {
Agent@= msgQueue@protected Vector msgQueue =
Agent@= myAPState@private int myAPState;
Agent@= myAddress@protected String myAddress =
Agent@= myDomainState@private int myDomainState;
Agent@= myName@protected String myName =
Agent@= myParser@protected ACLParser myParser =
Agent@= myScheduler@protected Scheduler myScheduler;
Agent@= myThread@protected Thread myThread;
Agent@- parse@public ACLMessage parse(Reader text) {
Agent@- postMessage@public final synchronized void postMessage (ACLMessage msg) {
Agent@- putBack@public final synchronized void putBack(ACLMessage msg) {
Agent@- receive@public final synchronized ACLMessage receive(MessageTemplate pattern) {
Agent@- receive@public final synchronized ACLMessage receive() {
Agent@- registerWithAMS@public void registerWithAMS(String signature, String delegateAgent, String forwardAddress, int APState) throws FIPAException {
Agent@- removeBehaviour@public void removeBehaviour(Behaviour b) {
Agent@- removeCommListener@public final void removeCommListener(CommListener l) {
Agent@- run@public final void run() {
Agent@- send@public final void send(ACLMessage msg, AgentGroup g) {
Agent@- send@public final void send(ACLMessage msg) {
Agent@- setup@protected void setup() {

/home/rimassa/DEVEL/JADE/src/jade/core/AgentPlatform.java
AgentPlatform@= addContainer@public void addContainer(AgentContainer ac) throws RemoteException;
AgentPlatform@= bornAgent@public void bornAgent(AgentDescriptor desc) throws RemoteException;
AgentPlatform@= deadAgent@public void deadAgent(String name) throws RemoteException;
AgentPlatform@= lookup@public AgentDescriptor lookup(String agentName) throws RemoteException, NotFoundException;
AgentPlatform@= removeContainer@public void removeContainer(AgentContainer ac) throws RemoteException;

/home/rimassa/DEVEL/JADE/src/jade/core/Behaviour.java
Behaviour@= done@public boolean done();
Behaviour@= execute@public void execute();

/home/rimassa/DEVEL/JADE/src/jade/core/CommBroadcaster.java
CommBroadcaster@= addCommListener@void addCommListener (CommListener l);
CommBroadcaster@= removeCommListener@void removeCommListener(CommListener event);

/home/rimassa/DEVEL/JADE/src/jade/core/CommEvent.java
CommEvent@+ CommEvent@public CommEvent(CommBroadcaster source, ACLMessage message, AgentGroup group) {
CommEvent@+ CommEvent@public CommEvent(CommBroadcaster source, ACLMessage message) {
CommEvent@- getMessage@public ACLMessage getMessage() {
CommEvent@- getRecipients@public AgentGroup getRecipients() {
CommEvent@- isMulticast@public boolean isMulticast() {
CommEvent@= message@private ACLMessage message;
CommEvent@= recipients@private AgentGroup recipients;

/home/rimassa/DEVEL/JADE/src/jade/core/CommListener.java
CommListener@= CommHandle@void CommHandle( CommEvent event );

/home/rimassa/DEVEL/JADE/src/jade/core/MessageDispatcher.java
MessageDispatcher@= dispatch@public void dispatch(ACLMessage msg) throws RemoteException, NotFoundException;

/home/rimassa/DEVEL/JADE/src/jade/domain/ams.java
ams@- AMSBehaviour@protected AMSBehaviour(String actionName, ACLMessage msg, StringTokenizer st) {
ams@- AMSBehaviour@protected AMSBehaviour(String actionName) {
ams@= APState@private String APState;
ams@- AuthBehaviour@public AuthBehaviour(ACLMessage msg, StringTokenizer st) {
ams@- AuthBehaviour@public AuthBehaviour() {
ams@- DeregBehaviour@public DeregBehaviour(ACLMessage msg, StringTokenizer st) {
ams@- DeregBehaviour@public DeregBehaviour() {
ams@- ModBehaviour@public ModBehaviour(ACLMessage msg, StringTokenizer st) {
ams@- ModBehaviour@public ModBehaviour() {
ams@- RegBehaviour@public RegBehaviour(ACLMessage msg, StringTokenizer st) {
ams@- RegBehaviour@public RegBehaviour() {
ams@- action@public void action() {
ams@= address@private String address;
ams@= agentName@private String agentName;
ams@+ ams@public ams(AgentPlatformImpl ap, String name) {
ams@- checkAttribute@private void checkAttribute(String attributeName, String attributeValue) throws FIPAException {
ams@- crackMessage@private void crackMessage() throws FIPAException, NoSuchElementException {
ams@= delegateAgent@private String delegateAgent;
ams@= dispatcher@private FipaRequestServerBehaviour dispatcher;
ams@= forwardAddress@private String forwardAddress;
ams@- instance@public Behaviour instance(ACLMessage msg, StringTokenizer st) {
ams@- instance@public Behaviour instance(ACLMessage msg, StringTokenizer st) {
ams@- instance@public Behaviour instance(ACLMessage msg, StringTokenizer st) {
ams@- instance@public Behaviour instance(ACLMessage msg, StringTokenizer st) {
ams@= myActionName@private String myActionName;
ams@= myOntology@protected AgentManagementOntology myOntology;
ams@= myPlatform@private AgentPlatformImpl myPlatform;
ams@= myReply@private ACLMessage myReply;
ams@= myTokenizer@private StringTokenizer myTokenizer;
ams@- processAttributes@protected void processAttributes(String agentName, String address, String signature, String delegateAgent, String forwardAddress, String APState) {
ams@- processAttributes@protected void processAttributes(String agentName, String address, String signature, String delegateAgent, String forwardAddress, String APState) {
ams@- processAttributes@protected void processAttributes(String agentName, String address, String signature, String delegateAgent, String forwardAddress, String APState) {
ams@- processAttributes@protected void processAttributes(String agentName, String address, String signature, String delegateAgent, String forwardAddress, String APState) {
ams@> processAttributes@protected abstract void processAttributes(String agentName, String address, String signature, String delegateAgent, String forwardAddress, String APState);
ams@- registerWithAMS@public void registerWithAMS(String signature, String delegateAgent, String forwardAddress, int APState) {
ams@- sendAgree@protected void sendAgree(ACLMessage msg) {
ams@- sendFailure@protected void sendFailure(ACLMessage msg, String reason) {
ams@- sendInform@protected void sendInform(ACLMessage msg) {
ams@- sendNotUnderstood@protected void sendNotUnderstood(ACLMessage msg) {
ams@- sendRefuse@protected void sendRefuse(ACLMessage msg, String reason) {
ams@- setup@protected void setup() {
ams@= signature@private String signature;

/home/rimassa/DEVEL/JADE/src/jade/domain/df.java
df@- DFBehaviour@protected DFBehaviour(String actionName, ACLMessage msg, StringTokenizer st) {
df@- DFBehaviour@protected DFBehaviour(String actionName) {
df@- DFDeregister@private void DFDeregister(String agentName, String agentServices, String agentType, String interactionProtocols, String ontology, String address, String ownership, String DFState) {
df@- DFModify@private void DFModify(String agentName, String agentServices, String agentType, String interactionProtocols, String ontology, String address, String ownership, String DFState) {
df@- DFRegister@private void DFRegister(String agentName, String agentServices, String agentType, String interactionProtocols, String ontology, String address, String ownership, String DFState) {
df@- DFSearch@private void DFSearch(String agentName, String agentServices, String agentType, String interactionProtocols, String ontology, String address, String ownership, String DFState) {
df@= DFState@private String DFState;
df@- DeregBehaviour@public DeregBehaviour(ACLMessage msg, StringTokenizer st) {
df@- DeregBehaviour@public DeregBehaviour() {
df@- ModBehaviour@public ModBehaviour(ACLMessage msg, StringTokenizer st) {
df@- ModBehaviour@public ModBehaviour() {
df@- RegBehaviour@public RegBehaviour(ACLMessage msg, StringTokenizer st) {
df@- RegBehaviour@public RegBehaviour() {
df@- SrchBehaviour@public SrchBehaviour(ACLMessage msg, StringTokenizer st) {
df@- SrchBehaviour@public SrchBehaviour() {
df@- action@public void action() {
df@= address@private String address;
df@= agentName@private String agentName;
df@= agentServices@private String agentServices;
df@= agentType@private String agentType;
df@- checkAttribute@private void checkAttribute(String attributeName, String attributeValue) throws FIPAException {
df@- crackMessage@private void crackMessage() throws FIPAException, NoSuchElementException {
df@+ df@public df() {
df@= dispatcher@private FipaRequestServerBehaviour dispatcher;
df@- instance@public Behaviour instance(ACLMessage msg, StringTokenizer st) {
df@- instance@public Behaviour instance(ACLMessage msg, StringTokenizer st) {
df@- instance@public Behaviour instance(ACLMessage msg, StringTokenizer st) {
df@- instance@public Behaviour instance(ACLMessage msg, StringTokenizer st) {
df@= interactionProtocols@private String interactionProtocols;
df@= myActionName@private String myActionName;
df@= myOntology@protected AgentManagementOntology myOntology;
df@= myParser@private DFDescriptionParser myParser =
df@= myReply@private ACLMessage myReply;
df@= myTokenizer@private StringTokenizer myTokenizer;
df@= ontology@private String ontology;
df@= ownership@private String ownership;
df@- processAttributes@protected void processAttributes(String agentName, String agentServices, String agentType, String interactionProtocols, String ontology, String address, String ownership, String DFState) {
df@- processAttributes@protected void processAttributes(String agentName, String agentServices, String agentType, String interactionProtocols, String ontology, String address, String ownership, String DFState) {
df@- processAttributes@protected void processAttributes(String agentName, String agentServices, String agentType, String interactionProtocols, String ontology, String address, String ownership, String DFState) {
df@- processAttributes@protected void processAttributes(String agentName, String agentServices, String agentType, String interactionProtocols, String ontology, String address, String ownership, String DFState) {
df@> processAttributes@protected abstract void processAttributes(String agentName, String agentServices, String agentType, String interactionProtocols, String ontology, String address, String ownership, String DFState);
df@- sendAgree@protected void sendAgree(ACLMessage msg) {
df@- sendFailure@protected void sendFailure(ACLMessage msg, String reason) {
df@- sendInform@protected void sendInform(ACLMessage msg) {
df@- sendNotUnderstood@protected void sendNotUnderstood(ACLMessage msg) {
df@- sendRefuse@protected void sendRefuse(ACLMessage msg, String reason) {
df@- setup@protected void setup() {

/home/rimassa/DEVEL/JADE/src/jade/lang/Parser.java
Parser@= parse@public void parse(Reader textSource);

/home/rimassa/DEVEL/JADE/src/jade/lang/acl/Message.java
MessageImpl@+ MessageImpl@public MessageImpl() {
MessageImpl@= acceptProposalKind@private static final Object acceptProposalKind =
MessageImpl@= agreeKind@private static final Object agreeKind =
MessageImpl@= cancelKind@private static final Object cancelKind =
MessageImpl@= cfpKind@private static final Object cfpKind =
MessageImpl@= confirmKind@private static final Object confirmKind =
MessageImpl@= disconfirmKind@private static final Object disconfirmKind =
MessageImpl@= failureKind@private static final Object failureKind =
Message@= getKind@public String getKind();
MessageImpl@- getKind@public String getKind() {
Message@= getValue@public String getValue(String name);
MessageImpl@- getValue@public String getValue(String name) {
MessageImpl@= informIfKind@private static final Object informIfKind =
MessageImpl@= informKind@private static final Object informKind =
MessageImpl@= informRefKind@private static final Object informRefKind =
MessageImpl@- initKinds@private static synchronized void initKinds() {
MessageImpl@= messageKinds@private static Hashtable messageKinds;
MessageImpl@= notUnderstoodKind@private static final Object notUnderstoodKind =
MessageImpl@= parameters@private Hashtable parameters;
MessageImpl@= proposeKind@private static final Object proposeKind =
MessageImpl@= queryIfKind@private static final Object queryIfKind =
MessageImpl@= queryRefKind@private static final Object queryRefKind =
MessageImpl@= refuseKind@private static final Object refuseKind =
MessageImpl@= rejectProposalKind@private static final Object rejectProposalKind =
MessageImpl@= requestKind@private static final Object requestKind =
MessageImpl@= requestWhenKind@private static final Object requestWhenKind =
MessageImpl@= requestWheneverKind@private static final Object requestWheneverKind =
MessageImpl@= subscribeKind@private static final Object subscribeKind =

/home/rimassa/DEVEL/JADE/src/jade/lang/acl/grammar.java
MessageParameter@= value@public String value();
senderParam@- value@public String value() {
receiverParam@- value@public String value() {
contentParam@- value@public String value() {
replyWithParam@- value@public String value() {
replyByParam@- value@public String value() {
inReplyToParam@- value@public String value() {
envelopeParam@- value@public String value() {
languageParam@- value@public String value() {
ontologyParam@- value@public String value() {
protocolParam@- value@public String value() {
conversationIdParam@- value@public String value() {

/home/rimassa/DEVEL/JADE/src/jade/core/AgentDescriptor.java
AgentDescriptor@= APState@private int APState;
AgentDescriptor@= address@private String address;
AgentDescriptor@= delegateAgent@private String delegateAgent;
AgentDescriptor@= demux@private MessageDispatcher demux;
AgentDescriptor@- dump@public void dump() {
AgentDescriptor@= forwardAddress@private String forwardAddress;
AgentDescriptor@- getAPState@public int getAPState() {
AgentDescriptor@- getAddress@public String getAddress() {
AgentDescriptor@- getDelegateAgent@public String getDelegateAgent() {
AgentDescriptor@- getDemux@public MessageDispatcher getDemux() {
AgentDescriptor@- getForwardAddress@public String getForwardAddress() {
AgentDescriptor@- getName@public String getName() {
AgentDescriptor@- getSignature@public String getSignature() {
AgentDescriptor@= name@private String name;
AgentDescriptor@- setAPState@public void setAPState(int AP) throws IllegalArgumentException {
AgentDescriptor@- setAddress@public void setAddress(String a) {
AgentDescriptor@- setAll@public void setAll(String n, MessageDispatcher md, String a, String s, String d, String f, int AP) throws IllegalArgumentException {
AgentDescriptor@- setDelegateAgent@public void setDelegateAgent(String d) {
AgentDescriptor@- setDemux@public void setDemux(MessageDispatcher md) {
AgentDescriptor@- setForwardAddress@public void setForwardAddress(String f) {
AgentDescriptor@- setName@public void setName(String n) {
AgentDescriptor@- setSignature@public void setSignature(String s) {
AgentDescriptor@= signature@private String signature;

/home/rimassa/DEVEL/JADE/src/jade/core/NotFoundException.java
NotFoundException@+ NotFoundException@NotFoundException(String msg) {

/home/rimassa/DEVEL/JADE/src/jade/core/StartContainer.java
StartContainer@- main@public static void main(String args[]) {
StartContainer@- usage@private static void usage(){

/home/rimassa/DEVEL/JADE/src/jade/core/StartPlatform.java
StartPlatform@- main@public static void main(String args[]) {
StartPlatform@- usage@private static void usage() {

/home/rimassa/DEVEL/JADE/src/jade/core/AgentContainerImpl.java
AgentContainerImpl@+ AgentContainerImpl@public AgentContainerImpl() throws RemoteException {
AgentContainerImpl@- CommHandle@public void CommHandle(CommEvent event) {
AgentContainerImpl@= MAP_LOAD_FACTOR@private static final float MAP_LOAD_FACTOR =
AgentContainerImpl@= MAP_SIZE@private static final int MAP_SIZE =
AgentContainerImpl@+ finalize@protected void finalize() {
AgentContainerImpl@- joinPlatform@public void joinPlatform(String platformRMI, String platformIIOP, Vector agentNamesAndClasses) {
AgentContainerImpl@= localAgents@protected Hashtable localAgents =
AgentContainerImpl@= myDispatcher@protected MessageDispatcherImpl myDispatcher;
AgentContainerImpl@= myPlatform@private AgentPlatform myPlatform;
AgentContainerImpl@= platformAddress@protected String platformAddress;
AgentContainerImpl@- postRemote@private void postRemote(ACLMessage msg, String receiverName) {
AgentContainerImpl@= remoteAgentsCache@private Hashtable remoteAgentsCache =
AgentContainerImpl@- shutDown@public void shutDown() {
AgentContainerImpl@- unicastPostMessage@private void unicastPostMessage(ACLMessage msg) {

/home/rimassa/DEVEL/JADE/src/jade/core/AgentPlatformImpl.java
AgentPlatformImpl@- AMSChangeData@public void AMSChangeData(String agentName, String address, String signature, String delegateAgent, String forwardAddress, String APState) throws FIPAException {
AgentPlatformImpl@- AMSDumpData@public void AMSDumpData(String agentName) {
AgentPlatformImpl@- AMSDumpData@public void AMSDumpData() {
AgentPlatformImpl@- AMSNewData@public void AMSNewData(String agentName, String address, String signature, String delegateAgent, String forwardAddress, String APState) throws FIPAException, AgentAlreadyRegisteredException {
AgentPlatformImpl@- AMSRemoveData@public void AMSRemoveData(String agentName, String address, String signature, String delegateAgent, String forwardAddress, String APState) throws FIPAException {
AgentPlatformImpl@+ AgentPlatformImpl@public AgentPlatformImpl() throws RemoteException {
AgentPlatformImpl@= GLOBALMAP_LOAD_FACTOR@private static final float GLOBALMAP_LOAD_FACTOR =
AgentPlatformImpl@= GLOBALMAP_SIZE@private static final int GLOBALMAP_SIZE =
AgentPlatformImpl@- addContainer@public void addContainer(AgentContainer ac) throws RemoteException {
AgentPlatformImpl@- bornAgent@public void bornAgent(AgentDescriptor desc) throws RemoteException {
AgentPlatformImpl@= containers@private Vector containers =
AgentPlatformImpl@- deadAgent@public void deadAgent(String name) throws RemoteException {
AgentPlatformImpl@= defaultDF@private df defaultDF;
AgentPlatformImpl@- initACC@private void initACC() {
AgentPlatformImpl@- initAMS@private void initAMS() {
AgentPlatformImpl@- initDF@private void initDF() {
AgentPlatformImpl@- lookup@public AgentDescriptor lookup(String agentName) throws RemoteException, NotFoundException {
AgentPlatformImpl@= platformAgents@private Hashtable platformAgents =
AgentPlatformImpl@- removeContainer@public void removeContainer(AgentContainer ac) throws RemoteException {
AgentPlatformImpl@= theAMS@private ams theAMS;

/home/rimassa/DEVEL/JADE/src/jade/core/MessageDispatcherImpl.java
MessageDispatcherImpl@+ MessageDispatcherImpl@public MessageDispatcherImpl(Hashtable h) throws RemoteException {
MessageDispatcherImpl@- dispatch@public void dispatch(ACLMessage msg) throws RemoteException, NotFoundException {
MessageDispatcherImpl@= localAgents@private Hashtable localAgents;
MessageDispatcherImpl@= parser@private ACLParser parser =

/home/rimassa/DEVEL/JADE/src/jade/lang/acl/ACLMessage.java
ACLMessage@+ ACLMessage@public ACLMessage() {
ACLMessage@= CONTENT@private static final String CONTENT =
ACLMessage@= CONVERSATION_ID@private static final String CONVERSATION_ID =
ACLMessage@= DEST@private static final String DEST =
ACLMessage@= ENVELOPE@private static final String ENVELOPE =
ACLMessage@= IN_REPLY_TO@private static final String IN_REPLY_TO =
ACLMessage@= LANGUAGE@private static final String LANGUAGE =
ACLMessage@= ONTOLOGY@private static final String ONTOLOGY =
ACLMessage@= PROTOCOL@private static final String PROTOCOL =
ACLMessage@= REPLY_BY@private static final String REPLY_BY =
ACLMessage@= REPLY_WITH@private static final String REPLY_WITH =
ACLMessage@= SOURCE@private static final String SOURCE =
ACLMessage@- clone@public synchronized Object clone() {
ACLMessage@= content@private String content;
ACLMessage@= conversation_id@private String conversation_id;
ACLMessage@= counter@private static int counter =
ACLMessage@= dest@private String dest;
ACLMessage@- dump@public void dump() {
ACLMessage@= envelope@private String envelope;
ACLMessage@- getContent@public String getContent() {
ACLMessage@- getConversationId@public String getConversationId() {
ACLMessage@- getDest@public String getDest() {
ACLMessage@- getEnvelope@public String getEnvelope() {
ACLMessage@- getLanguage@public String getLanguage() {
ACLMessage@- getMessage@public byte[] getMessage() {
ACLMessage@- getOntology@public String getOntology() {
ACLMessage@- getProtocol@public String getProtocol() {
ACLMessage@- getReplyBy@public String getReplyBy() {
ACLMessage@- getReplyTo@public String getReplyTo() {
ACLMessage@- getReplyWith@public String getReplyWith() {
ACLMessage@- getSource@public String getSource() {
ACLMessage@- getType@public String getType() {
ACLMessage@= in_reply_to@private String in_reply_to;
ACLMessage@= language@private String language;
ACLMessage@= msgType@private String msgType;
ACLMessage@= ontology@private String ontology;
ACLMessage@= protocol@private String protocol;
ACLMessage@= reply_by@private String reply_by;
ACLMessage@= reply_with@private String reply_with;
ACLMessage@- reset@public void reset() {
ACLMessage@- setContent@public void setContent( String content ) {
ACLMessage@- setConversationId@public void setConversationId( String str ) {
ACLMessage@- setDest@public void setDest( String dest ) {
ACLMessage@- setEnvelope@public void setEnvelope( String str ) {
ACLMessage@- setLanguage@public void setLanguage( String str ) {
ACLMessage@- setOntology@public void setOntology( String str ) {
ACLMessage@- setProtocol@public void setProtocol( String str ) {
ACLMessage@- setReplyBy@public void setReplyBy( String str ) {
ACLMessage@- setReplyTo@public void setReplyTo( String reply ) {
ACLMessage@- setReplyWith@public void setReplyWith( String reply ) {
ACLMessage@- setSource@public void setSource( String source ) {
ACLMessage@- setType@public void setType( String type ) {
ACLMessage@= source@private String source;

/home/rimassa/DEVEL/JADE/src/JADE/src/jade/core/Agent.java
Agent@- activate@public void activate(String name) {
Agent@- addBehaviour@public void addBehaviour(Behaviour b) {
Agent@- addCommListener@public final void addCommListener(CommListener l) {
Agent@- localStartup@protected void localStartup() {
Agent@- postMessage@public final synchronized void postMessage (ACLMessage msg) {
Agent@- receive@protected final ACLMessage receive() {
Agent@- removeBehaviour@public void removeBehaviour(Behaviour b) {
Agent@- removeCommListener@public final void removeCommListener(CommListener l) {
Agent@- run@public final void run() {
Agent@- schedule@public void schedule() {
Agent@- send@protected final void send(String msg) {
Agent@- send@protected final void send(ACLMessage msg) {

/home/rimassa/DEVEL/JADE/src/JADE/src/jade/core/AgentContainerImpl.java
AgentContainerImpl@+ AgentContainerImpl@public AgentContainerImpl(String platformURL, Vector agentNamesAndClasses) throws RemoteException {
AgentContainerImpl@- CommHandle@public void CommHandle(CommEvent event) {
AgentContainerImpl@+ finalize@protected void finalize() {
AgentContainerImpl@- postRemote@private void postRemote(ACLMessage msg, String receiverName) {

/home/rimassa/DEVEL/JADE/src/JADE/src/jade/core/AgentDescriptor.java
AgentDescriptor@- getDemux@public MessageDispatcher getDemux() {
AgentDescriptor@- getName@public String getName() {
AgentDescriptor@- set@public void set(String s, MessageDispatcher md) {

/home/rimassa/DEVEL/JADE/src/JADE/src/jade/core/AgentPlatform.java
AgentPlatform@> addContainer@public void addContainer(AgentContainer ac) throws RemoteException;
AgentPlatform@> bornAgent@public void bornAgent(AgentDescriptor desc) throws RemoteException;
AgentPlatform@> deadAgent@public void deadAgent(String name) throws RemoteException;
AgentPlatform@> lookup@public AgentDescriptor lookup(String agentName) throws RemoteException, NotFoundException;
AgentPlatform@> removeContainer@public void removeContainer(AgentContainer ac) throws RemoteException;

/home/rimassa/DEVEL/JADE/src/JADE/src/jade/core/AgentPlatformImpl.java
AgentPlatformImpl@+ AgentPlatformImpl@public AgentPlatformImpl() throws RemoteException {
AgentPlatformImpl@- addContainer@public void addContainer(AgentContainer ac) throws RemoteException {
AgentPlatformImpl@- bornAgent@public void bornAgent(AgentDescriptor desc) throws RemoteException {
AgentPlatformImpl@- deadAgent@public void deadAgent(String name) throws RemoteException {
AgentPlatformImpl@- lookup@public AgentDescriptor lookup(String agentName) throws RemoteException, NotFoundException {
AgentPlatformImpl@- removeContainer@public void removeContainer(AgentContainer ac) throws RemoteException {

/home/rimassa/DEVEL/JADE/src/JADE/src/jade/core/Behaviour.java
Behaviour@> execute@public void execute();

/home/rimassa/DEVEL/JADE/src/JADE/src/jade/core/CommBroadcaster.java
CommBroadcaster@> addCommListener@void addCommListener (CommListener l);
CommBroadcaster@> removeCommListener@void removeCommListener(CommListener event);

/home/rimassa/DEVEL/JADE/src/JADE/src/jade/core/CommEvent.java
CommEvent@+ CommEvent@public CommEvent(CommBroadcaster source, ACLMessage message) {
CommEvent@+ CommEvent@public CommEvent(CommBroadcaster source, String command) {
CommEvent@- getCommand@public String getCommand() {
CommEvent@- getMessage@public ACLMessage getMessage() {

/home/rimassa/DEVEL/JADE/src/JADE/src/jade/core/CommListener.java
CommListener@> CommHandle@void CommHandle( CommEvent event );

/home/rimassa/DEVEL/JADE/src/JADE/src/jade/core/MessageDispatcher.java
MessageDispatcher@> dispatch@public void dispatch(String msg) throws RemoteException, NotFoundException;
MessageDispatcher@> dispatch@public void dispatch(ACLMessage msg) throws RemoteException, NotFoundException;

/home/rimassa/DEVEL/JADE/src/JADE/src/jade/core/MessageDispatcherImpl.java
MessageDispatcherImpl@+ MessageDispatcherImpl@public MessageDispatcherImpl(Hashtable h) throws RemoteException {
MessageDispatcherImpl@- dispatch@public void dispatch(String msg) throws RemoteException, NotFoundException {
MessageDispatcherImpl@- dispatch@public void dispatch(ACLMessage msg) throws RemoteException, NotFoundException {

/home/rimassa/DEVEL/JADE/src/JADE/src/jade/core/NotFoundException.java
NotFoundException@+ NotFoundException@NotFoundException(String msg) {

/home/rimassa/DEVEL/JADE/src/JADE/src/jade/core/StartContainer.java
StartContainer@- main@public static void main(String args[]) {
StartContainer@- usage@private static void usage(){

/home/rimassa/DEVEL/JADE/src/JADE/src/jade/core/StartPlatform.java
StartPlatform@- main@public static void main(String args[]) {

/home/rimassa/DEVEL/JADE/src/jade/core/ComplexBehaviour.java
ComplexBehaviour@- BehaviourList@private class BehaviourList {
ComplexBehaviour@+ ComplexBehaviour@public ComplexBehaviour(Agent a) {
ComplexBehaviour@+ ComplexBehaviour@public ComplexBehaviour() {
ComplexBehaviour@> action@protected abstract boolean action();
ComplexBehaviour@- addBehaviour@public void addBehaviour(Behaviour b) {
ComplexBehaviour@- done@public boolean done() {
ComplexBehaviour@- execute@public final void execute() {
ComplexBehaviour@= finished@private boolean finished =
ComplexBehaviour@= myAgent@protected Agent myAgent;
ComplexBehaviour@- postAction@protected void postAction() {
ComplexBehaviour@- preAction@protected void preAction() {
ComplexBehaviour@- removeBehaviour@public void removeBehaviour(Behaviour b) {
ComplexBehaviour@= starting@private boolean starting =
ComplexBehaviour@= subBehaviours@protected BehaviourList subBehaviours =

/home/rimassa/DEVEL/JADE/src/jade/core/SimpleBehaviour.java
SimpleBehaviour@+ SimpleBehaviour@public SimpleBehaviour(Agent a) {
SimpleBehaviour@+ SimpleBehaviour@public SimpleBehaviour() {
SimpleBehaviour@> action@protected abstract void action();
SimpleBehaviour@- done@public boolean done() {
SimpleBehaviour@- execute@public final void execute() {
SimpleBehaviour@= finished@protected boolean finished =
SimpleBehaviour@= myAgent@protected Agent myAgent;

/home/rimassa/DEVEL/JADE/src/jade/core/Scheduler.java
Scheduler@+ Scheduler@public Scheduler(Agent a) {
Scheduler@- add@public synchronized void add(Behaviour b) {
Scheduler@= behaviours@protected Vector behaviours =
Scheduler@= currentIndex@private int currentIndex;
Scheduler@+ finalize@protected void finalize() {
Scheduler@= idleBehaviour@private static Behaviour idleBehaviour =
Scheduler@= owner@private Agent owner;
Scheduler@- remove@public void remove(Behaviour b) {
Scheduler@- schedule@public synchronized Behaviour schedule() {

/home/rimassa/DEVEL/JADE/src/jade/lang/acl/ACLParser.java
ACLParser@+ ACLParser@public ACLParser(ACLParserTokenManager tm) {
ACLParser@+ ACLParser@public ACLParser(java.io.Reader stream) {
ACLParser@+ ACLParser@public ACLParser(java.io.InputStream stream) {
ACLParser@- AgentName@final public String AgentName() throws ParseException {
ACLParser@- ByteLengthEncodedString@final public String ByteLengthEncodedString() throws ParseException {
ACLParser@- DateTimeToken@final public String DateTimeToken() throws ParseException {
ACLParser@- Digit@final public String Digit() throws ParseException {
ACLParser@- Expression@final public String Expression() throws ParseException {
ACLParser@- Float@final public String Float() throws ParseException {
ACLParser@- Integer@final public String Integer() throws ParseException {
ACLParser@- KeyValuePair@final public String KeyValuePair() throws ParseException {
ACLParser@- KeyValuePairList@final public String KeyValuePairList() throws ParseException {
ACLParser@- Message@final public ACLMessage Message() throws ParseException {
ACLParser@- MessageParameter@final public void MessageParameter() throws ParseException {
ACLParser@- MessageType@final public void MessageType() throws ParseException {
ACLParser@- Number@final public String Number() throws ParseException {
ACLParser@- ReInit@public void ReInit(ACLParserTokenManager tm) {
ACLParser@- ReInit@public void ReInit(java.io.Reader stream) {
ACLParser@- ReInit@public void ReInit(java.io.InputStream stream) {
ACLParser@- RecipientExpr@final public String RecipientExpr() throws ParseException {
ACLParser@- StringLiteral@final public String StringLiteral() throws ParseException {
ACLParser@- Stringa@final public String Stringa() throws ParseException {
ACLParser@- Word@final public String Word() throws ParseException {
ACLParser@- create@public static ACLParser create() {
ACLParser@- disable_tracing@final public void disable_tracing() {
ACLParser@- enable_tracing@final public void enable_tracing() {
ACLParser@- generateParseException@final public ParseException generateParseException() {
ACLParser@- getNextToken@final public Token getNextToken() {
ACLParser@- getToken@final public Token getToken(int index) {
ACLParser@- jj_consume_token@final private Token jj_consume_token(int kind) throws ParseException {
ACLParser@= jj_expentries@private java.util.Vector jj_expentries =
ACLParser@= jj_expentry@private int[] jj_expentry;
ACLParser@= jj_gen@private int jj_gen;
ACLParser@= jj_input_stream@ASCII_CharStream jj_input_stream;
ACLParser@= jj_kind@private int jj_kind =
ACLParser@= jj_la1@final private int[] jj_la1 =
ACLParser@= jj_la1_0@final private int[] jj_la1_0 =
ACLParser@= jj_la1_1@final private int[] jj_la1_1 =
ACLParser@- jj_ntk@final private int jj_ntk() {
ACLParser@= jj_ntk@private int jj_ntk;
ACLParser@- main@public static void main(String args[]) throws ParseException {
ACLParser@= msg@ACLMessage msg =
ACLParser@- parse@public ACLMessage parse(Reader text) throws ParseException {
ACLParser@= token_source@public ACLParserTokenManager token_source;

/home/rimassa/DEVEL/JADE/src/jade/lang/acl/ACLParserTokenManager.java
ACLParserTokenManager@+ ACLParserTokenManager@public ACLParserTokenManager(ASCII_CharStream stream, int lexState) {
ACLParserTokenManager@+ ACLParserTokenManager@public ACLParserTokenManager(ASCII_CharStream stream) {
ACLParserTokenManager@- ReInit@public void ReInit(ASCII_CharStream stream, int lexState) {
ACLParserTokenManager@- ReInit@public void ReInit(ASCII_CharStream stream) {
ACLParserTokenManager@- ReInitRounds@private final void ReInitRounds() {
ACLParserTokenManager@- SwitchTo@public void SwitchTo(int lexState) {
ACLParserTokenManager@- TokenLexicalActions@final void TokenLexicalActions(Token matchedToken) {
ACLParserTokenManager@= curChar@protected char curChar;
ACLParserTokenManager@= curLexState@int curLexState =
ACLParserTokenManager@= defaultLexState@int defaultLexState =
ACLParserTokenManager@- getNextToken@public final Token getNextToken() {
ACLParserTokenManager@= image@StringBuffer image;
ACLParserTokenManager@= input_stream@private ASCII_CharStream input_stream;
ACLParserTokenManager@- jjAddStates@private final void jjAddStates(int start, int end) {
ACLParserTokenManager@- jjCheckNAdd@private final void jjCheckNAdd(int state) {
ACLParserTokenManager@- jjCheckNAddStates@private final void jjCheckNAddStates(int start) {
ACLParserTokenManager@- jjCheckNAddStates@private final void jjCheckNAddStates(int start, int end) {
ACLParserTokenManager@- jjCheckNAddTwoStates@private final void jjCheckNAddTwoStates(int state1, int state2) {
ACLParserTokenManager@- jjFillToken@private final Token jjFillToken() {
ACLParserTokenManager@- jjMoveNfa_1@private final int jjMoveNfa_1(int startState, int curPos) {
ACLParserTokenManager@- jjMoveNfa_3@private final int jjMoveNfa_3(int startState, int curPos) {
ACLParserTokenManager@- jjMoveStringLiteralDfa0_0@private final int jjMoveStringLiteralDfa0_0() {
ACLParserTokenManager@- jjMoveStringLiteralDfa0_1@private final int jjMoveStringLiteralDfa0_1() {
ACLParserTokenManager@- jjMoveStringLiteralDfa0_2@private final int jjMoveStringLiteralDfa0_2() {
ACLParserTokenManager@- jjMoveStringLiteralDfa0_3@private final int jjMoveStringLiteralDfa0_3() {
ACLParserTokenManager@- jjMoveStringLiteralDfa10_2@private final int jjMoveStringLiteralDfa10_2(long old0, long active0) {
ACLParserTokenManager@- jjMoveStringLiteralDfa11_2@private final int jjMoveStringLiteralDfa11_2(long old0, long active0) {
ACLParserTokenManager@- jjMoveStringLiteralDfa12_2@private final int jjMoveStringLiteralDfa12_2(long old0, long active0) {
ACLParserTokenManager@- jjMoveStringLiteralDfa13_2@private final int jjMoveStringLiteralDfa13_2(long old0, long active0) {
ACLParserTokenManager@- jjMoveStringLiteralDfa14_2@private final int jjMoveStringLiteralDfa14_2(long old0, long active0) {
ACLParserTokenManager@- jjMoveStringLiteralDfa15_2@private final int jjMoveStringLiteralDfa15_2(long old0, long active0) {
ACLParserTokenManager@- jjMoveStringLiteralDfa1_2@private final int jjMoveStringLiteralDfa1_2(long active0) {
ACLParserTokenManager@- jjMoveStringLiteralDfa2_2@private final int jjMoveStringLiteralDfa2_2(long old0, long active0) {
ACLParserTokenManager@- jjMoveStringLiteralDfa3_2@private final int jjMoveStringLiteralDfa3_2(long old0, long active0) {
ACLParserTokenManager@- jjMoveStringLiteralDfa4_2@private final int jjMoveStringLiteralDfa4_2(long old0, long active0) {
ACLParserTokenManager@- jjMoveStringLiteralDfa5_2@private final int jjMoveStringLiteralDfa5_2(long old0, long active0) {
ACLParserTokenManager@- jjMoveStringLiteralDfa6_2@private final int jjMoveStringLiteralDfa6_2(long old0, long active0) {
ACLParserTokenManager@- jjMoveStringLiteralDfa7_2@private final int jjMoveStringLiteralDfa7_2(long old0, long active0) {
ACLParserTokenManager@- jjMoveStringLiteralDfa8_2@private final int jjMoveStringLiteralDfa8_2(long old0, long active0) {
ACLParserTokenManager@- jjMoveStringLiteralDfa9_2@private final int jjMoveStringLiteralDfa9_2(long old0, long active0) {
ACLParserTokenManager@- jjStartNfaWithStates_1@private final int jjStartNfaWithStates_1(int pos, int kind, int state) {
ACLParserTokenManager@- jjStartNfaWithStates_3@private final int jjStartNfaWithStates_3(int pos, int kind, int state) {
ACLParserTokenManager@- jjStartNfa_1@private final int jjStartNfa_1(int pos, long active0) {
ACLParserTokenManager@- jjStartNfa_3@private final int jjStartNfa_3(int pos, long active0) {
ACLParserTokenManager@- jjStopAtPos@private final int jjStopAtPos(int pos, int kind) {
ACLParserTokenManager@- jjStopStringLiteralDfa_1@private final int jjStopStringLiteralDfa_1(int pos, long active0) {
ACLParserTokenManager@- jjStopStringLiteralDfa_3@private final int jjStopStringLiteralDfa_3(int pos, long active0) {
ACLParserTokenManager@= jjbitVec0@static final long[] jjbitVec0 =
ACLParserTokenManager@= jjimageLen@int jjimageLen;
ACLParserTokenManager@= jjmatchedKind@int jjmatchedKind;
ACLParserTokenManager@= jjmatchedPos@int jjmatchedPos;
ACLParserTokenManager@= jjnewLexState@public static final int[] jjnewLexState =
ACLParserTokenManager@= jjnewStateCnt@int jjnewStateCnt;
ACLParserTokenManager@= jjnextStates@static final int[] jjnextStates =
ACLParserTokenManager@= jjround@int jjround;
ACLParserTokenManager@= jjrounds@private final int[] jjrounds =
ACLParserTokenManager@= jjstateSet@private final int[] jjstateSet =
ACLParserTokenManager@= jjstrLiteralImages@public static final String[] jjstrLiteralImages =
ACLParserTokenManager@= jjtoSkip@static final long[] jjtoSkip =
ACLParserTokenManager@= jjtoToken@static final long[] jjtoToken =
ACLParserTokenManager@= lengthOfMatch@int lengthOfMatch;
ACLParserTokenManager@= lexStateNames@public static final String[] lexStateNames =

/home/rimassa/DEVEL/JADE/src/jade/lang/acl/ASCII_CharStream.java
ASCII_CharStream@+ ASCII_CharStream@public ASCII_CharStream(java.io.InputStream dstream, int startline, int startcolumn) {
ASCII_CharStream@+ ASCII_CharStream@public ASCII_CharStream(java.io.InputStream dstream, int startline, int startcolumn, int buffersize) {
ASCII_CharStream@+ ASCII_CharStream@public ASCII_CharStream(java.io.Reader dstream, int startline, int startcolumn) {
ASCII_CharStream@+ ASCII_CharStream@public ASCII_CharStream(java.io.Reader dstream, int startline, int startcolumn, int buffersize) {
ASCII_CharStream@- BeginToken@public final char BeginToken() throws java.io.IOException {
ASCII_CharStream@- Done@public void Done() {
ASCII_CharStream@- ExpandBuff@private final void ExpandBuff(boolean wrapAround) {
ASCII_CharStream@- FillBuff@private final void FillBuff() throws java.io.IOException {
ASCII_CharStream@- GetImage@public final String GetImage() {
ASCII_CharStream@- GetSuffix@public final char[] GetSuffix(int len) {
ASCII_CharStream@- ReInit@public void ReInit(java.io.InputStream dstream, int startline, int startcolumn) {
ASCII_CharStream@- ReInit@public void ReInit(java.io.InputStream dstream, int startline, int startcolumn, int buffersize) {
ASCII_CharStream@- ReInit@public void ReInit(java.io.Reader dstream, int startline, int startcolumn) {
ASCII_CharStream@- ReInit@public void ReInit(java.io.Reader dstream, int startline, int startcolumn, int buffersize) {
ASCII_CharStream@- UpdateLineColumn@private final void UpdateLineColumn(char c) {
ASCII_CharStream@- adjustBeginLineColumn@public void adjustBeginLineColumn(int newLine, int newCol) {
ASCII_CharStream@= available@int available;
ASCII_CharStream@- backup@public final void backup(int amount) {
ASCII_CharStream@= bufcolumn@private int bufcolumn[];
ASCII_CharStream@= buffer@private char[] buffer;
ASCII_CharStream@= bufline@private int bufline[];
ASCII_CharStream@= bufpos@public int bufpos =
ASCII_CharStream@= bufsize@int bufsize;
ASCII_CharStream@= column@private int column =
ASCII_CharStream@- getBeginColumn@public final int getBeginColumn() {
ASCII_CharStream@- getBeginLine@public final int getBeginLine() {
ASCII_CharStream@- getColumn@public final int getColumn() {
ASCII_CharStream@- getEndColumn@public final int getEndColumn() {
ASCII_CharStream@- getEndLine@public final int getEndLine() {
ASCII_CharStream@- getLine@public final int getLine() {
ASCII_CharStream@= inBuf@private int inBuf =
ASCII_CharStream@= inputStream@private java.io.Reader inputStream;
ASCII_CharStream@= line@private int line =
ASCII_CharStream@= maxNextCharInd@private int maxNextCharInd =
ASCII_CharStream@= prevCharIsCR@private boolean prevCharIsCR =
ASCII_CharStream@= prevCharIsLF@private boolean prevCharIsLF =
ASCII_CharStream@- readChar@public final char readChar() throws java.io.IOException {
ASCII_CharStream@= staticFlag@public static final boolean staticFlag =
ASCII_CharStream@= tokenBegin@int tokenBegin;

/home/rimassa/DEVEL/JADE/src/jade/lang/acl/ParseException.java
ParseException@+ ParseException@public ParseException(String message) {
ParseException@+ ParseException@public ParseException() {
ParseException@+ ParseException@public ParseException(Token currentTokenVal, int[][] expectedTokenSequencesVal, String[] tokenImageVal ) {
ParseException@- add_escapes@protected String add_escapes(String str) {
ParseException@= currentToken@public Token currentToken;
ParseException@= eol@protected String eol =
ParseException@= expectedTokenSequences@public int[][] expectedTokenSequences;
ParseException@- getMessage@public String getMessage() {
ParseException@= specialConstructor@protected boolean specialConstructor;
ParseException@= tokenImage@public String[] tokenImage;

/home/rimassa/DEVEL/JADE/src/jade/lang/acl/Token.java
Token@= image@public String image;
Token@= kind@public int kind;
Token@- newToken@public static final Token newToken(int ofKind) {
Token@= next@public Token next;
Token@= specialToken@public Token specialToken;
Token@- toString@public final String toString() {

/home/rimassa/DEVEL/JADE/src/jade/lang/acl/TokenMgrError.java
TokenMgrError@= INVALID_LEXICAL_STATE@static final int INVALID_LEXICAL_STATE =
TokenMgrError@= LEXICAL_ERROR@static final int LEXICAL_ERROR =
TokenMgrError@= LOOP_DETECTED@static final int LOOP_DETECTED =
TokenMgrError@- LexicalError@private static final String LexicalError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar) {
TokenMgrError@= STATIC_LEXER_ERROR@static final int STATIC_LEXER_ERROR =
TokenMgrError@+ TokenMgrError@public TokenMgrError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar, int reason) {
TokenMgrError@+ TokenMgrError@public TokenMgrError(String message, int reason) {
TokenMgrError@+ TokenMgrError@public TokenMgrError() {
TokenMgrError@- addEscapes@protected static final String addEscapes(String str) {
TokenMgrError@= errorCode@int errorCode;
TokenMgrError@- getMessage@public String getMessage() {

/home/rimassa/DEVEL/JADE/src/jade/Boot.java
Boot@+ Boot@private Boot() {
Boot@= SEPARATOR@private static final String SEPARATOR =
Boot@- main@public static void main(String args[]) {
Boot@- usage@private static void usage(){

/home/rimassa/DEVEL/JADE/src/jade/lang/acl/MessageTemplate.java
MessageTemplate@- MatchAll@public static MessageTemplate MatchAll() {
MessageTemplate@- MatchContent@public static MessageTemplate MatchContent(String value) {
MessageTemplate@- MatchConversationId@public static MessageTemplate MatchConversationId(String value) {
MessageTemplate@- MatchDest@public static MessageTemplate MatchDest(String value) {
MessageTemplate@- MatchEnvelope@public static MessageTemplate MatchEnvelope(String value) {
MessageTemplate@- MatchLanguage@public static MessageTemplate MatchLanguage(String value) {
MessageTemplate@- MatchOntology@public static MessageTemplate MatchOntology(String value) {
MessageTemplate@- MatchProtocol@public static MessageTemplate MatchProtocol(String value) {
MessageTemplate@- MatchReplyBy@public static MessageTemplate MatchReplyBy(String value) {
MessageTemplate@- MatchReplyTo@public static MessageTemplate MatchReplyTo(String value) {
MessageTemplate@- MatchReplyWith@public static MessageTemplate MatchReplyWith(String value) {
MessageTemplate@- MatchSource@public static MessageTemplate MatchSource(String value) {
MessageTemplate@- MatchType@public static MessageTemplate MatchType(String value) {
MessageTemplate@+ MessageTemplate@private MessageTemplate(ACLMessage msg) {
MessageTemplate@+ MessageTemplate@private MessageTemplate() {
MessageTemplate@- allWildCard@private static ACLMessage allWildCard() {
MessageTemplate@- and@public static MessageTemplate and(MessageTemplate op1, MessageTemplate op2) throws IllegalArgumentException {
MessageTemplate@- dump@public void dump() {
MessageTemplate@= fieldNames@private static final String[] fieldNames =
MessageTemplate@- match@public boolean match(ACLMessage msg) {
MessageTemplate@- or@public static MessageTemplate or(MessageTemplate op1, MessageTemplate op2) {
MessageTemplate@= template@private ACLMessage template;
MessageTemplate@= wildCard@private static final String wildCard =

/home/rimassa/DEVEL/JADE/src/jade/proto/Protocol.java
Protocol@+ Protocol@public Protocol(CommunicativeAction start) {
Protocol@= START_NAME@private static final String START_NAME =
Protocol@- addCA@public void addCA(CommunicativeAction ca, String name) {
Protocol@- getCA@public CommunicativeAction getCA(String name) {
Protocol@- getStart@public CommunicativeAction getStart() {
Protocol@= initiatorRole@static final int initiatorRole =
Protocol@= myElements@protected Hashtable myElements;
Protocol@= responderRole@static final int responderRole =
Protocol@= startingPoint@protected CommunicativeAction startingPoint;

/home/rimassa/DEVEL/JADE/src/jade/core/AgentGroup.java
AgentGroup@- addMember@public void addMember(String name) {
AgentGroup@- getNextMember@public String getNextMember() {
AgentGroup@- hasMoreMembers@public boolean hasMoreMembers() {
AgentGroup@= iterator@private Enumeration iterator =
AgentGroup@= memberNames@private Vector memberNames =
AgentGroup@- removeMember@public void removeMember(String name) {
AgentGroup@- resetCursor@public void resetCursor() {

/home/rimassa/DEVEL/JADE/src/jade/core/NonDeterministicBehaviour.java
NonDeterministicBehaviour@+ NonDeterministicBehaviour@protected NonDeterministicBehaviour(Agent a, int endCondition) {
NonDeterministicBehaviour@+ NonDeterministicBehaviour@protected NonDeterministicBehaviour(int endCondition) {
NonDeterministicBehaviour@= WHEN_ALL@private static final int WHEN_ALL =
NonDeterministicBehaviour@= WHEN_ANY@private static final int WHEN_ANY =
NonDeterministicBehaviour@- action@protected boolean action() {
NonDeterministicBehaviour@- createWhenAll@public static NonDeterministicBehaviour createWhenAll(Agent a) {
NonDeterministicBehaviour@- createWhenAll@public static NonDeterministicBehaviour createWhenAll() {
NonDeterministicBehaviour@- createWhenAny@public static NonDeterministicBehaviour createWhenAny(Agent a) {
NonDeterministicBehaviour@- createWhenAny@public static NonDeterministicBehaviour createWhenAny() {
NonDeterministicBehaviour@- createWhenN@public static NonDeterministicBehaviour createWhenN(Agent a, int howMany) {
NonDeterministicBehaviour@- createWhenN@public static NonDeterministicBehaviour createWhenN(int howMany) {
NonDeterministicBehaviour@- evalCondition@private boolean evalCondition() {
NonDeterministicBehaviour@= terminatedSubBehaviours@private int terminatedSubBehaviours =
NonDeterministicBehaviour@= whenToStop@private int whenToStop;

/home/rimassa/DEVEL/JADE/src/jade/core/SequentialBehaviour.java
SequentialBehaviour@+ SequentialBehaviour@public SequentialBehaviour(Agent a) {
SequentialBehaviour@+ SequentialBehaviour@public SequentialBehaviour() {
SequentialBehaviour@- action@protected boolean action() {

/home/rimassa/DEVEL/JADE/src/jade/proto/CommunicativeAction.java
CommunicativeAction@+ CommunicativeAction@public CommunicativeAction(ACLMessage msg, Protocol p) {
CommunicativeAction@- addAnswer@public void addAnswer(CommunicativeAction ca) {
CommunicativeAction@= allowedAnswers@private Vector allowedAnswers =
CommunicativeAction@- getAnswers@public Enumeration getAnswers() {
CommunicativeAction@- getMessage@public ACLMessage getMessage() {
CommunicativeAction@- getRole@public int getRole() {
CommunicativeAction@- makeInitiator@public void makeInitiator() {
CommunicativeAction@- makeResponder@public void makeResponder() {
CommunicativeAction@= myMessage@private ACLMessage myMessage;
CommunicativeAction@= myName@private String myName;
CommunicativeAction@= myProtocol@private Protocol myProtocol;
CommunicativeAction@= myRole@private int myRole;
CommunicativeAction@- setName@void setName(String name) {

/home/rimassa/DEVEL/JADE/src/jade/proto/Standard.java
Standard@+ Standard@private Standard() {
Standard@- getProtocol@public static Protocol getProtocol(String name) {
Standard@- initProtocols@private static void initProtocols() {
Standard@= mutex@private static Object mutex =
Standard@= stdProtocols@private static Hashtable stdProtocols =

/home/rimassa/DEVEL/JADE/src/jade/proto/MessageHandler.java
MessageHandler@= handle@public void handle(ACLMessage msg, Interaction i);

/home/rimassa/DEVEL/JADE/src/jade/proto/MessageSelector.java
MessageSelector@= select@public void select(MessageGroup answers, Interaction i);

/home/rimassa/DEVEL/JADE/src/jade/proto/Interaction.java
Interaction@+ Interaction@private Interaction(Protocol p, int role) {
Interaction@- addPeer@public void addPeer(String name) {
Interaction@- attachHandler@public void attachHandler(String CA, MessageHandler handler) {
Interaction@- attachSelector@public void attachSelector(String CA, MessageSelector selector) {
Interaction@= conversationId@String conversationId;
Interaction@- createInitiator@public static Interaction createInitiator(Protocol p, AgentGroup peers, String convId) {
Interaction@- createResponder@public static Interaction createResponder(Protocol p) {
Interaction@= currentState@private Hashtable currentState =
Interaction@= handlers@private Hashtable handlers =
Interaction@- isInitiator@public boolean isInitiator() {
Interaction@= myPeers@AgentGroup myPeers;
Interaction@= myProtocol@Protocol myProtocol;
Interaction@= myRole@int myRole;
Interaction@- removePeer@public void removePeer(String name) {
Interaction@= selectors@private Hashtable selectors =

/home/rimassa/DEVEL/JADE/src/jade/proto/ProtocolDrivenBehaviour.java
ProtocolDrivenBehaviour@+ ProtocolDrivenBehaviour@public ProtocolDrivenBehaviour(Agent a, Interaction i) {
ProtocolDrivenBehaviour@= currentBehaviours@private NonDeterministicBehaviour currentBehaviours;
ProtocolDrivenBehaviour@- done@public boolean done() {
ProtocolDrivenBehaviour@- execute@public void execute() {
ProtocolDrivenBehaviour@= finished@private boolean finished =
ProtocolDrivenBehaviour@= myAgent@private Agent myAgent;
ProtocolDrivenBehaviour@= myInteraction@private Interaction myInteraction;
ProtocolDrivenBehaviour@= starting@private boolean starting =
ProtocolDrivenBehaviour@- startupAsInitiator@private void startupAsInitiator() {
ProtocolDrivenBehaviour@- startupAsResponder@private void startupAsResponder() {

/home/rimassa/DEVEL/JADE/src/examples/ex1/Agent1.java
Agent1@- Behaviour1@public Behaviour1(String ID) {
Agent1@= counter@private int counter;
Agent1@- done@public boolean done() {
Agent1@- execute@public void execute() {
Agent1@= myID@private String myID;
Agent1@- setup@protected void setup() {

/home/rimassa/DEVEL/JADE/src/examples/ex1/Agent2.java
Agent2@- Behaviour2@public Behaviour2(Agent a) {
Agent2@- action@protected void action() {
Agent2@- setup@protected void setup() {

/home/rimassa/DEVEL/JADE/src/examples/ex1/Agent3.java
Agent3@- Behaviour3Step@public Behaviour3Step(Agent a, String code) {
Agent3@- action@public void action() {
Agent3@= myCode@private String myCode;
Agent3@- setup@protected void setup() {

/home/rimassa/DEVEL/JADE/src/examples/ex1/Agent4.java
Agent4@- Behaviour4Step@public Behaviour4Step(Agent a, String code, int i) {
Agent4@- done@public boolean done() {
Agent4@- execute@public void execute() {
Agent4@= executionTimes@private int executionTimes;
Agent4@= finished@private boolean finished =
Agent4@= myAgent@private Agent myAgent;
Agent4@= myCode@private String myCode;
Agent4@- setup@protected void setup() {

/home/rimassa/DEVEL/JADE/src/examples/ex2/AgentBroadcaster.java
AgentBroadcaster@- BehaviourElement@public BehaviourElement(AgentBroadcaster a, String source, String dest, String content) {
AgentBroadcaster@- appendMessage@public synchronized void appendMessage(ACLMessage msg) {
AgentBroadcaster@- done@public boolean done() {
AgentBroadcaster@- dumpMessage@public void dumpMessage() {
AgentBroadcaster@- execute@public void execute() {
AgentBroadcaster@= messages@private Vector messages =
AgentBroadcaster@= msgSent@private boolean msgSent =
AgentBroadcaster@= myAgent@private AgentBroadcaster myAgent;
AgentBroadcaster@= myMessage@private ACLMessage myMessage;
AgentBroadcaster@= replyReceived@private boolean replyReceived =
AgentBroadcaster@- setup@protected void setup() {

/home/rimassa/DEVEL/JADE/src/examples/ex2/AgentReceiver.java
AgentReceiver@- setup@protected void setup() {

/home/rimassa/DEVEL/JADE/src/examples/ex2/AgentSender.java
AgentSender@- setup@protected void setup() {

/home/rimassa/DEVEL/JADE/src/examples/ex3/AgentMessageFilter.java
AgentMessageFilter@- setup@protected void setup() {

/home/rimassa/DEVEL/JADE/src/examples/ex3/AgentThread.java
AgentThread@- setup@protected void setup() {

/home/rimassa/DEVEL/JADE/src/examples/ex4/AgentRequester.java
AgentRequester@- ReceiveBehaviour@protected ReceiveBehaviour(AgentRequester a) {
Receiver@+ Receiver@private Receiver() {
AgentRequester@- agreed@public boolean agreed() {
AgentRequester@= convCounter@private int convCounter =
AgentRequester@= convID@private String convID;
AgentRequester@- done@public boolean done() {
AgentRequester@- dumpMessage@public void dumpMessage(ACLMessage msg) {
AgentRequester@> execute@public abstract void execute();
AgentRequester@= finished@protected boolean finished =
AgentRequester@- getConvID@public String getConvID() {
AgentRequester@- getPeer@public String getPeer() {
AgentRequester@- handleFailure@public void handleFailure(ACLMessage msg) {
AgentRequester@- handleInform@public void handleInform(ACLMessage msg) {
AgentRequester@= howManyRequests@private int howManyRequests;
AgentRequester@= myAgent@protected AgentRequester myAgent;
AgentRequester@= myPeer@private String myPeer;
AgentRequester@- newConvID@private String newConvID() {
Receiver@- receive@public static final ACLMessage receive(AgentRequester a,String messageType) {
AgentRequester@- receiveAgree@public void receiveAgree(ACLMessage msg) {
AgentRequester@= receivedAgree@private boolean receivedAgree =
AgentRequester@- sendRequest@public void sendRequest() {
AgentRequester@- setup@protected void setup() {

/home/rimassa/DEVEL/JADE/src/examples/ex4/AgentResponder.java
AgentResponder@- MultipleBehaviour@public MultipleBehaviour(AgentResponder a) {
AgentResponder@- ResponderBehaviour@public ResponderBehaviour(AgentResponder a, ACLMessage msg) {
AgentResponder@- SendBehaviour@public SendBehaviour(AgentResponder a, ACLMessage msg) {
AgentResponder@- action@public void action() {
AgentResponder@- done@public boolean done() {
AgentResponder@- done@public boolean done() {
AgentResponder@- execute@public void execute() {
AgentResponder@- execute@public void execute() {
AgentResponder@= finished@private boolean finished =
AgentResponder@= message@private ACLMessage message;
AgentResponder@= myAgent@private AgentResponder myAgent;
AgentResponder@= myAgent@private AgentResponder myAgent;
AgentResponder@= myConvId@private String myConvId;
AgentResponder@= myPeer@private String myPeer;
AgentResponder@= pattern@MessageTemplate pattern;
AgentResponder@- setup@protected void setup() {

/home/rimassa/DEVEL/JADE/src/examples/amsTester.java
amsTester@- ReceiveBehaviour@protected ReceiveBehaviour(amsTester a) {
Receiver@+ Receiver@private Receiver() {
amsTester@- agreed@public boolean agreed() {
amsTester@= convCounter@private int convCounter =
amsTester@= convID@private String convID;
amsTester@- done@public boolean done() {
amsTester@- dumpMessage@public void dumpMessage(ACLMessage msg) {
amsTester@> execute@public abstract void execute();
amsTester@= finished@protected boolean finished =
amsTester@- getAction@public String getAction() {
amsTester@- getConvID@public String getConvID() {
amsTester@- handleFailure@public void handleFailure(ACLMessage msg) {
amsTester@- handleInform@public void handleInform(ACLMessage msg) {
amsTester@= myAction@private String myAction;
amsTester@= myAgent@protected amsTester myAgent;
amsTester@- newConvID@private String newConvID() {
Receiver@- receive@public static final ACLMessage receive(amsTester a,String messageType) {
amsTester@- receiveAgree@public void receiveAgree(ACLMessage msg) {
amsTester@= receivedAgree@private boolean receivedAgree =
amsTester@- sendRequest@public void sendRequest() {
amsTester@- setup@protected void setup() {

/home/rimassa/DEVEL/JADE/src/jade/domain/ACCUnavailableException.java
ACCUnavailableException@+ ACCUnavailableException@public ACCUnavailableException() {

/home/rimassa/DEVEL/JADE/src/jade/domain/AMSOverloadedException.java
AMSOverloadedException@+ AMSOverloadedException@public AMSOverloadedException() {

/home/rimassa/DEVEL/JADE/src/jade/domain/AgentAlreadyRegisteredException.java
AgentAlreadyRegisteredException@+ AgentAlreadyRegisteredException@public AgentAlreadyRegisteredException() {

/home/rimassa/DEVEL/JADE/src/jade/domain/AgentNotRegisteredException.java
AgentNotRegisteredException@+ AgentNotRegisteredException@public AgentNotRegisteredException() {

/home/rimassa/DEVEL/JADE/src/jade/domain/FIPAException.java
FIPAException@+ FIPAException@public FIPAException(String msg) {

/home/rimassa/DEVEL/JADE/src/jade/domain/UnableToDeregisterException.java
UnableToDeregisterException@+ UnableToDeregisterException@public UnableToDeregisterException() {

/home/rimassa/DEVEL/JADE/src/jade/domain/UnrecognizedAttributeException.java
UnrecognizedAttributeException@+ UnrecognizedAttributeException@public UnrecognizedAttributeException() {

/home/rimassa/DEVEL/JADE/src/jade/domain/UnrecognizedAttributeValueException.java
UnrecognizedAttributeValueException@+ UnrecognizedAttributeValueException@public UnrecognizedAttributeValueException() {

/home/rimassa/DEVEL/JADE/src/jade/domain/acc.java
acc@- done@public boolean done() {
acc@- execute@public void execute() {
acc@- setup@protected void setup() {

/home/rimassa/DEVEL/JADE/src/jade/domain/AgentManagementOntology.java
AgentManagementOntology@- AMSActions@public static class AMSActions {
AgentManagementOntology@- AMSAgentDescription@public static class AMSAgentDescription {
AgentManagementOntology@= AMSMandatoryAttributes@private static final boolean AMSMandatoryAttributes[][] =
AgentManagementOntology@- APLifeCycle@public static class APLifeCycle {
AgentManagementOntology@+ AgentManagementOntology@private AgentManagementOntology() {
AgentManagementOntology@- DFActions@public static class DFActions {
AgentManagementOntology@- DFAgentDescription@public static class DFAgentDescription {
AgentManagementOntology@= DFMandatoryAttributes@private static final boolean DFMandatoryAttributes[][] =
AgentManagementOntology@- DomainLifeCycle@public static class DomainLifeCycle {
AgentManagementOntology@- Exception@public static class Exception {
AgentManagementOntology@- PlatformProfile@public static class PlatformProfile {
AgentManagementOntology@- ServiceDescription@public static class ServiceDescription {
AgentManagementOntology@- ServiceTypes@public static class ServiceTypes {
AgentManagementOntology@- getAPStateByCode@public String getAPStateByCode(int code) throws FIPAException {
AgentManagementOntology@- getAPStateByName@public int getAPStateByName(String name) throws FIPAException {
AgentManagementOntology@- getDomainStateByName@public int getDomainStateByName(String name) throws FIPAException {
AgentManagementOntology@- getDomainStatebyCode@public String getDomainStatebyCode(int code) throws FIPAException {
AgentManagementOntology@- getException@public FIPAException getException(String message) {
AgentManagementOntology@- instance@public static final AgentManagementOntology instance() {
AgentManagementOntology@- isMandatoryForAMS@public boolean isMandatoryForAMS(String actionName, String attributeName) {
AgentManagementOntology@- isMandatoryForDF@public boolean isMandatoryForDF(String actionName, String attributeName) {
AgentManagementOntology@- isValidAMSADKeyword@public boolean isValidAMSADKeyword(String keyword) {
AgentManagementOntology@- isValidDFADKeyword@public boolean isValidDFADKeyword(String keyword) {
AgentManagementOntology@- isValidException@public boolean isValidException(String message) {
AgentManagementOntology@- isValidPPKeyword@public boolean isValidPPKeyword(String keyword) {
AgentManagementOntology@- isValidSDKeyword@public boolean isValidSDKeyword(String keyword) {
AgentManagementOntology@= lock@private static Object lock =
AgentManagementOntology@= singleton@private static AgentManagementOntology singleton =

/home/rimassa/DEVEL/JADE/src/jade/lang/acl/ACLParserConstants.java
ACLParserConstants@= CONTENT@int CONTENT =
ACLParserConstants@= CONTENTSTATE@int CONTENTSTATE =
ACLParserConstants@= CONVERSATION_ID@int CONVERSATION_ID =
ACLParserConstants@= DATETIME@int DATETIME =
ACLParserConstants@= DEFAULT@int DEFAULT =
ACLParserConstants@= DIGIT@int DIGIT =
ACLParserConstants@= END@int END =
ACLParserConstants@= ENVELOPE@int ENVELOPE =
ACLParserConstants@= EOF@int EOF =
ACLParserConstants@= FLOATONE@int FLOATONE =
ACLParserConstants@= FLOATTWO@int FLOATTWO =
ACLParserConstants@= INTEGER@int INTEGER =
ACLParserConstants@= IN_REPLY_TO@int IN_REPLY_TO =
ACLParserConstants@= LANGUAGE@int LANGUAGE =
ACLParserConstants@= LBRACE@int LBRACE =
ACLParserConstants@= MESSAGEPARAMETERSTATE@int MESSAGEPARAMETERSTATE =
ACLParserConstants@= MESSAGETYPE@int MESSAGETYPE =
ACLParserConstants@= MESSAGETYPESTATE@int MESSAGETYPESTATE =
ACLParserConstants@= ONTOLOGY@int ONTOLOGY =
ACLParserConstants@= PREFIXBYTELENGTHENCODEDSTRING@int PREFIXBYTELENGTHENCODEDSTRING =
ACLParserConstants@= PROTOCOL@int PROTOCOL =
ACLParserConstants@= RBRACE@int RBRACE =
ACLParserConstants@= RECEIVER@int RECEIVER =
ACLParserConstants@= REPLY_BY@int REPLY_BY =
ACLParserConstants@= REPLY_WITH@int REPLY_WITH =
ACLParserConstants@= SENDER@int SENDER =
ACLParserConstants@= START@int START =
ACLParserConstants@= STRINGLITERAL@int STRINGLITERAL =
ACLParserConstants@= WORD@int WORD =
ACLParserConstants@= tokenImage@String[] tokenImage =

/home/rimassa/DEVEL/JADE/src/examples/ex5/amsTester.java
amsTester@= APState@private String APState =
amsTester@- ReceiveBehaviour@protected ReceiveBehaviour(amsTester a) {
Receiver@+ Receiver@private Receiver() {
amsTester@= address@private String address =
amsTester@= agentName@private String agentName =
amsTester@- agreed@public boolean agreed() {
amsTester@= convCounter@private int convCounter =
amsTester@= convID@private String convID;
amsTester@= delegateAgent@private String delegateAgent =
amsTester@- done@public boolean done() {
amsTester@- dumpMessage@public void dumpMessage(ACLMessage msg) {
amsTester@> execute@public abstract void execute();
amsTester@= finished@protected boolean finished =
amsTester@= forwardAddress@private String forwardAddress =
amsTester@- getAction@public String getAction() {
amsTester@- getConvID@public String getConvID() {
amsTester@- handleFailure@public void handleFailure(ACLMessage msg) {
amsTester@- handleInform@public void handleInform(ACLMessage msg) {
amsTester@= myAction@private String myAction;
amsTester@= myAgent@protected amsTester myAgent;
amsTester@- newConvID@private String newConvID() {
Receiver@- receive@public static final ACLMessage receive(amsTester a, String messageType) {
amsTester@- receiveAgree@public void receiveAgree(ACLMessage msg) {
amsTester@= receivedAgree@private boolean receivedAgree =
amsTester@- sendRequest@public void sendRequest() {
amsTester@- setup@protected void setup() {
amsTester@= signature@private String signature =

/home/rimassa/DEVEL/JADE/src/jade/domain/DFOverloadedException.java
DFOverloadedException@+ DFOverloadedException@public DFOverloadedException() {

/home/rimassa/DEVEL/JADE/src/jade/domain/InconsistencyException.java
InconsistencyException@+ InconsistencyException@public InconsistencyException() {

/home/rimassa/DEVEL/JADE/src/jade/domain/NoCommunicationMeansException.java
NoCommunicationMeansException@+ NoCommunicationMeansException@public NoCommunicationMeansException() {

/home/rimassa/DEVEL/JADE/src/jade/domain/UnauthorisedException.java
UnauthorisedException@+ UnauthorisedException@public UnauthorisedException() {

/home/rimassa/DEVEL/JADE/src/jade/domain/UnwillingToPerformException.java
UnwillingToPerformException@+ UnwillingToPerformException@public UnwillingToPerformException() {

/home/rimassa/DEVEL/JADE/src/examples/ex5/dfTester.java
dfTester@= DFState@private String DFState =
dfTester@- ReceiveBehaviour@protected ReceiveBehaviour(dfTester a) {
Receiver@+ Receiver@private Receiver() {
dfTester@= address@private String address =
dfTester@- agreed@public boolean agreed() {
dfTester@= convCounter@private int convCounter =
dfTester@= convID@private String convID;
dfTester@- done@public boolean done() {
dfTester@- dumpMessage@public void dumpMessage(ACLMessage msg) {
dfTester@> execute@public abstract void execute();
dfTester@= finished@protected boolean finished =
dfTester@- getAction@public String getAction() {
dfTester@- getConvID@public String getConvID() {
dfTester@- handleFailure@public void handleFailure(ACLMessage msg) {
dfTester@- handleInform@public void handleInform(ACLMessage msg) {
dfTester@= interactionProtocols@private String interactionProtocols =
dfTester@= myAction@private String myAction;
dfTester@= myAgent@protected dfTester myAgent;
dfTester@= name@private String name =
dfTester@- newConvID@private String newConvID() {
dfTester@= ontology@private String ontology =
dfTester@= ownership@private String ownership =
Receiver@- receive@public static final ACLMessage receive(dfTester a, String messageType) {
dfTester@- receiveAgree@public void receiveAgree(ACLMessage msg) {
dfTester@= receivedAgree@private boolean receivedAgree =
dfTester@- sendRequest@public void sendRequest() {
dfTester@= services@private String services =
dfTester@- setup@protected void setup() {
dfTester@= type@private String type =

/home/rimassa/DEVEL/JADE/src/jade/domain/BehaviourPrototype.java
BehaviourPrototype@= instance@public Behaviour instance(ACLMessage msg, StringTokenizer st);

/home/rimassa/DEVEL/JADE/src/jade/domain/DFAgentDescriptor.java
DFAgentDescriptor@= DFState@private String DFState;
DFAgentDescriptor@= address@private String address;
DFAgentDescriptor@- dump@public void dump() {
DFAgentDescriptor@- getAddress@public String getAddress() {
DFAgentDescriptor@- getAgentServices@public ServiceDescriptor getAgentServices() {
DFAgentDescriptor@- getDFState@String getDFState() {
DFAgentDescriptor@- getInteractionProtocols@public String getInteractionProtocols() {
DFAgentDescriptor@- getName@public String getName() {
DFAgentDescriptor@- getOntology@public String getOntology() {
DFAgentDescriptor@- getOwnership@public String getOwnership() {
DFAgentDescriptor@- getType@public String getType() {
DFAgentDescriptor@= interactionProtocols@private String interactionProtocols;
DFAgentDescriptor@= name@private String name;
DFAgentDescriptor@= ontology@private String ontology;
DFAgentDescriptor@= ownership@private String ownership;
DFAgentDescriptor@= services@private ServiceDescriptor services;
DFAgentDescriptor@- setAddress@public void setAddress(String a) {
DFAgentDescriptor@- setDFState@public void setDFState(String dfs) {
DFAgentDescriptor@- setInteractionProtocols@public void setInteractionProtocols(String ip) {
DFAgentDescriptor@- setName@public void setName(String n) {
DFAgentDescriptor@- setOntology@public void setOntology(String o) {
DFAgentDescriptor@- setOwnership@public void setOwnership(String o) {
DFAgentDescriptor@- setServices@public void setServices(ServiceDescriptor sd) {
DFAgentDescriptor@- setType@public void setType(String t) {
DFAgentDescriptor@= type@private String type;

/home/rimassa/DEVEL/JADE/src/jade/domain/FipaRequestServerBehaviour.java
FipaRequestServerBehaviour@+ FipaRequestServerBehaviour@public FipaRequestServerBehaviour(Agent a) {
FipaRequestServerBehaviour@= actions@private Hashtable actions;
FipaRequestServerBehaviour@- done@public boolean done() {
FipaRequestServerBehaviour@- execute@public void execute() {
FipaRequestServerBehaviour@= myAgent@private Agent myAgent;
FipaRequestServerBehaviour@- registerPrototype@public void registerPrototype(String actionName, BehaviourPrototype bp) {
FipaRequestServerBehaviour@= requestTemplate@private MessageTemplate requestTemplate;
FipaRequestServerBehaviour@- sendNotUnderstood@private void sendNotUnderstood(ACLMessage msg) {
FipaRequestServerBehaviour@- unregisterPrototype@public void unregisterPrototype(String actionName) {

/home/rimassa/DEVEL/JADE/src/jade/domain/ServiceDescriptor.java
ServiceDescriptor@= conditions@private String conditions;
ServiceDescriptor@= description@private String description;
ServiceDescriptor@- getConditions@public String getConditions() {
ServiceDescriptor@- getDescription@public String getDescription() {
ServiceDescriptor@- getOntology@public String getOntology() {
ServiceDescriptor@- getType@public String getType() {
ServiceDescriptor@= ontology@private String ontology;
ServiceDescriptor@- setConditions@public void setConditions(String c) {
ServiceDescriptor@- setDescription@public void setDescription(String d) {
ServiceDescriptor@- setOntology@public void setOntology(String o) {
ServiceDescriptor@- setType@public void setType(String t) {
ServiceDescriptor@= type@private String type;
