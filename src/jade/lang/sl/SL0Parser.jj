/*****************************************************************
JADE - Java Agent DEvelopment Framework is a framework to develop 
multi-agent systems in compliance with the FIPA specifications.
Copyright (C) 2000 CSELT S.p.A. 

GNU Lesser General Public License

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation, 
version 2.1 of the License. 

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the
Free Software Foundation, Inc., 59 Temple Place - Suite 330,
Boston, MA  02111-1307, USA.
*****************************************************************/

options {
//  LOOKAHEAD = 1;	      
//  CHOICE_AMBIGUITY_CHECK = 2;
//  OTHER_AMBIGUITY_CHECK = 1;
  STATIC = false;
//  DEBUG_PARSER = true;
//  DEBUG_LOOKAHEAD = true;
//  DEBUG_TOKEN_MANAGER = true;
  ERROR_REPORTING = true;
  JAVA_UNICODE_ESCAPE = true;
//  UNICODE_INPUT = false;
//  IGNORE_CASE = true;
//  USER_TOKEN_MANAGER = false;
//  USER_CHAR_STREAM = false;
//  BUILD_PARSER = true;
//  BUILD_TOKEN_MANAGER = true;
//  SANITY_CHECK = true;
//  FORCE_LA_CHECK = true;	// Force LookAhead Checking
}

PARSER_BEGIN(SL0Parser)

package jade.lang.sl;

import jade.onto.Frame;
import jade.onto.Ontology;
import jade.onto.DefaultOntology;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.StringReader;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;

import java.util.List;
import java.util.ArrayList;

class SL0Parser {


  /**
  * @return a List of Frame, each Frame represents an element of a t-uple
  */
  public List parse(String s) throws ParseException, TokenMgrError {
    ReInit(new StringReader(s));
    return SL0Content();
  }


  public static void main(String[] args) {
    System.out.println("SL0 Parser started...");
    SL0Parser theParser = new SL0Parser(new BufferedReader(new InputStreamReader(System.in)));
    SL0Codec codec = new SL0Codec();
    Ontology o = new DefaultOntology();

    while (true) {
	System.out.println("insert an SL0 expression to parse: ");
      try {
	List result = theParser.SL0Content();
	System.out.println("AFTER ENCODING: "+codec.encode(result,o));
      }
      catch(ParseException pe) {
	pe.printStackTrace();
	System.exit(1);
      }
      catch(TokenMgrError tme) {
        tme.printStackTrace();
      }
    }
  }

}

PARSER_END(SL0Parser)


/* 

   The following grammar productions try to match as closely as
   possible the SL0 grammar given in FIPA 2000 (document no. 8) 
   The differences are as follows:

   1) In order to keep single lookahead, braces have been factored out
      whenever possible. So, the parser methods corresponding to
      ActionExpression and to FunctionalTerm don't expect
      neither opening nor closing brace. Braces are explicitly
      indicated in the calling methods/productions.

   2) Identical productions have been merged into one; these are:
      - PropositionSymbol, "true" and "false", that all result in a single String.

   3) Due to the production merging of the previous point, the
      AtomicFormula production is no more needed. 
      The
      only difference with the original grammar is that here "result"
      is no more a reserved word.
*/



/*   P R O D U C T I O N    R U L E S  */

/**
* This production rule represents the more general expression that can
* serve as content for an ACL message. Since different communicative
* acts have different content (action expressions for
* <code>request</code>, predicate for <code>inform</code>, etc.), any
* allowed SL content expression can be parsed from here.
*/
List SL0Content() :
{ 
  Frame result;
  List tuple = new ArrayList();
}
{
 <LBRACE> (result = ContentExpression() {tuple.add(result);})+ <RBRACE>
 {return tuple;}
}

Frame ContentExpression() :
{ 
  Frame result;
  String s;
}
{
 ( s = String() {result = new Frame(s);} 
   | <LBRACE> ( result = ActionExpression() | result = Wff() ) <RBRACE> 
 )
 { return result; }
}


Frame Wff():
{
  Frame result;
  String s;
  Object obj;
}
{
 s = String() {result = new Frame(s);} 
  (obj = Term() {result.putSlot(obj);} )+
 { return result; }
}

Object Term():
{
 Object obj;
 Token  t;
 String s;
}
{
 ( obj = String() { 
	// if it is true or false, then converts the String into a Boolean
	          if (obj.toString().equalsIgnoreCase("true") ||  
	              obj.toString().equalsIgnoreCase("false") )  
	            obj = new Boolean(obj.toString());
                  }
 | obj = Number() 
 | t = <DATETIME> { try { obj=jade.lang.acl.ISO8601.toDate(t.image);}
                    catch (Exception e) { obj = new String(t.image); } }
 | <LBRACE> ( s=String() {obj = new Frame(s);}
              (FunctionalTermParams((Frame)obj))?
            | obj=ActionExpression()
            ) <RBRACE>
 )
  { return obj; }
}


Frame ActionExpression():
{
  Frame result;
  Object agentID;
  Object action;
}
{
  <ACTION> agentID = Term() action = Term()
  { result = new Frame(SL0Codec.NAME_OF_ACTION_FRAME);
    result.putSlot(SL0Codec.NAME_OF_ACTOR_SLOT, agentID); 
    result.putSlot(SL0Codec.NAME_OF_ACTION_SLOT, action);
    return result; }
}


void FunctionalTermParams(Frame result):
{
  Object obj;
}
{
    (obj=Term() {result.putSlot(obj);})+
  | (Parameter(result))+
}

/**
Notice that this production, as a side effect, also adds a slot to result.
The initial char ':' is removed from the slotName
**/
void Parameter(Frame result):
{
  Token name;
  Object value;
}
{
  name = <PARAMETERNAME> value = Term() 
  { result.putSlot(name.image.substring(1), value); }
}

/**
* <p> <code> String = WORD | STRING_LITERAL  </code>
*/
String String() :
{ Token t;}
{
  t=<WORD>		{return t.image;}
| t=<STRING_LITERAL>	{return t.image;}
}

Object Number():
{ 
  Token t;
}
{ 
  t = <INTEGER> { return new Long(t.image); }
| t = <HEXINTEGER> { return new String(t.image); } 
| t = <FLOATONE> { return new Double(t.image); }
| t = <FLOATTWO> { return new Double(t.image); }
}







/*   T O K E N    D E F I N I T I O N  */

<DEFAULT>
SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

<DEFAULT>
TOKEN:
{
  < LBRACE     : "("       > 
| < RBRACE     : ")"       >
| < ACTION     : "action"  >
| < INTEGER    : (["+","-"])? (["0"-"9"])+ >
| < HEXINTEGER : (["+","-"])? "0" ["x","X"] (["0"-"9" , "a"-"f" , "A"-"F"])+ >
| < FLOATONE :      (["+","-"])? ((["0"-"9"])+ "." (["0"-"9"])* | (["0"-"9"])* "." (["0"-"9"])+)
                    (["e","E"] (["-","+"])? (["0"-"9"])+)? >
| < FLOATTWO :      (["+","-"])? (["0"-"9"])+ ["e","E"] (["-","+"])? (["0"-"9"])+  >
| < WORD: (~["\u0000"-"\u001F"," ","(",")","\"","#","0"-"9",":","-","?"]) 
          (~["\u0000"-"\u001F"," ","(",")"])* >
| < STRING_LITERAL:
      "\""
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "\""
  >
| < PARAMETERNAME : ":"<WORD> | ":"<STRING_LITERAL> >
| < DATETIME :  (["0"-"9"]) (["0"-"9"]) (["0"-"9"]) (["0"-"9"])
                (["0"-"9"]) (["0"-"9"]) (["0"-"9"]) (["0"-"9"]) ["t","T"]
                (["0"-"9"]) (["0"-"9"]) (["0"-"9"]) (["0"-"9"])
                (["0"-"9"]) (["0"-"9"]) (["0"-"9"]) (["0"-"9"]) (["0"-"9"]) (["a"-"z","A"-"Z"])? > 
}	













