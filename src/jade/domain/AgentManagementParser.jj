/*
  $Log$
  Revision 1.7  1998/10/23 21:42:14  Giovanni
  Added grammar productions and actions to process ACL messages embedded
  in 'forward' ACC actions.

  Revision 1.6  1998/10/04 18:01:22  rimassa
  Added a 'Log:' field to every source file.

*/

// This file defines a class to parse 'fipa-agent-management' grammar
// productions into various objects, instances of classes defined in
// AgentManagementOntology utility class.


options {

  STATIC = false;

}


PARSER_BEGIN(AgentManagementParser)

package jade.domain;

import java.io.IOException;
import java.io.Reader;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.StringReader;
import java.io.OutputStreamWriter;
import java.io.BufferedWriter;

import jade.lang.acl.ACLMessage;
import jade.lang.acl.ACLParser;

class AgentManagementParser {

  private Reader myReader; // FIXME: Maybe it's unnecessary

  public static void main(String args[]) throws ParseException {
    AgentManagementParser parser = new AgentManagementParser(System.in);

    while (true) {
      try {
	AgentManagementOntology.Action result = parser.parseAction(new BufferedReader(new InputStreamReader(System.in)));
	result.toText(new BufferedWriter(new OutputStreamWriter(System.out)));
      }
      catch(ParseException pe) {
	pe.printStackTrace();
	System.exit(1);
      }
    }
  }

  public static AgentManagementParser create() {
    return new AgentManagementParser(new StringReader(""));
  }

  public AgentManagementOntology.Action parseAction(Reader r) throws ParseException {
    myReader = r;
    ReInit(r);
    return Action();
  }

  public AgentManagementOntology.AMSAction parseAMSAction(Reader r) throws ParseException {
    myReader = r;
    ReInit(r);
    return AMSAction();
  }

  public AgentManagementOntology.DFAction parseDFAction(Reader r) throws ParseException {
    myReader = r;
    ReInit(r);
    return DFAction();
  }

  public AgentManagementOntology.ACCAction parseACCAction(Reader r) throws ParseException {
    myReader = r;
    ReInit(r);
    return ACCAction();
  }

  public AgentManagementOntology.DFAgentDescriptor parseDFDescriptor(Reader r) throws ParseException {
    myReader = r;
    ReInit(r);
    return DF_description();
  }

  public AgentManagementOntology.AMSAgentDescriptor parseAMSDescriptor(Reader r) throws ParseException {
    myReader = r;
    ReInit(r);
    return AMS_Description();
  }

  public AgentManagementOntology.ServiceDescriptor parseServiceDescriptor(Reader r) throws ParseException {
    myReader = r;
    ReInit(r);
    return FIPA_Service_Desc();
  }

}

PARSER_END(AgentManagementParser)



// JavaCC grammar productions


AgentManagementOntology.Action Action() :
{
  AgentManagementOntology.Action a;
}
{
  "(" ( a = AMSActionBody() | a = DFActionBody() | a = ACCActionBody() ) ")"
  { return a; }
}

AgentManagementOntology.AMSAction AMSAction() :
{
  AgentManagementOntology.AMSAction a;
}
{
  "(" a = AMSActionBody() ")"
  { return a; }
}

AgentManagementOntology.DFAction DFAction() :
{
  AgentManagementOntology.DFAction a;
}
{
  "(" ( a = DFActionBody() | a = DFSearchBody() ) ")"
  { return a; }
}

AgentManagementOntology.ACCAction ACCAction() :
{
  AgentManagementOntology.ACCAction a;
}
{
  "(" a = ACCActionBody() ")"
  { return a; }
}

AgentManagementOntology.AMSAction AMSActionBody() :
{
  AgentManagementOntology.AMSAction a = new AgentManagementOntology.AMSAction();
  AgentManagementOntology.AMSAgentDescriptor amsd;
  Token t;
}
{
  ( t = <REGISTER_AGENT> | t = <DEREGISTER_AGENT> | t = <AUTHENTICATE> | t = <MODIFY_AGENT> )
  { 
    a.setName(t.image);
  }
  amsd = AMS_Description()
  { a.setArg(amsd); }

  { return a; }
}

AgentManagementOntology.DFAction DFActionBody() :
{
  AgentManagementOntology.DFAction a = new AgentManagementOntology.DFAction();
  AgentManagementOntology.DFAgentDescriptor dfd;
  Token t;
}
{
  ( t = <REGISTER> | t = <DEREGISTER> | t = <MODIFY> )
  { a.setName(t.image); }
  dfd = DF_description()
  {
    a.setArg(dfd);
    return a;
  }
}

AgentManagementOntology.DFSearchAction DFSearchBody() :
{
  AgentManagementOntology.DFSearchAction a = new AgentManagementOntology.DFSearchAction();
  AgentManagementOntology.DFAgentDescriptor dfd;
  Token t;
}
{
  t = <SEARCH> { a.setName(t.image); }
  dfd = DF_description() { a.setArg(dfd); }
  ( Constraint(a) )+
  { return a; }
}

AgentManagementOntology.ACCAction ACCActionBody() :
{
  AgentManagementOntology.ACCAction a = new AgentManagementOntology.ACCAction();
  ACLMessage msg = null;
  Token t;
  String s;
}
{
  t = <FORWARD> s = ACLMessage()
  {
    a.setName(t.image);

    ACLParser p = ACLParser.create();
    try {
      System.out.println("***");
      System.out.println(s);
      System.out.println("***");
      msg = p.parse(new StringReader(s));
    }
    catch(jade.lang.acl.ParseException jlape) {
      jlape.printStackTrace();
      throw new ParseException();
    }

    a.setArg(msg);
    return a;
  }
}

String ACLMessage() :
{
  String s;
}
{
  "("
  { token_source.SwitchTo(ACL_BODYSTATE); }
  s = ACLMessageBody()
  { token_source.SwitchTo(DEFAULT); }
  ")"
  {
    return "(" + s + ")";
  }
}

String ACLMessageBody() :
{
  String s = new String();
  String s2;
}
{
  {
    Token t;
  }
  (
    (
     (t = <STRING_LITERAL> | t = <BLE_STRING> | t = <REMAINDER>) { s = s + t.image; }
    )
    |
    (
     "(" s2 = ACLMessageBody() ")" { s = s + "(" + s2 + ")"; }
    )
  )*
  {
    return s;
  }
}

AgentManagementOntology.AMSAgentDescriptor AMS_Description() :
{
  AgentManagementOntology.AMSAgentDescriptor result = new AgentManagementOntology.AMSAgentDescriptor();
}
{
 "(" <AMS_DESCRIPTION> ( "(" FIPA_AMS_description(result) ")" )+ ")"
 {
   return result;
 }

}

void FIPA_AMS_description(AgentManagementOntology.AMSAgentDescriptor amsd) :
{
  String s;
  Token t;
}
{
  <AGENT_NAME> s = AgentName() 
  {
    if(amsd.getName() == null) amsd.setName(s);
    else throw new ParseException();
  }
| <ADDRESS> s = CommAddress()
  {
    if(amsd.getAddress() == null) amsd.setAddress(s);
    else throw new ParseException();
  }
| <SIGNATURE> t = <WORD>
  {
    if(amsd.getSignature() == null) amsd.setSignature(t.image);
    else throw new ParseException();
  }
| <AP_STATE> t = <APState> {
    try {
      amsd.setAPState(AgentManagementOntology.instance().getAPStateByName(t.image)); 
    }
    catch(FIPAException fe) {
      fe.printStackTrace();
      throw new ParseException();
    }
  }
| <DELEGATE_AGENT_NAME> s = AgentName()
  {
    if(amsd.getDelegateAgentName() == null) amsd.setDelegateAgentName(s);
    else throw new ParseException();
  }
| <FORWARD_ADDRESS> s = CommAddress()
  {
    if(amsd.getForwardAddress() == null) amsd.setForwardAddress(s);
    else throw new ParseException();
  }
| <OWNERSHIP> t = <WORD>
  {
    if(amsd.getOwnership() == null) amsd.setOwnership(t.image);
    else throw new ParseException();
  }
}

AgentManagementOntology.DFAgentDescriptor DF_description() :
{
  AgentManagementOntology.DFAgentDescriptor result = new AgentManagementOntology.DFAgentDescriptor();
}
{
 "(" <DF_DESCRIPTION> ( "(" FIPA_DF_description(result) ")" )+ ")"
 {
   return result;
 }

}

void FIPA_DF_description(AgentManagementOntology.DFAgentDescriptor dfd) :
{
  AgentManagementOntology.ServiceDescriptor sd;
  String s;
  Token t;
}
{
   <AGENT_NAME> s = AgentName()
   {
     if(dfd.getName() == null) dfd.setName(s);
     else throw new ParseException();
   }
 | <AGENT_ADDRESS> ( s = CommAddress() { dfd.addAddress(s); } )+ // FIXME: Error when multiple adrresses are present
 | <AGENT_SERVICES> ( sd = FIPA_Service_Desc() { dfd.addService(sd); })+
 | <AGENT_TYPE> t = <WORD>
   {
     if(dfd.getType() == null) dfd.setType(t.image);
     else throw new ParseException();
   }
 | <INTERACTION_PROTOCOLS> "(" ( t = <WORD> { dfd.addInteractionProtocol(t.image); } )+ ")"
 | <ONTOLOGY> s = SL1Term()
   {
     if(dfd.getOntology() == null) dfd.setOntology(s);
     else throw new ParseException();
   }
 | <OWNERSHIP> s = SL1Term()
   {
     if(dfd.getOwnership() == null) dfd.setOwnership(s);
     else throw new ParseException();
   }
 | <DF_STATE> t = <DfLifecycleState>
   {
     if(dfd.getDFState() == null) dfd.setDFState(t.image);
     else throw new ParseException();
   }
}

AgentManagementOntology.ServiceDescriptor FIPA_Service_Desc() :
{
  AgentManagementOntology.ServiceDescriptor result = new AgentManagementOntology.ServiceDescriptor();
}
{
  "(" <SERVICE_DESCRIPTION> ( "(" FIPA_Service_Desc_Item(result) ")" )+  ")"
  {
    return result;
  }
}

void FIPA_Service_Desc_Item(AgentManagementOntology.ServiceDescriptor sd) :
{
  String s;
  Token t;
}
{
  <SERVICE_NAME> (t = <ServiceTypes> | t = <WORD>)
  {
    if(sd.getName() == null) sd.setName(t.image);
    else throw new ParseException();
  }
| <SERVICE_TYPE> (t = <ServiceTypes> | t = <WORD>)
  {
    if(sd.getType() == null) sd.setType(t.image);
    else throw new ParseException();
  }
| <SERVICE_ONTOLOGY> s = SL1Term()
  { 
    if(sd.getOntology() == null) sd.setOntology(s);
    else throw new ParseException();
  }
| <FIXED_PROPERTIES> s = SL1Term()
  {
    if(sd.getFixedProps() == null) sd.setFixedProps(s);
    else throw new ParseException();
  }
| <NEGOTIABLE_PROPERTIES> s = SL1Term()
  {
    if(sd.getNegotiableProps() == null) sd.setNegotiableProps(s);
    else throw new ParseException();
  }
| <COMMUNICATION_PROPERTIES> s = SL1Term()
  {
    if(sd.getCommunicationProps() == null) sd.setCommunicationProps(s);
    else throw new ParseException();
  }

}

String AgentName() :
{
  Token t;
  String s;
}
{
  t = <WORD> "@" s = CommAddress() { return t.image + "@" + s; }
}

String CommAddress() :
{
  Token proto;
  String addr;
  Token port;
  String acc;
}
{
  { token_source.SwitchTo(COMM_PROTOCOLSTATE); }
  proto = <COMM_PROTOCOL> "://" (addr = IPAddress()|addr = DNSName()) ":" port = <INTEGER> "/" acc = ACCObj()
  {
    String s = proto.image + "://" + addr + ":" + port.image + "/" + acc;
    return s;
  }
}

String IPAddress() :
{
  Token t1;
  Token t2;
  Token t3;
  Token t4;
}
{
  t1 = <INTEGER> "." t2 = <INTEGER> "." t3 = <INTEGER> "." t4 = <INTEGER>
  {
    return t1.image + "." + t2.image + "." + t3.image + "." + t4.image;
  }
}

String DNSName() :
{
  Token t;
}
{
  t = <WORD>
  {
    return t.image;
  }
}

String ACCObj() :
{
  Token t;
}
{
  t = <WORD>
  {
    return t.image;
  }
}

void Constraint(AgentManagementOntology.DFSearchAction a) :
{
  AgentManagementOntology.Constraint c = new AgentManagementOntology.Constraint();
  Token t;
}
{
  "(" ( t = <DFDEPTH> | t = <RESPREQ> )
  { c.setName(t.image); }
  t = <ConstraintFn>
  { c.setFn(t.image); }
  t = <INTEGER>
  { c.setArg(Integer.parseInt(t.image)); } ")"
  { a.addConstraint(c); }
}


// FIXME: This should be an almighty SL1 term
// instead of an humble Word
String SL1Term() :
{
  Token t;
}
{
  t = <WORD>
  {
    return t.image;
  }
}


// JavaCC lexical productions

<DEFAULT>
SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

<DEFAULT>
TOKEN: 
{
  <DF_DESCRIPTION : ":df-description">
| <AMS_DESCRIPTION : ":ams-description">
| <REGISTER : "register"> 
| <DEREGISTER : "deregister">
| <MODIFY : "modify">
| <SEARCH : "search">
| <REGISTER_AGENT : "register-agent">
| <DEREGISTER_AGENT : "deregister-agent">
| <AUTHENTICATE : "authenticate">
| <MODIFY_AGENT : "modify-agent">
| <FORWARD : "forward">
| <AGENT_NAME : ":agent-name">
| <AGENT_ADDRESS : ":agent-address">
| <AGENT_SERVICES : ":agent-services">
| <AGENT_TYPE : ":agent-type">
| <INTERACTION_PROTOCOLS : ":interaction-protocols">
| <ONTOLOGY : ":ontology">
| <OWNERSHIP : ":ownership">
| <DF_STATE : ":df-state"> : DfLifeCycleState
| <ADDRESS : ":address">
| <SIGNATURE : ":signature">
| <AP_STATE : ":ap-state"> : APStateSTATE
| <DELEGATE_AGENT_NAME : ":delegate-agent-name">
| <FORWARD_ADDRESS : ":forward-address">
| <SERVICE_DESCRIPTION : ":service-description">
| <SERVICE_NAME : ":service-name">
| <SERVICE_TYPE : ":service-type">
| <SERVICE_ONTOLOGY : ":service-ontology"> 
| <FIXED_PROPERTIES : ":fixed-properties">
| <NEGOTIABLE_PROPERTIES : ":negotiable-properties">
| <COMMUNICATION_PROPERTIES : ":communication-properties">
| <ServiceTypes : "fipa-df" | "fipa-ams" | "fipa-acc" | "fipa-agent" >
| <ConstraintFn : "Max" | "Min" | "Exactly" >
| <DFDEPTH : ":df-depth">
| <RESPREQ : ":resp-req">
| <WORD : ["!", "\"", "$"-"'", "*", "+", ",", ".", ";"-"?", "A"-"~"] (["*"-".", "0"-"9", ";"-"?","A"-"~","!"-"'"])* >
| <INTEGER : ["0"-"9"](["0"-"9"])*>
}

<COMM_PROTOCOLSTATE>
SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

<COMM_PROTOCOLSTATE>
TOKEN:
{
  <COMM_PROTOCOL : ["A"-"Z", "a"-"z"](["A"-"Z", "a"-"z", "0"-"9", "_"])*> : DEFAULT
}

<APStateSTATE>
SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

<APStateSTATE>
TOKEN:
{
  <APState : "initiated" | "active" | "suspended" | "waiting"> : DEFAULT
}

<DfLifeCycleState>
SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

<DfLifeCycleState>
TOKEN:
{
  <DfLifecycleState : "active" | "suspended" | "retired"> : DEFAULT
}

<ACL_BODYSTATE>
TOKEN:
{
  <STRING_LITERAL: "\"" (~["\""] | "\\" (["n","t","b","r","f","\\","\'","\""] | ["0"-"7"] (["0"-"7"])? | ["0"-"3"] ["0"-"7"] ["0"-"7"]))* "\"">
| <BLE_STRING: "#" <INT> "\"" >
    {
      String tmp = matchedToken.image.substring(1, matchedToken.image.length() - 1);
      int numBytes = Integer.parseInt(tmp);
      if (numBytes < 0) 
	throw new TokenMgrError("ERROR: PrefixByteLengthEncodedString with length < 0", TokenMgrError.STATIC_LEXER_ERROR);
      char[] bytes = new char[numBytes];
      int i = 0; 
 	
      while (numBytes-- > 0) 
	try {
	  bytes[i++] = input_stream.readChar(); 
	}
        catch (IOException e) {
	  System.out.println("IOException during PREFIXBYTELENGTHENCODEDSTRING");
	  throw new TokenMgrError(true, curLexState, input_stream.getEndLine(), input_stream.getEndColumn(),input_stream.GetImage(), curChar, TokenMgrError.LEXICAL_ERROR);
	}
      // If you want, you can add bytes to matchedToken.image here.
      matchedToken.image = new String(bytes);
    }
| <REMAINDER: (~["(", "#", "\"", ")" ])* >
| <INT : ["0"-"9"](["0"-"9"])*>

}










