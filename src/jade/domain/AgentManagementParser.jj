/*****************************************************************
JADE - Java Agent DEvelopment Framework is a framework to develop multi-agent systems in compliance with the FIPA specifications.
Copyright (C) 2000 CSELT S.p.A. 

GNU Lesser General Public License

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation, 
version 2.1 of the License. 

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the
Free Software Foundation, Inc., 59 Temple Place - Suite 330,
Boston, MA  02111-1307, USA.
*****************************************************************/

// This file defines a class to parse 'fipa-agent-management' grammar
// productions into various objects, instances of classes defined in
// AgentManagementOntology utility class.


options {
  // DEBUG_PARSER = true;
  // DEBUG_TOKEN_MANAGER = true;
  IGNORE_CASE = true;
  STATIC = false;
}


PARSER_BEGIN(AgentManagementParser)

package jade.domain;

import java.io.IOException;
import java.io.Reader;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.StringReader;
import java.io.OutputStreamWriter;
import java.io.BufferedWriter;

import jade.lang.acl.ACLMessage;
import jade.lang.acl.ACLParser;

/**
Javadoc documentation for the file
@author Giovanni Rimassa - Universita` di Parma
@version $Date$ $Revision$
*/

class AgentManagementParser {

  public static void main(String args[]) throws ParseException {
    AgentManagementParser parser = new AgentManagementParser(System.in);

    while (true) {

      try {
	AgentManagementOntology.DFSearchResult result = parser.parseSearchResult(new BufferedReader(new InputStreamReader(System.in)));
	result.toText(new BufferedWriter(new OutputStreamWriter(System.out)));
      }
      catch(ParseException pe) {
	pe.printStackTrace();
	System.exit(1);
      }
      catch (FIPAException e) {
	e.printStackTrace();
     } 
    }
  }

  public static AgentManagementParser create() {
    return new AgentManagementParser(new StringReader(""));
  }

  public AgentManagementOntology.Action parseAction(Reader r) throws ParseException {
    ReInit(r);
    return Action();
  }

  public AgentManagementOntology.AMSAction parseAMSAction(Reader r) throws ParseException {
    ReInit(r);
    return AMSAction();
  }

  public AgentManagementOntology.AMSEvent parseAMSEvent(Reader r) throws ParseException {
    ReInit(r);
    return AMSEvent();
  }

  public AgentManagementOntology.DFAction parseDFAction(Reader r) throws ParseException {
    ReInit(r);
    return DFAction();
  }

  public AgentManagementOntology.ACCAction parseACCAction(Reader r) throws ParseException {
    ReInit(r);
    return ACCAction();
  }

  public AgentManagementOntology.DFAgentDescriptor parseDFDescriptor(Reader r) throws ParseException {
    ReInit(r);
    return DF_description();
  }

  public AgentManagementOntology.AMSAgentDescriptor parseAMSDescriptor(Reader r) throws ParseException {
    ReInit(r);
    return AMS_Description();
  }

  public AgentManagementOntology.ServiceDescriptor parseServiceDescriptor(Reader r) throws ParseException {
    ReInit(r);
    return FIPA_Service_Desc();
  }

  public AgentManagementOntology.PlatformProfile parsePlatformProfile(Reader r) throws ParseException {
    ReInit(r);
    return AP_Profile();
  }

  public AgentManagementOntology.DFSearchResult parseSearchResult(Reader r) throws ParseException {
    ReInit(r);
    return Search_Result();
  }

  public FIPAException parseFIPAException(Reader r) throws ParseException {
    ReInit(r);
    return FIPA_Exception();
  }


}

PARSER_END(AgentManagementParser)



// JavaCC grammar productions


AgentManagementOntology.Action Action() :
{
  AgentManagementOntology.Action a;
}
{
  "(" a=ActionWithoutParenthesis() ")"
  { return a; }
}

AgentManagementOntology.Action ActionWithoutParenthesis() :
{
  AgentManagementOntology.Action a;
}
{
  <ACTION> AgentName()
    "(" ( a = AMSActionBody() | a = DFActionBody() | a = DFSearchBody() | a = ACCActionBody() | a = SniffAgentOnBody() ) ")"
  { return a; }
}

AgentManagementOntology.AMSAction AMSAction() :
{
  AgentManagementOntology.AMSAction a;
}
{
  "(" <ACTION> AgentName()
    "(" ( a = SniffAgentOnBody() | a = SniffAgentOffBody() | a = AMSActionBody() | a = CreateAgentBody() |
	  a = KillAgentBody() | a = KillContainerBody() | a = QueryPlatformProfileBody() ) ")"
  ")"
  { return a; }
}

AgentManagementOntology.AMSEvent AMSEvent() :
{
  AgentManagementOntology.AMSEvent amse;
}
{
  "(" ( amse = ContainerEvent() | amse = AgentEvent() ) ")"
  { return amse; }
}

AgentManagementOntology.AMSEvent ContainerEvent() :
{
  AgentManagementOntology.AMSContainerEvent amse = new AgentManagementOntology.AMSContainerEvent();;
  Token kind;
  Token name;
}
{
  ( ( kind = "new-container" { amse.setKind(AgentManagementOntology.AMSAgentEvent.NEWCONTAINER); } )
  | ( kind = "dead-container" { amse.setKind(AgentManagementOntology.AMSAgentEvent.DEADCONTAINER); } )
  )
    name = <WORD>
  { 
    amse.setContainerName(name.image);
    return amse;
  }
}

AgentManagementOntology.AMSEvent AgentEvent() :
{
  AgentManagementOntology.AMSAgentEvent amse;
  Token kind;
  AgentManagementOntology.AMSAgentDescriptor amsd;
}
{
  ( ( kind = "new-agent" {
      amse = new AgentManagementOntology.AMSAgentEvent(); 
      amse.setKind(AgentManagementOntology.AMSAgentEvent.NEWAGENT);
     } )
  | ( kind = "dead-agent" {
      amse = new AgentManagementOntology.AMSAgentEvent();
      amse.setKind(AgentManagementOntology.AMSAgentEvent.DEADAGENT);
     } )
  | ( kind = "moved-agent" {
      amse = new AgentManagementOntology.AMSMotionEvent();
      amse.setKind(AgentManagementOntology.AMSAgentEvent.MOVEDAGENT);
     } )
  )
  "("
  ( ( Properties(amse) ")" "(" amsd = AMSDescriptionBody() )
  | ( amsd = AMSDescriptionBody() ")" "(" Properties(amse) )
  )
  ")"
  {
    amse.setAgentDescriptor(amsd);
    return amse;
  }
}


AgentManagementOntology.DFAction DFAction() :
{
  AgentManagementOntology.DFAction a;
}
{
  "(" <ACTION> AgentName()
    "(" ( a = DFActionBody() | a = DFSearchBody() ) ")"
  ")"
  { return a; }
}

AgentManagementOntology.ACCAction ACCAction() :
{
  AgentManagementOntology.ACCAction a;
}
{
  "(" <ACTION> AgentName()
    "(" a = ACCActionBody() ")"
  ")"
  { return a; }
}

AgentManagementOntology.AMSAction AMSActionBody() :
{
  AgentManagementOntology.AMSAction a = new AgentManagementOntology.AMSAction();
  AgentManagementOntology.AMSAgentDescriptor amsd;
  Token t;
}
{
  ( t = <REGISTER_AGENT> | t = <DEREGISTER_AGENT> | t = <AUTHENTICATE> | t = <MODIFY_AGENT> )
  { 
    a.setName(t.image);
  }
  amsd = AMS_Description()
  { a.setArg(amsd); }

  { return a; }
}

AgentManagementOntology.AMSAction QueryPlatformProfileBody() :
{
  Token t;
  AgentManagementOntology.AMSAction a = new AgentManagementOntology.QueryPlatformProfileAction();
}
{
  t = <QUERY_PLATFORM_PROFILE>
  {
    a.setName(t.image);
    return a;
  }
}

AgentManagementOntology.AMSAction SniffAgentOnBody() :
{
  AgentManagementOntology.SniffAgentOnAction saoa = new AgentManagementOntology.SniffAgentOnAction();
  Token t;
}
{
  ( t = <SNIFF_ON> )
  { 
    saoa.setName(t.image);
  }
  ( Sniff_Description(saoa) ) // Maybe a '+' is needed

  { return saoa; }
}

AgentManagementOntology.AMSAction SniffAgentOffBody() :
{
  AgentManagementOntology.SniffAgentOffAction saoa = new AgentManagementOntology.SniffAgentOffAction();
  Token t;
}
{
  ( t = <SNIFF_OFF> )
  { 
    saoa.setName(t.image);
  }
  ( Sniff_Description_Off(saoa) ) // Maybe a '+' is needed

  { return saoa; }
}


AgentManagementOntology.CreateAgentAction CreateAgentBody() :
{
  AgentManagementOntology.CreateAgentAction caa = new AgentManagementOntology.CreateAgentAction();
  Token t;
}
{
  t = <CREATE_AGENT>
  {
    caa.setName(t.image);
  }
  ( "(" CreateAgentArg(caa) ")" )+

  { return caa; }
}

void CreateAgentArg(AgentManagementOntology.CreateAgentAction caa) :
{
  Token t;
  AgentManagementOntology.AMSAgentDescriptor amsd;
}
{
   ( amsd = AMSDescriptionBody() { caa.setArg(amsd); } )
 | ( <AGENT_CODE> t = <WORD> { caa.setClassName(t.image); } )
 | Properties(caa)
}

void Properties(AgentManagementOntology.PropertyContainer pc) :
{
}
{
 ( <AGENT_PROPERTIES> ( "(" Property(pc) ")" )+ )
}

void Property(AgentManagementOntology.PropertyContainer pc) :
{
  Token name;
  Token value;
}
{
  name = <PROPERTY_NAME>
  ( value = <WORD> | value = <INTEGER> )
  { pc.addProperty(name.image, value.image); }
}

AgentManagementOntology.KillAgentAction KillAgentBody() :
{
  AgentManagementOntology.KillAgentAction kaa = new AgentManagementOntology.KillAgentAction();
  Token t;
}
{
  t = <KILL_AGENT>
  {
    kaa.setName(t.image);
  }
  ( "(" KillAgentArg(kaa) ")" ) +
  { return kaa; }
}

void KillAgentArg(AgentManagementOntology.KillAgentAction kaa) :
{
  String s;
  Token t;
}
{
    ( <AGENT_NAME> s = AgentName() { kaa.setAgentName(s); } )
  | ( <PASSWORD> t = <WORD> { kaa.setPassword(t.image); } )
}

AgentManagementOntology.KillContainerAction KillContainerBody() :
{
  AgentManagementOntology.KillContainerAction kca = new AgentManagementOntology.KillContainerAction();
  Token t;
  Token name;
}
{
  t = <KILL_CONTAINER>
  {
    kca.setName(t.image);
  }
  name = <WORD>
  {
    kca.setContainerName(name.image);
    return kca;
  }
}

AgentManagementOntology.DFAction DFActionBody() :
{
  AgentManagementOntology.DFAction a = new AgentManagementOntology.DFAction();
  AgentManagementOntology.DFAgentDescriptor dfd;
  Token t;
}
{
  ( t = <REGISTER> | t = <DEREGISTER> | t = <MODIFY> )
  { a.setName(t.image); }
  dfd = DF_description()
  {
    a.setArg(dfd);
    return a;
  }
}

AgentManagementOntology.DFSearchAction DFSearchBody() :
{
  AgentManagementOntology.DFSearchAction a = new AgentManagementOntology.DFSearchAction();
  AgentManagementOntology.DFAgentDescriptor dfd;
  Token t;
}
{
  t = <SEARCH> { a.setName(t.image); }
  dfd = DF_description()  { a.setArg(dfd); }
  ( Constraint(a) )+
  { return a; }
}

AgentManagementOntology.ACCAction ACCActionBody() :
{
  AgentManagementOntology.ACCAction a = new AgentManagementOntology.ACCAction();
  ACLMessage msg = null;
  Token t;
  String s;
}
{
  t = <FORWARD> s = ACLMessage()
  {
    a.setName(t.image);

    ACLParser p = ACLParser.create();
    try {
      System.out.println("***");
      System.out.println(s);
      System.out.println("***");
      msg = p.parse(new StringReader(s));
    }
    catch(jade.lang.acl.ParseException jlape) {
      jlape.printStackTrace();
      throw new ParseException();
    }

    a.setArg(msg);
    return a;
  }
}

String ACLMessage() :
{
  String s; Token t;
}
{ 
  { token_source.SwitchTo(ACL_BODYSTATE); }
    t = <ACL_MESSAGE>
  { token_source.SwitchTo(DEFAULT); 
    return(t.image);	}
//  "("
//  { token_source.SwitchTo(ACL_BODYSTATE); }
//  s = ACLMessageBody()
//  { token_source.SwitchTo(DEFAULT); }
//  ")"
//  {
//    return "(" + s + ")";
//  }
}

/**
String ACLMessageBody() :
{
  String s = new String();
  String s2;
}
{
  {
    Token t;
  }
  (
    (
     (t = <STRING_LITERAL> | t = <BLE_STRING> | t = <REMAINDER>) { s = s + t.image; }
    )
    |
    (
     "(" s2 = ACLMessageBody() ")" { s = s + "(" + s2 + ")"; }
    )
  )*
  {
    return s;
  }
}
***/


AgentManagementOntology.AMSAgentDescriptor AMS_Description() :
{
  AgentManagementOntology.AMSAgentDescriptor result;
}
{
  "(" result = AMSDescriptionBody() ")"
  { return result; }
}

void Sniff_Description(AgentManagementOntology.SniffAgentOnAction saoa) :
{
}
{
  "(" SniffDescriptionBody(saoa) ")"
}

void Sniff_Description_Off(AgentManagementOntology.SniffAgentOffAction saoa) :
{
}
{
  "(" SniffDescriptionBodyOff(saoa) ")"
}


AgentManagementOntology.AMSAgentDescriptor AMSDescriptionBody() :
{
  AgentManagementOntology.AMSAgentDescriptor result = new AgentManagementOntology.AMSAgentDescriptor();
}
{
 <AMS_DESCRIPTION> ( "(" FIPA_AMS_description(result) ")" )+
 {
   return result;
 }

}

void SniffDescriptionBody(AgentManagementOntology.SniffAgentOnAction saoa) :
{
}
{
 <SNIFF_NAME> ( Sniffing_description(saoa) ) // Maybe a '+' is needed
}

void SniffDescriptionBodyOff(AgentManagementOntology.SniffAgentOffAction saoa) :
{
}
{
 <SNIFF_NAME> ( Sniffing_descriptionOff(saoa) ) // Maybe a '+' is needed
}


void Sniffing_description(AgentManagementOntology.SniffAgentOnAction saoa) :
{
  String s;
  Token t;
  String name;
}
{
  ( s = AgentName() ) 
  { 
    saoa.setSnifferName(s); 
  }
  ( <AG_LIST> "{" SniffAGList(saoa) "}" )
}

void Sniffing_descriptionOff(AgentManagementOntology.SniffAgentOffAction saoa) :
{
  String s;
  Token t;
  String name;
}
{
  ( s = AgentName() ) 
  { 
    saoa.setSnifferName(s); 
  }
  ( <AG_LIST> "{" SniffAGListOff(saoa) "}" )
}


void SniffAGList(AgentManagementOntology.SniffAgentOnAction saoa) :
{	
  Token t;
  String s;
}
{
  ( s = AgentName() { saoa.addSniffedAgent(s); } )+
}

void SniffAGListOff(AgentManagementOntology.SniffAgentOffAction saoa) :
{	
  Token t;
  String s;
}
{
  ( s = AgentName() { saoa.addNotSniffedAgent(s); } )+
}


void FIPA_AMS_description(AgentManagementOntology.AMSAgentDescriptor amsd) :
{
  String s;
  Token t;
}
{
  <AGENT_NAME> s = AgentName() 
  {
    if(amsd.getName() == null) amsd.setName(s);
    else throw new ParseException();
  }
| <ADDRESS> s = CommAddress()
  {
    if(amsd.getAddress() == null) amsd.setAddress(s);
    else throw new ParseException();
  }
| <SNIFF_NAME> s = AgentName()
	{
    if(amsd.getName() == null) amsd.setName(s);
    else throw new ParseException();		
	}
| <SIGNATURE> t = <WORD>
  {
    if(amsd.getSignature() == null) amsd.setSignature(t.image);
    else throw new ParseException();
  }
| <AP_STATE> t = <APState> {
    try {
      amsd.setAPState(AgentManagementOntology.instance().getAPStateByName(t.image)); 
    }
    catch(FIPAException fe) {
      fe.printStackTrace();
      throw new ParseException();
    }
  }
| <DELEGATE_AGENT_NAME> s = AgentName()
  {
    if(amsd.getDelegateAgentName() == null) amsd.setDelegateAgentName(s);
    else throw new ParseException();
  }
| <FORWARD_ADDRESS> s = CommAddress()
  {
    if(amsd.getForwardAddress() == null) amsd.setForwardAddress(s);
    else throw new ParseException();
  }
| <OWNERSHIP> t = <WORD>
  {
    if(amsd.getOwnership() == null) amsd.setOwnership(t.image);
    else throw new ParseException();
  }
}

AgentManagementOntology.DFAgentDescriptor DF_description() :
{
  AgentManagementOntology.DFAgentDescriptor result = new AgentManagementOntology.DFAgentDescriptor();
}
{
 "(" <DF_DESCRIPTION> ( "(" FIPA_DF_description(result) ")" )+ ")"
 {
   return result;
 }

}

void FIPA_DF_description(AgentManagementOntology.DFAgentDescriptor dfd) :
{
  AgentManagementOntology.ServiceDescriptor sd;
  String s;
  Token t;
}
{
   <AGENT_NAME> s = AgentName()
   {
     if(dfd.getName() == null) dfd.setName(s);
     else throw new ParseException();
   }
 | <AGENT_ADDRESS> ( s = CommAddress() { dfd.addAddress(s); } )+
 | <AGENT_SERVICES> ( sd = FIPA_Service_Desc() { dfd.addAgentService(sd); })+
 | <AGENT_TYPE> ( t = <ServiceTypes> | t = <WORD> )
   {
     if(dfd.getType() == null) dfd.setType(t.image);
     else throw new ParseException();
   }
 | <INTERACTION_PROTOCOLS> "(" ( t = <WORD> { dfd.addInteractionProtocol(t.image); } )+ ")"
 | <ONTOLOGY> s = SL1Term()
   {
     if(dfd.getOntology() == null) dfd.setOntology(s);
     else throw new ParseException();
   }
 | <OWNERSHIP> s = SL1Term()
   {
     if(dfd.getOwnership() == null) dfd.setOwnership(s);
     else throw new ParseException();
   }
 | <DF_STATE> t = <DfLifecycleState>
   {
     if(dfd.getDFState() == null) dfd.setDFState(t.image);
     else throw new ParseException();
   }
}

AgentManagementOntology.ServiceDescriptor FIPA_Service_Desc() :
{
  AgentManagementOntology.ServiceDescriptor result = new AgentManagementOntology.ServiceDescriptor();
}
{
  "(" <SERVICE_DESCRIPTION> ( "(" FIPA_Service_Desc_Item(result) ")" )+  ")"
  {
    return result;
  }
}

void FIPA_Service_Desc_Item(AgentManagementOntology.ServiceDescriptor sd) :
{
  String s;
  Token t;
}
{
  <SERVICE_NAME> (t = <ServiceTypes> | t = <WORD>)
  {
    if(sd.getName() == null) sd.setName(t.image);
    else throw new ParseException();
  }
| <SERVICE_TYPE> (t = <ServiceTypes> | t = <WORD>)
  {
    if(sd.getType() == null) sd.setType(t.image);
    else throw new ParseException();
  }
| <SERVICE_ONTOLOGY> s = SL1Term()
  { 
    if(sd.getOntology() == null) sd.setOntology(s);
    else throw new ParseException();
  }
| <FIXED_PROPERTIES> s = SL1Term()
  {
    if(sd.getFixedProps() == null) sd.setFixedProps(s);
    else throw new ParseException();
  }
| <NEGOTIABLE_PROPERTIES> s = SL1Term()
  {
    if(sd.getNegotiableProps() == null) sd.setNegotiableProps(s);
    else throw new ParseException();
  }
| <COMMUNICATION_PROPERTIES> s = SL1Term()
  {
    if(sd.getCommunicationProps() == null) sd.setCommunicationProps(s);
    else throw new ParseException();
  }

}

AgentManagementOntology.PlatformProfile AP_Profile() :
{
  AgentManagementOntology.PlatformProfile result = new AgentManagementOntology.PlatformProfile();
}
{
  "(" <AP_PROFILE> ("(" AP_Profile_Item(result) ")" )+ ")"
  {
    return result;
  }
}

void AP_Profile_Item(AgentManagementOntology.PlatformProfile pp) :
{
  Token t;
  String s;
}
{
  <PLATFORM_NAME> t = <WORD>
  {
    if(pp.getPlatformName() == null) pp.setPlatformName(t.image);
    else throw new ParseException();
  }
| <IIOP_URL> s = CommAddress()
  {
    if(pp.getIiopURL() == null) pp.setIiopURL(s);
    else throw new ParseException();
  }
| <DYNAMIC_REG> ( t = "true" | t = "false" )
  {
    if(pp.getDynReg() == null) pp.setDynReg(t.image);
    else throw new ParseException();
  }
| <MOBILITY> ( t = "true" | t = "false" )
  {
    if(pp.getMobility() == null) pp.setMobility(t.image);
    else throw new ParseException();
  }
| <OWNERSHIP> s = SL1Term()
  {
    if(pp.getOwnership() == null) pp.setOwnership(s);
    else throw new ParseException();
  }
| <CERT_AUTH> s = SL1Term()
  {
    if(pp.getCertificationAuthority() == null) pp.setCertificationAuthority(s);
    else throw new ParseException();
  }
| <FIPA_VERSION> ( t = "fipa97-part1-v1" | t = "fipa97-part1-v2" | t = "fipa98-part1-v1" )
  {
    if(pp.getFipaVersion() == null) pp.setFipaVersion(t.image);
    else throw new ParseException();
  }

}

String AgentName() :
{
  Token t;
  String s;
  String result;
}
{
  t = <WORD> {result = t.image;} [ "@" s = CommAddress() { result = result.concat("@" + s); } ]
  { return result; }
}


String CommAddress() :
{
}
{
  {Token t;}	t=<WORD> {return t.image;}
}



void Constraint(AgentManagementOntology.DFSearchAction a) :
{
  AgentManagementOntology.Constraint c = new AgentManagementOntology.Constraint();
  Token t;
}
{
  "(" ( t = <DFDEPTH> | t = <RESPREQ> )
  { c.setName(t.image); }
  t = <ConstraintFn>
  { c.setFn(t.image); }
  t = <INTEGER>
  { c.setArg(Integer.parseInt(t.image)); } ")"
  { a.addConstraint(c); }
}


String SL1Term() :
{
  Token t;
  String s;
}
{
  t = <WORD>  { return t.image; }
| t = <STRING_LITERAL> { return t.image;}
| s = Number() { return s; }
| "(" t=<WORD> { s = "(" + t.image; String s1; } ( s1 = SL1Term() {s = s + " " + s1; } )* ")"
  { return s + ")"; }

}


String Number():
{ Token t;}
{ 
  t=<INTEGER> 			{return t.image;}
| t=<FLOATONE> 			{return t.image;}
| t=<FLOATTWO> 			{return t.image;}
}


AgentManagementOntology.DFSearchResult Search_Result() :
{
  AgentManagementOntology.DFSearchResult dfsa = new AgentManagementOntology.DFSearchResult();
  AgentManagementOntology.DFAgentDescriptor dfd;
  AgentManagementOntology.Action a;
}
{
  "(" <RESULT> "("
    ( a=ActionWithoutParenthesis() ")" "(" )?
    ( dfd = DF_description() { dfsa.put(dfd.getName(), dfd); } )* 
  ")" ")"
  { return dfsa; }
}


FIPAException FIPA_Exception() :
{ 
  String s;
  token_source.SwitchTo(EXCEPTIONSTATE);
}
{
  s = ExceptionExpression()
  { token_source.SwitchTo(DEFAULT); return AgentManagementOntology.getException(s); }
}


String ExceptionExpression() :
{
  Token t;
  String s;
}
{
  t = <EXC_WORD> 
  { return t.image; }
| t = <EXC_STRING_LITERAL> 
  { return t.image; }
| t = <EXC_INTEGER> 
  { return t.image; }
| t = <EXC_FLOATONE>
  { return t.image; }
| t= <EXC_FLOATTWO>
  { return t.image; }
| <EXC_LBRACE> t=<EXC_WORD> 
  {s="("+t.image; String s1;}
  (s1=ExceptionExpression() { s = s + " " + s1;} )* <EXC_RBRACE> 
  { return s+")"; }
}


// JavaCC lexical productions

<DEFAULT>
SKIP:
{
  " "
| "\t"
| "\n"
| "\r"
}

<DEFAULT>
TOKEN: 
{
  <DF_DESCRIPTION : ":df-description">
| <AMS_DESCRIPTION : ":ams-description">
| <REGISTER : "register"> 
| <DEREGISTER : "deregister">
| <MODIFY : "modify">
| <SEARCH : "search">
| <REGISTER_AGENT : "register-agent">
| <DEREGISTER_AGENT : "deregister-agent">
| <SNIFF_ON : "sniff-agent-on">
| <SNIFF_OFF : "sniff-agent-off">
| <SNIFF_NAME : ":sniffer-name">
| <AG_LIST : ":agent-list">  
| <AUTHENTICATE : "authenticate">
| <QUERY_PLATFORM_PROFILE : "query-platform-profile">
| <MODIFY_AGENT : "modify-agent">
| <CREATE_AGENT : "create-agent">
| <AGENT_CODE : ":agent-code">
| <AGENT_PROPERTIES : ":agent-properties">
| <KILL_AGENT : "kill-agent">
| <KILL_CONTAINER : "kill-container">
| <PASSWORD : ":password">
| <FORWARD : "forward">
| <AGENT_NAME : ":agent-name">
| <AGENT_ADDRESS : ":agent-address">
| <AGENT_SERVICES : ":agent-services">
| <AGENT_TYPE : ":agent-type">
| <INTERACTION_PROTOCOLS : ":interaction-protocols">
| <ONTOLOGY : ":ontology">
| <OWNERSHIP : ":ownership">
| <DF_STATE : ":df-state"> : DfLifeCycleState
| <ADDRESS : ":address">
| <SIGNATURE : ":signature">
| <AP_STATE : ":ap-state"> : APStateSTATE
| <DELEGATE_AGENT_NAME : ":delegate-agent-name">
| <FORWARD_ADDRESS : ":forward-address">
| <SERVICE_DESCRIPTION : ":service-description">
| <SERVICE_NAME : ":service-name">
| <SERVICE_TYPE : ":service-type">
| <SERVICE_ONTOLOGY : ":service-ontology">
| <AP_PROFILE : "ap-profile"> 
| <PLATFORM_NAME : ":platform-name">
| <IIOP_URL : ":iiop-url">
| <DYNAMIC_REG : ":dynamic-registration">
| <MOBILITY : ":mobility">
| <CERT_AUTH : ":certification-authority">
| <FIPA_VERSION : ":fipa-man-compliance">
| <FIXED_PROPERTIES : ":fixed-properties">
| <NEGOTIABLE_PROPERTIES : ":negotiable-properties">
| <COMMUNICATION_PROPERTIES : ":communication-properties">
| <ServiceTypes : "fipa-df" | "fipa-ams" | "fipa-acc" | "fipa-agent" >
| <ConstraintFn : "Max" | "Min" | "Exactly" >
| <DFDEPTH : ":df-depth">
| <RESPREQ : ":resp-req">
| <ACTION : "action">
| <RESULT : "result">
| <PROPERTY_NAME : ":"["!", "\"", "$"-"'", "*", "+", ",", ".", ";"-"?", "A"-"~"] (["*"-".", "0"-"9", ";"-"?","A"-"~","!"-"'"])* >
| <WORD : ["!" , "\"" , "$"-"'" , "*" , "+" , "," , "." , "/" , ":"-"~"] (["*"-"~","!"-"'"])* >
| < INTEGER :       (["+","-"])? (["0"-"9"])+ >
| < FLOATONE :      (["+","-"])? ((["0"-"9"])+ "." (["0"-"9"])* | (["0"-"9"])* "." (["0"-"9"])+)
                    (["e","E"] (["-","+"])? (["0"-"9"])+)? >
| < FLOATTWO :      (["+","-"])? (["0"-"9"])+ ["e","E"] (["-","+"])? (["0"-"9"])+  >


}

<APStateSTATE>
SKIP:
{
  " "
| "\t"
| "\n"
| "\r"
}

<APStateSTATE>
TOKEN:
{
  <APState : "initiated" | "active" | "suspended" | "waiting" | "deleted" > : DEFAULT
}

<DfLifeCycleState>
SKIP:
{
  " "
| "\t"
| "\n"
| "\r"
}

<DfLifeCycleState>
TOKEN:
{
  <DfLifecycleState : "active" | "suspended" | "retired" | "unknown" > : DEFAULT
}

<ACL_BODYSTATE>
SKIP:
{
  " "
| "\t"
| "\n"
| "\r"
}
<ACL_BODYSTATE>
TOKEN:
{
<ACL_MESSAGE:  "(" >
    { // consume balanced parenthesis
        String aclm = "("; 
	try {
	 int parent = 1;
	 while (parent > 0) {
		char p = input_stream.readChar();
		if (p=='(') parent++;
		else if (p == ')') parent--;
		aclm = aclm + p;
	 }
        } catch (IOException e) {
	  System.out.println("IOException during ACLMessage to forward");
	  throw new TokenMgrError(true, curLexState, input_stream.getEndLine(), input_stream.getEndColumn(),input_stream.GetImage(), curChar, TokenMgrError.LEXICAL_ERROR);
        }
	matchedToken.image = aclm;
    }
| <STRING_LITERAL: "\"" (~["\""] | "\\" (["n","t","b","r","f","\\","\'","\""] | ["0"-"7"] (["0"-"7"])? | ["0"-"3"] ["0"-"7"] ["0"-"7"]))* "\"">
//| <BLE_STRING: "#" <INT> "\"" >
//    {
 //     String tmp = matchedToken.image.substring(1, matchedToken.image.length() - 1);
//      int numBytes = Integer.parseInt(tmp);
//      if (numBytes < 0) 
//	throw new TokenMgrError("ERROR: PrefixByteLengthEncodedString with length < 0", TokenMgrError.STATIC_LEXER_ERROR);
//      char[] bytes = new char[numBytes];
//      int i = 0; 
// 	
//      while (numBytes-- > 0) 
//	try {
//	  bytes[i++] = input_stream.readChar(); 
//	}
//        catch (IOException e) {
//	  System.out.println("IOException during PREFIXBYTELENGTHENCODEDSTRING");
//	  throw new TokenMgrError(true, curLexState, input_stream.getEndLine(), input_stream.getEndColumn(),input_stream.GetImage(), curChar, TokenMgrError.LEXICAL_ERROR);
//	}
 //     // If you want, you can add bytes to matchedToken.image here.
//      matchedToken.image = new String(bytes);
//    }
//| <REMAINDER: (~["(", "#", "\"", ")" ])+ >
//| <INT : ["0"-"9"](["0"-"9"])*>

}

<EXCEPTIONSTATE>
SKIP:
{
  " "
| "\t"
| "\n"
| "\r"
}

<EXCEPTIONSTATE>
TOKEN:
{
  <EXC_STRING_LITERAL: "\"" (~["\""] | "\\" (["n","t","b","r","f","\\","\'","\""] | ["0"-"7"] (["0"-"7"])? | ["0"-"3"] ["0"-"7"] ["0"-"7"]))* "\""> 
| < EXC_WORD : ["!" , "\"" , "$"-"'" , "*" , "+" , "," , "." , "/" , ":"-"~"] (["*"-"~","!"-"'"])* >
| < EXC_INTEGER :       (["+","-"])? (["0"-"9"])+ >
| < EXC_FLOATONE :      (["+","-"])? ((["0"-"9"])+ "." (["0"-"9"])* | (["0"-"9"])* "." (["0"-"9"])+)
                    (["e","E"] (["-","+"])? (["0"-"9"])+)? >
| < EXC_FLOATTWO :      (["+","-"])? (["0"-"9"])+ ["e","E"] (["-","+"])? (["0"-"9"])+  >
| < EXC_LBRACE : "(" >
| < EXC_RBRACE : ")" >
}

