/*
  $Id$
*/

// This file defines a class to parse 'fipa-agent-management' grammar
// productions into various objects, instances of classes defined in
// AgentManagementOntology utility class.


options {

  STATIC = false;

}


PARSER_BEGIN(AgentManagementParser) // FIXME: Must check for duplicate keywords

package jade.domain;

import java.io.Reader;
import java.io.StringReader;

import java.io.OutputStreamWriter;
import java.io.BufferedWriter;

import jade.lang.acl.ACLMessage;

class AgentManagementParser {

  public static void main(String args[]) throws ParseException {
    AgentManagementParser parser = new AgentManagementParser(System.in);

    while (true) {
      try {
	AgentManagementOntology.Action result = parser.Action();
	result.toText(new BufferedWriter(new OutputStreamWriter(System.out)));
      }
      catch(ParseException pe) {
	pe.printStackTrace();
	System.exit(1);
      }
    }
  }

  public static AgentManagementParser create() {
    return new AgentManagementParser(new StringReader(""));
  }

  public AgentManagementOntology.Action parseAction(Reader r) throws ParseException {
    ReInit(r);
    return Action();
  }

  public AgentManagementOntology.AMSAction parseAMSAction(Reader r) throws ParseException {
    ReInit(r);
    return AMSAction();
  }

  public AgentManagementOntology.DFAction parseDFAction(Reader r) throws ParseException {
    ReInit(r);
    return DFAction();
  }

  public AgentManagementOntology.ACCAction parseACCAction(Reader r) throws ParseException {
    ReInit(r);
    return ACCAction();
  }

  public AgentManagementOntology.DFAgentDescriptor parseDFDescriptor(Reader r) throws ParseException {
    ReInit(r);
    return DF_description();
  }

  public AgentManagementOntology.AMSAgentDescriptor parseAMSDescriptor(Reader r) throws ParseException {
    ReInit(r);
    return AMS_Description();
  }

  public AgentManagementOntology.ServiceDescriptor parseServiceDescriptor(Reader r) throws ParseException {
    ReInit(r);
    return FIPA_Service_Desc();
  }

}

PARSER_END(AgentManagementParser)



// JavaCC grammar productions


AgentManagementOntology.Action Action() :
{
  AgentManagementOntology.Action a;
}
{
  "(" ( a = AMSActionBody() | a = DFActionBody() | a = ACCActionBody() ) ")"
  { return a; }
}

AgentManagementOntology.AMSAction AMSAction() :
{
  AgentManagementOntology.AMSAction a;
}
{
  "(" a = AMSActionBody() ")"
  { return a; }
}

AgentManagementOntology.DFAction DFAction() :
{
  AgentManagementOntology.DFAction a;
}
{
  "(" a = DFActionBody() ")"
  { return a; }
}

AgentManagementOntology.ACCAction ACCAction() :
{
  AgentManagementOntology.ACCAction a;
}
{
  "(" a = ACCActionBody() ")"
  { return a; }
}

AgentManagementOntology.AMSAction AMSActionBody() :
{
  AgentManagementOntology.AMSAction a = new AgentManagementOntology.AMSAction();
  AgentManagementOntology.AMSAgentDescriptor amsd;
  Token t;
}
{
  ( t = <REGISTER_AGENT> | t = <DEREGISTER_AGENT> | t = <AUTHENTICATE> | t = <MODIFY_AGENT> )
  { a.setName(t.image); }
  amsd = AMS_Description()
  { a.setArg(amsd); }

  { return a; }
}

AgentManagementOntology.DFAction DFActionBody() :
{
  AgentManagementOntology.DFAction a = new AgentManagementOntology.DFAction();
  AgentManagementOntology.DFAgentDescriptor dfd;
  Token t;
}
{
  ( t = <REGISTER> | t = <DEREGISTER> | t = <MODIFY> | t = <SEARCH> )
  { a.setName(t.image); }
  dfd = DF_description() // FIXME: Constraint still missing
  {
    a.setArg(dfd);
    return a;
  }
}

AgentManagementOntology.ACCAction ACCActionBody() :
{
  AgentManagementOntology.Action a;
  ACLMessage msg;
  Token t;
}
{
  t = <FORWARD>
  {
    // FIXME: Add ACL message parsing
    return null;
  }
}


AgentManagementOntology.AMSAgentDescriptor AMS_Description() :
{
  AgentManagementOntology.AMSAgentDescriptor result = new AgentManagementOntology.AMSAgentDescriptor();
}
{
 "(" <AMS_DESCRIPTION> ( "(" FIPA_AMS_description(result) ")" )+ ")"
 {
   return result;
 }

}

void FIPA_AMS_description(AgentManagementOntology.AMSAgentDescriptor amsd) :
{
  String s;
  Token t;
}
{
  <AGENT_NAME> s = AgentName() { amsd.setName(s); }
| <ADDRESS> s = CommAddress() { amsd.setAddress(s); }
| <SIGNATURE> t = <WORD> { amsd.setSignature(t.image); }
| <AP_STATE> t = <APState> {
    try {
      amsd.setAPState(AgentManagementOntology.instance().getAPStateByName(t.image)); 
    }
    catch(FIPAException fe) {
      fe.printStackTrace();
      throw new ParseException();
    }
  }
| <DELEGATE_AGENT_NAME> s = AgentName() { amsd.setDelegateAgentName(s); }
| <FORWARD_ADDRESS> s = CommAddress() { amsd.setForwardAddress(s); }
| <OWNERSHIP> t = <WORD> { amsd.setOwnership(t.image); }
}

AgentManagementOntology.DFAgentDescriptor DF_description() :
{
  AgentManagementOntology.DFAgentDescriptor result = new AgentManagementOntology.DFAgentDescriptor();
}
{
 "(" <DF_DESCRIPTION> ( "(" FIPA_DF_description(result) ")" )+ ")"
 {
   return result;
 }

}

void FIPA_DF_description(AgentManagementOntology.DFAgentDescriptor dfd) :
{
  AgentManagementOntology.ServiceDescriptor sd;
  String s;
  Token t;
}
{
   <AGENT_NAME> s = AgentName() { dfd.setName(s); }
 | <AGENT_ADDRESS> ( s = CommAddress() { dfd.addAddress(s); } )+ // FIXME: Error when multiple adrresses are present
 | <AGENT_SERVICES> ( sd = FIPA_Service_Desc() { dfd.addService(sd); })+
 | <AGENT_TYPE> t = <WORD> { dfd.setType(t.image); }
 | <INTERACTION_PROTOCOLS> "(" ( t = <WORD> { dfd.addInteractionProtocol(t.image); } )+ ")"
 | <ONTOLOGY> s = SL1Term() { dfd.setOntology(s); }
 | <OWNERSHIP> s = SL1Term() { dfd.setOwnership(s); }
 | <DF_STATE> t = <DfLifecycleState> { dfd.setDFState(t.image); }
}

AgentManagementOntology.ServiceDescriptor FIPA_Service_Desc() :
{
  AgentManagementOntology.ServiceDescriptor result = new AgentManagementOntology.ServiceDescriptor();
}
{
  "(" <SERVICE_DESCRIPTION> ( "(" FIPA_Service_Desc_Item(result) ")" )+  ")"
  {
    return result;
  }
}

void FIPA_Service_Desc_Item(AgentManagementOntology.ServiceDescriptor sd) :
{
  String s;
  Token t;
}
{
   <SERVICE_NAME> (t = <ServiceTypes> | t = <WORD>) { sd.setName(t.image); }
|  <SERVICE_TYPE> (t = <ServiceTypes> | t = <WORD>) { sd.setType(t.image); }
|  <SERVICE_ONTOLOGY> s = SL1Term() { sd.setOntology(s); }
|  <FIXED_PROPERTIES> s = SL1Term() { sd.setFixedProps(s); }
| <NEGOTIABLE_PROPERTIES> s = SL1Term() { sd.setNegotiableProps(s); }
| <COMMUNICATION_PROPERTIES> s = SL1Term() { sd.setCommunicationProps(s); }

}

String AgentName() :
{
  Token t;
  String s;
}
{
  t = <WORD> "@" s = CommAddress() { return t.image + "@" + s; }
}

String CommAddress() :
{
  Token proto;
  String addr;
  Token port;
  String acc;
}
{
  { token_source.SwitchTo(COMM_PROTOCOLSTATE); }
  proto = <COMM_PROTOCOL> "://" (addr = IPAddress()|addr = DNSName()) ":" port = <INTEGER> "/" acc = ACCObj()
  {
    String s = proto.image + "://" + addr + ":" + port.image + "/" + acc;
    return s;
  }
}

String IPAddress() :
{
  Token t1;
  Token t2;
  Token t3;
  Token t4;
}
{
  t1 = <INTEGER> "." t2 = <INTEGER> "." t3 = <INTEGER> "." t4 = <INTEGER>
  {
    return t1.image + "." + t2.image + "." + t3.image + "." + t4.image;
  }
}

String DNSName() :
{
  Token t;
}
{
  t = <WORD>
  {
    return t.image;
  }
}

String ACCObj() :
{
  Token t;
}
{
  t = <WORD>
  {
    return t.image;
  }
}




// FIXME: This should be an almighty SL1 term
// instead of an humble Word
String SL1Term() :
{
  Token t;
}
{
  t = <WORD>
  {
    return t.image;
  }
}


// JavaCC lexical productions

<*>
SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

<DEFAULT>
TOKEN: 
{
  <DF_DESCRIPTION : ":df-description">
| <AMS_DESCRIPTION : ":ams-description">
| <REGISTER : "register"> 
| <DEREGISTER : "deregister">
| <MODIFY : "modify">
| <SEARCH : "search">
| <REGISTER_AGENT : "register-agent">
| <DEREGISTER_AGENT : "deregister-agent">
| <AUTHENTICATE : "authenticate">
| <MODIFY_AGENT : "modify-agent">
| <FORWARD : "forward">
| <AGENT_NAME : ":agent-name">
| <AGENT_ADDRESS : ":agent-address">
| <AGENT_SERVICES : ":agent-services">
| <AGENT_TYPE : ":agent-type">
| <INTERACTION_PROTOCOLS : ":interaction-protocols">
| <ONTOLOGY : ":ontology">
| <OWNERSHIP : ":ownership">
| <DF_STATE : ":df-state"> : DfLifeCycleState
| <ADDRESS : ":address">
| <SIGNATURE : ":signature">
| <AP_STATE : ":ap-state"> : APStateSTATE
| <DELEGATE_AGENT_NAME : ":delegate-agent-name">
| <FORWARD_ADDRESS : ":forward-address">
| <SERVICE_DESCRIPTION : ":service-description">
| <SERVICE_NAME : ":service-name">
| <SERVICE_TYPE : ":service-type">
| <SERVICE_ONTOLOGY : ":service-ontology"> 
| <FIXED_PROPERTIES : ":fixed-properties">
| <NEGOTIABLE_PROPERTIES : ":negotiable-properties">
| <COMMUNICATION_PROPERTIES : ":communication-properties">
| <ServiceTypes : "fipa-df" | "fipa-ams" | "fipa-acc" | "fipa-agent" >
| <WORD : ["!", "\"", "$"-"'", "*", "+", ",", ".", ";"-"?", "A"-"~"] (["*"-".", "0"-"9", ";"-"?","A"-"~","!"-"'"])* >
| <INTEGER : ["0"-"9"](["0"-"9"])*>
}

<COMM_PROTOCOLSTATE>
TOKEN:
{
  <COMM_PROTOCOL : ["A"-"Z", "a"-"z"](["A"-"Z", "a"-"z", "0"-"9", "_"])*> : DEFAULT
}

<APStateSTATE>
TOKEN:
{
  <APState : "initiated" | "active" | "suspended" | "waiting"> : DEFAULT
}

<DfLifeCycleState>
TOKEN:
{
  <DfLifecycleState : "active" | "suspended" | "retired"> : DEFAULT
}



