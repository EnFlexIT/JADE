/*
  $Id$
*/

// This file defines a class to parse a 'fipa-df-agent-descriptor'
// into a DFAgentDescriptor object

options {

  STATIC = false;

}


PARSER_BEGIN(DFDescriptionParser)

package jade.domain;

import java.io.Reader;
import java.io.StringReader;

class DFDescriptionParser {

  // Temporary reference for result during construction
  private DFAgentDescriptor desc;
  private ServiceDescriptor sd;

  public static void main(String args[]) throws ParseException {
    DFDescriptionParser parser = new DFDescriptionParser(System.in);
    
    while (true) {
      try {
	DFAgentDescriptor result = parser.DF_description();
	result.dump(); 
      }
      catch(ParseException pe) {
	pe.printStackTrace();
	System.exit(1);
      }
    }
  }

  public static DFDescriptionParser create() {
    return new DFDescriptionParser(new StringReader(""));
  }

  public DFAgentDescriptor parse(Reader r) throws ParseException {
    ReInit(r);
    return DF_description();
  }

}

PARSER_END(DFDescriptionParser)



// JavaCC grammar productions


DFAgentDescriptor DF_description() :
{
  desc = new DFAgentDescriptor();
}
{
 "(" <DF_DESCRIPTION> ( "(" FIPA_DF_description() ")" )+ ")"
 {
   DFAgentDescriptor result = desc;
   desc = null;
   return result;
 }

}


void FIPA_DF_description() :
{
  String s;
  Token t;
}
{
   <AGENT_NAME> AgentName()
 | <AGENT_ADDRESS> ( CommAddress() )+
 | <AGENT_SERVICES> ( FIPA_Service_Desc() )+
 | <AGENT_TYPE> t = <WORD>
   {
     desc.setType(t.image);
   }
   // FIXME: Should be (<WORD>)+
 | <INTERACTION_PROTOCOLS> "(" t = <WORD> ")"
   {
     desc.setInteractionProtocols(t.image);
   }
 | <ONTOLOGY> s = SL1Term()
   {
     desc.setOntology(s);
   }
 | <OWNERSHIP> s = SL1Term()
   {
     desc.setOwnership(s);
   }
 | <DF_STATE> t = <STATES>
   {
     desc.setDFState(t.image);
   }
}

void AgentName() :
{
  Token t;
}
{
  t = <WORD> "@" CommAddress()
  {
    desc.setName(t.image);
  }
}

void CommAddress() :
{
  Token t;
}
{
  //  t = CommProtocol() "://" (IPAddress()|DNSName()) ":" Integer() "/" ACCObj()
  t = <WORD>
  {
    desc.setAddress(t.image);
  }
}



void FIPA_Service_Desc() :
{
  sd = new ServiceDescriptor();
}
{
  "(" <SERVICE_DESCRIPTION> ( "(" FIPA_Service_Desc_Item() ")" ) +  ")"
  {
    desc.setServices(sd);
  }
}

void FIPA_Service_Desc_Item() :
{
  String s;
  Token t;
}
{
   <SERVICE_NAME> t = <ServiceTypes>
    {
      sd.setName(t.image);
    }
|  <SERVICE_TYPE> t = <ServiceTypes>
    {
      sd.setType(t.image);
    }
 | <SERVICE_ONTOLOGY> s = SL1Term() ")"
    {
      sd.setOntology(s);
    }
 | <FIXED_PROPERTIES> s = SL1Term()
    {
      sd.setFixedProps(s);
    }
 | <NEGOTIABLE_PROPERTIES> s = SL1Term()
    {
      sd.setNegotiableProps(s);
    }
 | <COMMUNICATION_PROPERTIES> s = SL1Term()
    {
      sd.setCommunicationProps(s);
    }

}

// FIXME: This should be an almighty SL1 term
// instead of an humble Word
String SL1Term() :
{
  Token t;
}
{
  t = <WORD>
  {
    return t.image;
  }
}


// JavaCC lexical productions

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}


TOKEN: 
{

  <DF_DESCRIPTION : ":df-description">
| <AGENT_NAME : ":agent-name">
| <AGENT_ADDRESS : ":agent-address">
| <AGENT_SERVICES : ":agent-services">
| <AGENT_TYPE : ":agent-type">
| <INTERACTION_PROTOCOLS : ":interaction-protocols">
| <ONTOLOGY : ":ontology">
| <OWNERSHIP : ":ownership">
| <DF_STATE : ":df-state">
| <SERVICE_DESCRIPTION : ":service-description">
| <SERVICE_NAME : ":service-name">
| <SERVICE_TYPE : ":service-type">
| <SERVICE_ONTOLOGY : ":service-ontology"> 
| <FIXED_PROPERTIES : ":fixed-properties">
| <NEGOTIABLE_PROPERTIES : ":negotiable-properties">
| <COMMUNICATION_PROPERTIES : ":communication-properties">
| <STATES : "active" | "suspended" | "retired">
| <ServiceTypes : "fipa-df" | "fipa-ams" | "fipa-acc" | "fipa-agent" | <WORD> >
| < WORD :   ["!", "\"", "$"-"'", "*", "+", ",", ".", "/", ":"-"~"] (["*"-"~","!"-"'"])* >

}

