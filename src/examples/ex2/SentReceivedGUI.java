/*
	This simple extension of the java.awt.Frame class
	contains all the elements necessary to act as the
	main window of an application.
	It is used by FilebasedSenderAgent
 */

package examples.ex2;

import java.awt.*;
import java.io.*;
import java.io.StringReader;
import jade.core.*;
import jade.lang.acl.*;

/**
 * This class implements a graphical frame that display the sent and received
 * messages. In order to use it you must:
 *
 * <p>create it at the agent level
 * <code>SentReceivedGUI myGui = new SentReceivedGUI(this);</code>
 *
 * <p>in the <code>setup()</code> method:
 * <code> myGui.setTitle("Type of the Agent " + getName());
 * myGui.setVisible(true);
 *
 * <p> everytime you receive a message call:
 * <code> StringWriter w = new StringWriter();
 * msg.toText(w);
 * myGui.receivedMessage("("+w.toString()+")"); </code>
 *
 * <p> every time you send a message call:
 * <code> StringWriter w = new StringWriter();
 * msg.toText(w);
 * myGui.sentMessage("("+w.toString()+")"); </code>
 */
public class SentReceivedGUI extends Frame
{
  private Agent agent;

	public SentReceivedGUI()
	{
		// This code is automatically generated by Visual Cafe when you add
		// components to the visual environment. It instantiates and initializes
		// the components. To modify the code, only use code syntax that matches
		// what Visual Cafe can generate, or Visual Cafe may be unable to back
		// parse your Java file into its visual environment.
		
		//{{INIT_CONTROLS
		setLayout(null);
		setVisible(false);
		setSize(405,305);
		openFileDialog1 = new java.awt.FileDialog(this);
		openFileDialog1.setMode(FileDialog.LOAD);
		openFileDialog1.setTitle("Select the File with the message to send");
		//$$ openFileDialog1.move(40,277);
		setTitle("AGENT");

		label1 = new java.awt.Label("SENT MESSAGES",Label.CENTER);
		label1.setBounds(0,0,202,40);
		add(label1);

		label2 = new java.awt.Label("RECEIVED MESSAGES",Label.CENTER);
		label2.setBounds(202,0,202,40);
		add(label2);
	      
		textArea1 = new java.awt.TextArea("",0,0,TextArea.SCROLLBARS_BOTH);
		textArea1.setEditable(false);
		//textArea1.setText("");
		textArea1.setBounds(0,40,202,265);
		add(textArea1);

		textArea2 = new java.awt.TextArea("",0,0,TextArea.SCROLLBARS_BOTH);
		textArea2.setEditable(false);
		//textArea2.setText("");
		textArea2.setBounds(202,40,202,265);
		add(textArea2);
		//}}
		
		//{{INIT_MENUS
		mainMenuBar = new java.awt.MenuBar();
		menu1 = new java.awt.Menu("Commands");
		miOpen = new java.awt.MenuItem("SendMessage");
		miOpen.setShortcut(new MenuShortcut(java.awt.event.KeyEvent.VK_O,false));
		menu1.add(miOpen);
		menu1.addSeparator();
		miExit = new java.awt.MenuItem("Exit");
		menu1.add(miExit);
		mainMenuBar.add(menu1);

		menu3 = new java.awt.Menu("Help");
		mainMenuBar.setHelpMenu(menu3);
		miAbout = new java.awt.MenuItem("About..");
		menu3.add(miAbout);
		mainMenuBar.add(menu3);

		setMenuBar(mainMenuBar);
		//$$ mainMenuBar.move(4,277);
		//}}
		
		//{{REGISTER_LISTENERS
		SymWindow aSymWindow = new SymWindow();
		this.addWindowListener(aSymWindow);
		SymAction lSymAction = new SymAction();
		miOpen.addActionListener(lSymAction);
		miAbout.addActionListener(lSymAction);
		miExit.addActionListener(lSymAction);
		//}}
	}
	
	public SentReceivedGUI(String title)
	{
		this();
		setTitle(title);
	}

  public SentReceivedGUI(Agent a) {
    this();
    agent = a;
  }
	
    /**
     * Shows or hides the component depending on the boolean flag b.
     * @param b  if true, show the component; otherwise, hide the component.
     * @see java.awt.Component#isVisible
     */
    public void setVisible(boolean b)
	{
		if(b)
		{
			setLocation(50, 50);
		}	
		super.setVisible(b);
	}
	
	static public void main(String args[])
	{
		(new SentReceivedGUI()).setVisible(true);
	}
	
	public void addNotify()
	{
		// Record the size of the window prior to calling parents addNotify.
		Dimension d = getSize();
		
		super.addNotify();
	
		if (fComponentsAdjusted)
			return;
	
		// Adjust components according to the insets
		setSize(getInsets().left + getInsets().right + d.width, getInsets().top + getInsets().bottom + d.height);
		Component components[] = getComponents();
		for (int i = 0; i < components.length; i++)
		{
			Point p = components[i].getLocation();
			p.translate(getInsets().left, getInsets().top);
			components[i].setLocation(p);
		}
		fComponentsAdjusted = true;
	}
	
	// Used for addNotify check.
	boolean fComponentsAdjusted = false;
	
	//{{DECLARE_CONTROLS
	java.awt.FileDialog openFileDialog1;
	java.awt.TextArea textArea1;
	java.awt.TextArea textArea2;
	java.awt.Label label1;
	java.awt.Label label2;
	//}}
	
	//{{DECLARE_MENUS
	java.awt.MenuBar mainMenuBar;
	java.awt.Menu menu1;
	java.awt.MenuItem miOpen;
	java.awt.MenuItem miExit;
        java.awt.Menu menu3;
	java.awt.MenuItem miAbout;
	//}}

  private int n=0; // n is the progressive number of sent messages
  private int m=0; // m is the progressive number of received messages

	class SymWindow extends java.awt.event.WindowAdapter
	{
		public void windowClosing(java.awt.event.WindowEvent event)
		{
			Object object = event.getSource();
			if (object == SentReceivedGUI.this)
				SentReceivedGUI_WindowClosing(event);
		}
	}
	
	void SentReceivedGUI_WindowClosing(java.awt.event.WindowEvent event)
	{
	  miExit_Action(null);
	}
	
	class SymAction implements java.awt.event.ActionListener
	{
		public void actionPerformed(java.awt.event.ActionEvent event)
		{
			Object object = event.getSource();
			if (object == miOpen)
				miOpen_Action(event);
			else if (object == miAbout)
				miAbout_Action(event);
			else if (object == miExit)
				miExit_Action(event);
		}
	}
	
	void miAbout_Action(java.awt.event.ActionEvent event)
	{
		//{{CONNECTION
		// Action from About Create and show as modal
		(new AboutDialog(this, true)).setVisible(true);
		//}}
	} 
	

	void miExit_Action(java.awt.event.ActionEvent event)
	{
		//{{CONNECTION
		// Action from Exit Create and show as modal
	  //(new QuitDialog(this, true, agent)).setVisible(true);
	  agent.doDelete();
	  setVisible(false);
	  dispose();
		//}}
	}
	
	void miOpen_Action(java.awt.event.ActionEvent event)
	{
		//{{CONNECTION
		// Action from Open... Show the OpenFileDialog
		int		defMode			= openFileDialog1.getMode();
		String	defTitle		= openFileDialog1.getTitle();
		String defDirectory	= openFileDialog1.getDirectory();
		String defFile			= openFileDialog1.getFile();

		openFileDialog1 = new java.awt.FileDialog(this, defTitle, defMode);
		openFileDialog1.setDirectory(defDirectory);
		openFileDialog1.setFile(defFile);
		openFileDialog1.setVisible(true);
		//System.out.println(openFileDialog1.getDirectory() +  
		//                   openFileDialog1.getFile());

		String name = new String();
		try {
		  name = openFileDialog1.getDirectory() +  
		    openFileDialog1.getFile();
		  BufferedReader in = new BufferedReader(new FileReader(name));
		  String s = new String();
		  String msg = new String();
		  
		  while((s = in.readLine())!= null){
		    msg +=(s + "\n");
		  }
		  //System.out.println("\n" + getName() + " sending message: \n" + msg);		  
		  ACLMessage ACLmsg = ACLMessage.fromText(new StringReader(msg));
		  ACLmsg.setSource(agent.getName());
		  agent.send(ACLmsg);
		  sentMessage(msg);
        } catch(FileNotFoundException e) {
          System.out.println("File Not Found:" + name);
        } catch(IOException e) {
          System.out.println("IO Exception");
        }

		//}}
	}

public void sentMessage(String msg) {
  n++;
  textArea1.append("\nMESSAGE NUMBER " + n + "\n" + msg + "\n--------------------");
}

  public void receivedMessage(String msg) {
    m++;
    textArea2.append("\nMESSAGE NUMBER " + m + "\n" + msg+"\n-------------------");
  }
}

