README file for JADE $Name$ - Example programs.

Some example programs are provided in JADE package, to show various
framework features and suggested programming idioms.  To run the
examples, you must set CLASSPATH environment variable to contain the
file jade.jar, jadeTools.jar and Base64.jar and the current directory ('.').
Then change to 'src' directory and refer to the various example agents
with a fully qualified package name; all example agent classes belong
to subpackages of 'examples' package: for example, class ComplexBehaviourAgent
 in 'behaviours' subdirectory of 'examples' directory must be started 
by the jade/src directory with:

      java jade.Boot -platform a1:examples.behaviours.ComplexBehaviourAgent


The following list describes all the example programs found in
'src/examples' subdirectories, detailing their features.



'behaviours' subdirectory
=========================
This examples shows some examples of agent behaviours.

 - ComplexBehaviourAgent.class	An agent with a behaviour made of many 
				steps,with some steps that have sub-steps
                                themselves. This examples shows how
                                jade.core.behaviours.SequentialBehaviour class
                                allows the construction of aggregate
                                behaviours starting from simpler ones,
                                even with recursive aggregations.
                                Besides, it shows the cooperative
                                multitasking presently used for
                                intra-agent behaviour scheduling.
 
 - WakerAgent.class      	This example shows the usage of the WakerBehaviour. 
				The agent object, at its setup, adds 2 WakerBehaviours. 
				The first behaviour wakes up after the given timeout. 
				The second behaviour wakes up at the given date and time.
                                When they wake up, the method handleElapsedTimeout() is 
				executed.
				Notice that in the first behaviour, the execution of the 
				method reset(t) makes repetitive the behaviour itself; 
				that is it wakes up every t milliseconds.


 - FSMAgent.class		An agent with two behaviours built like finite state 
				machines.



'Base64' subdirectory
=====================
This examples shows how to transport serialized Java object over an ACLMessage.
You can execute it, for instance, with the following command:
	
	java jade.Boot -platform a1:examples.Base64.ObjectWriterAgent
	a2:examples.ex7.ObjectReaderAgent

 - ObjectReaderAgent.class	This agent makes the following task: 
				1. registers itself with the df as a reader;
				2. waits a message from its companion, the ObjectWriterAgent; 
				3. reads the content of the message, knowing a-priori that 
   				   it is encoded in Base64 and contains a Java object;
				
	
 
 - ObjectWriterAgent.class	This agent makes the following task:
				1. searches in the DF for an ObjectReaderAgent;
				2. sends an ACLMessage with a content encoded in Base64 to the 
                                   ObjectReaderAgent.

 - Person.class			This is  just a support class for the object reader
				and writer agents.




'jess' subdirectory
===================
JessAgent is a sample agent that allows the programmer to avoid writing any 
line of Java code. He can implement everything in CLIPS by using JESS.
The code IS just the file JadeAgent.clp.
Every time an ACL message arrives, a new fact is asserted in JESS.
A function allows to send messages.
In order to compile this example, JESS is needed. It has been already tested
with JESS 4.3
 - BasicJessBehaviour.class
 - JessAgent.class
 - JessBehaviour.class
 - JadeAgent.clp	


'mobile' subdirectory
=====================
This is an example of mobile agent.
 - CounterBehaviour.class	The behaviour uses two resources, in particular 
				the counter cnt and the flag cntEnabled, of the agent object. 
				It prints its value, increments by one,blocks 
				for two seconds, and repeats forever. 


 - ExecutorBehaviour.class	This is the main behaviour of the Agent. 
				It serves all the received messages. 
				In particular,the following expressions are accepted 
				as content of "request" messages:
				- (move <destination>)  to move the Agent to another container. 
			          Example: (move Front-End) or (move Container-1)
				- (exit) to request the agent to exit
				- (stop) to stop the counter
				- (continue) to continue counting

- MobileAgent.class		This is an example of mobile agent. 
				This class contains the two resources used by the 
				agent behaviours: the counter cnt and the flag cntEnabled. 
				At the setup it adds two behaviours to serve the incoming messages and
				to increment the counter. 
				In particular, notice the usage of the two methods beforeMove() and
				afterMove() to execute some application-specific tasks just before 
				and just after the agent migration takes effect.



'protocols' subdirectory
========================
This example shows the usage of two behaviours provided by JADE 
that implement the 'fipa-query' protocol and the 'fipa-request' protocol.

 - AgRequestInitiator.class	This agent plays initiator role in a
                                conversation following standard
                                'fipa-request' protocol. The example
                                program shows how more complex
                                interactions (such as agent
                                interaction protocols) can be handled
                                with primitives provided by JADE
                                framework, such as composite
                                behaviours and advanced message
                                passing.

 - AgRequestResponder.class	The companion agent of AgRequesteriInitiator.
                                This agent plays responder role in
                                'fipa-request' protocol and is able to
                                manage multiple simultaneous
                                conversations through
                                'conversation-id' message field.

 - AgQueryInitiator.class	This agent is the initiator of the FIPAQueryprotocol.
				You can execute the example with the following command: 
					java jade.Boot -platform 
					initiator:examples.ex6.AgQueryInitiator 																																				                                                															                                        responder:examples.ex6.AgQueryResponder
				and then use the GUI of the initiator to send a query 
				message to the responder.
				
 - AgQueryResponder.class	The companion of the AgQueryInitiator that responds to the 
				query message.


'receivers' subdirectory
========================
This example shows some methods an agent can use to receive a message. 
 
 - AgentSender.class		This agent sends some inform messages.

 - AgentReceiver.class 		This agent receives the messages using different kind 
				of receive methods provided by JADE.


'subdf' subdirectory
====================
 - SubDF.class			This examples shows how to set up multiple
				Agent Domains by means of a network of
				connected Directory Facilitator Agents.
				This agent can register itself with another
				DF, exploiting recursive search capabilities.

'ontology' subdirectory
=======================
- RequesterAgent and ExecutorAgent are a couple of agents that show the usage of
                                the support to application-defined content languages
                                and ontologies. All the other files in the directory
                                are the JAva classes that implement the different
                                entities belonging to this sample ontology.
- TestAgent		allows to test ACLMessages whose content language
			is FIPA-SL0 and whose ontology is FIPA-Agent-Management.

