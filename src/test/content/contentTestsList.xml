<?xml version="1.0" encoding="utf-8" ?>
<!-- Relative reference to the DTD file does not work when the test suite is in a jar file
<!DOCTYPE TestsList SYSTEM "../common/xml/listTests.dtd" [
	<!ENTITY % inline "#PCDATA|em|br|UL|LI|b">
	]>
-->
	<TestsList> 
		<Test name="CSF" skip="false">
			<TestClassName>test.content.tests.TestCSF</TestClassName>
			<WhatTest> Tests the usage of the ConceptSlotFunction class.</WhatTest>
			<HowWorkTest> The test encodes and successively decodes a message whose content makes use of the ConceptSlotFunction class: (= (CSF) value).</HowWorkTest>
			<WhenTestPass> The test passes if no exception is fired and the fill() operation properly set the slot value as indicated by the ConceptSlotFunction construct.</WhenTestPass>
		</Test>		
		<Test name="CSF in IOTA" skip="false">
			<TestClassName>test.content.tests.TestIotaCSF</TestClassName>
			<WhatTest> Tests the usage of the ConceptSlotFunction class inside a iota-based expression.</WhatTest>
			<HowWorkTest> The test encodes and successively decodes a message whose content that makes use of the ConceptSlotFunction class inside a iota-based expression: (iota ?x (= (CSF) ?x)).</HowWorkTest>
			<WhenTestPass> The test passes if no exception is fired and the apply() operation properly get the slot value as indicated by the ConceptSlotFunction construct.</WhenTestPass>
		</Test>		
		<Test name="Integer" skip="false">
			<TestClassName>test.content.tests.TestInt</TestClassName>
			<WhatTest> Tests a ACLMessage content.</WhatTest>
			<HowWorkTest> It includes a concept with an attribute of type int.</HowWorkTest>
			<WhenTestPass> Test passed if no exception is fired.</WhenTestPass>
		</Test>		
		<Test name="Boolean" skip="false">
			<TestClassName>test.content.tests.TestBoolean</TestClassName>
			<WhatTest> Tests a ACLMessage content.</WhatTest>
			<HowWorkTest> It includes a concept with an attribute of type boolean.</HowWorkTest>
			<WhenTestPass> Test passed if no exception is fired.</WhenTestPass>
		</Test>		
		<Test name="Long" skip="false">
			<TestClassName>test.content.tests.TestLong</TestClassName>
			<WhatTest> Tests a ACLMessage content.</WhatTest>
			<HowWorkTest>
				It includes a concept with an attribute of type boolean.
				<br></br><em>NOTE: This test uses the same content as the Date-attribute test.</em>
			</HowWorkTest>
			<WhenTestPass> Test passed if no exception is fired.</WhenTestPass>
		</Test>		
		<Test name="Float" skip="false">
			<TestClassName>test.content.tests.TestFloat</TestClassName>
			<WhatTest> Tests a ACLMessage content.</WhatTest>
			<HowWorkTest> It includes a concept with an attribute of type float.</HowWorkTest>
			<WhenTestPass> Test passed if no exception is fired.</WhenTestPass>
		</Test>		
		<Test name="Double" skip="false">
			<TestClassName>test.content.tests.TestDouble</TestClassName>
			<WhatTest> Tests a ACLMessage content.</WhatTest>
			<HowWorkTest> It includes a concept with an attribute of type double.</HowWorkTest>
			<WhenTestPass> Test passed if no exception is fired.</WhenTestPass>
		</Test>		
		<Test name="Date" skip="false">
			<TestClassName>test.content.tests.TestDate</TestClassName>
			<WhatTest> Tests a ACLMessage content.</WhatTest>
			<HowWorkTest> 
				It includes a concept with an attribute of type date.
				<br></br><em>NOTE: This test uses the same content as the Long-attribute test</em>
			</HowWorkTest>
			<WhenTestPass> Test passed if no exception is fired.</WhenTestPass>
		</Test>		
		<Test name="Byte Sequence" skip="false">
			<TestClassName>test.content.tests.TestByteSeq</TestClassName>
			<WhatTest> Tests a ACLMessage content.</WhatTest>
			<HowWorkTest> It includes a concept with an attribute of type byte-sequence.</HowWorkTest>
			<WhenTestPass> 
				Test passed if no exception is fired.
			</WhenTestPass>
		</Test>		
		<Test name="Java types preservation in un-typed attributes" skip="false">
			<TestClassName>test.content.tests.TestJavaTypesPreservation</TestClassName>
			<WhatTest> Tests that java types (Integer, Long, Float, Double) are correctly managed also when used in un-typed attributes or within a list</WhatTest>
			<HowWorkTest> </HowWorkTest>
			<WhenTestPass> </WhenTestPass>
		</Test>		
		<Test name="Agent Action" skip="false">
			<TestClassName>test.content.tests.TestAgentAction</TestClassName>
			<WhatTest> Tests a ACLMessage content.</WhatTest>
			<HowWorkTest> It sends an AgentAction content.</HowWorkTest>
			<WhenTestPass> 
				Test passed if no exception is fired.
				<br></br><em>NOTE: When using the SL language this test is PASSED if the above operation fails</em>
			</WhenTestPass>
		</Test>		
		<Test name="Agent Action1" skip="false">
			<TestClassName>test.content.tests.TestAction1</TestClassName>
			<WhatTest> Tests a ACLMessage content.</WhatTest>
			<HowWorkTest> It sends an AgentAction content with BasicOntology.</HowWorkTest>
			<WhenTestPass> Test passed if no exception is fired.</WhenTestPass>
		</Test>		
		<Test name="Agent Action2" skip="false">
			<TestClassName>test.content.tests.TestAction2</TestClassName>
			<WhatTest> Tests a ACLMessage content.</WhatTest>
			<HowWorkTest> It send a Concept that represents an action but is not an AgentAction within a BasicOntology.ACTION</HowWorkTest>
			<WhenTestPass> Test passed if no exception is fired.</WhenTestPass>
		</Test>		
		<Test name="Object" skip="false">
			<TestClassName>test.content.tests.TestObject</TestClassName>
			<WhatTest> Tests a ACLMessage content.</WhatTest>
			<HowWorkTest> It includes a concept with a slot as generic object.</HowWorkTest>
			<WhenTestPass> Test passed if no exception is fired.</WhenTestPass>
		</Test>		
		<Test name="Unknown Schema" skip="false">
			<TestClassName>test.content.tests.TestUnknownSchema</TestClassName>
			<WhatTest> Tests a ACLMessage content.</WhatTest>
			<HowWorkTest> It inserts a content that is a Predicate of an unknown type.</HowWorkTest>
			<WhenTestPass> Test passed if exception is fired.</WhenTestPass>
		</Test>		
		<Test name="Onto AID" skip="false">
			<TestClassName>test.content.tests.TestOntoAID</TestClassName>
			<WhatTest> Tests a ACLMessage content.</WhatTest>
			<HowWorkTest> Test the usage of an OntoAID where a Concept is required.</HowWorkTest>
			<WhenTestPass> Test passed if no exception is fired.</WhenTestPass>
		</Test>		
		<Test name="Sequence,True_As_A_String" skip="false">
			<TestClassName>test.content.tests.TestSequence</TestClassName>
			<WhatTest> Tests a ACLMessage content. It also tests the codec capability of distinguishing between the string "true" and the boolean true.</WhatTest>
			<HowWorkTest> It includes a concept with an aggregate attribute of type SEQUENCE.</HowWorkTest>
			<WhenTestPass> Test passed if no exception is fired.</WhenTestPass>
		</Test>		
		<Test name="Missing Optional" skip="false">
			<TestClassName>test.content.tests.TestMissingOptional</TestClassName>
			<WhatTest> Tests a ACLMessage content.</WhatTest>
			<HowWorkTest> It includes a concept with a missing optional attribute.</HowWorkTest>
			<WhenTestPass> Test passed if no exception is fired.</WhenTestPass>
		</Test>		
		<Test name="Missing Manadatory" skip="false">
			<TestClassName>test.content.tests.TestMissingMandatory</TestClassName>
			<WhatTest> Tests a ACLMessage content.</WhatTest>
			<HowWorkTest> It includes a concept with a missing mandatory attribute.</HowWorkTest>
			<WhenTestPass> Test passed if no exception is fired.</WhenTestPass>
		</Test>		
		<Test name="Content Element List" skip="false">
			<TestClassName>test.content.tests.TestContentElementList</TestClassName>
			<WhatTest> Tests a ACLMessage content.</WhatTest>
			<HowWorkTest> It composes the content with more than one content element, i.e. a content element list.</HowWorkTest>
			<WhenTestPass> Test passed if no exception is fired.</WhenTestPass>
		</Test>		
		<Test name="Aggregate as Concept" skip="false">
			<TestClassName>test.content.tests.TestAggregateAsConcept</TestClassName>
			<WhatTest> Tests a ACLMessage content.</WhatTest>
			<HowWorkTest> It inserts an aggregate where a concept is required.</HowWorkTest>
			<WhenTestPass> Test passed if no exception is fired.</WhenTestPass>
		</Test>		
		<Test name="Typed Aggregate" skip="false">
			<TestClassName>test.content.tests.TestTypedAggregate</TestClassName>
			<WhatTest> Tests a ACLMessage content.</WhatTest>
			<HowWorkTest> It includes a typed aggregate containing an element of a wrong type.</HowWorkTest>
			<WhenTestPass> Test passed if an exception is fired.</WhenTestPass>
		</Test>		
		<Test name="Cardinality" skip="false">
			<TestClassName>test.content.tests.TestCardinality</TestClassName>
			<WhatTest> Tests a ACLMessage content.</WhatTest>
			<HowWorkTest> 
				It includes with an aggregate including a wrong number of elements.
				<br></br><em>NOTE: This also tests adding a facet in a class for a slot defined in a superclass.</em>
			</HowWorkTest>
			<WhenTestPass> Test passed if no exception is fired.</WhenTestPass>
		</Test>		
		<Test name="Correct IRE" skip="false">
			<TestClassName>test.content.tests.TestCorrectIRE</TestClassName>
			<WhatTest> Tests a ACLMessage content.</WhatTest>
			<HowWorkTest> It includes a correct IRE.</HowWorkTest>
			<WhenTestPass> Test passed if no exception is fired.</WhenTestPass>
		</Test>		
		<Test name="Onto ACLMessage" skip="false">
			<TestClassName>test.content.tests.TestOntoACLMessage</TestClassName>
			<WhatTest> Tests a ACLMessage content.</WhatTest>
			<HowWorkTest> It uses an OntoACLMessage where an AgentAction is required.</HowWorkTest>
			<WhenTestPass> Test passed if no exception is fired.</WhenTestPass>
		</Test>		
		<Test name="BC Reflective Introspector" skip="false">
			<TestClassName>test.content.tests.TestBCReflectiveIntrospector</TestClassName>
			<WhatTest> Tests the 2.x Backward-Compatible reflective Introspector</WhatTest>
			<HowWorkTest> It includes a concept with an attribute of type sequence using the Backward compatible Reflective Introspector.</HowWorkTest>
			<WhenTestPass> Test passed if no exception is fired.</WhenTestPass>
		</Test>		
		<Test name="CF Reflective Introspector" skip="false">
			<TestClassName>test.content.tests.TestCFReflectiveIntrospector</TestClassName>
			<WhatTest> Tests the Collection-Framework-based reflective Introspector</WhatTest>
			<HowWorkTest>The test encodes and successively decodes a content expression refering to an ontology (LEAP-Ontology) that has among its base ontologies another one (CF-Ontology) using the CFReflectiveIntrospector. The latter, on its turn has among its base ontologies another one using the BCReflectiveIntrospector. The content expression includes a mixture of java.util.List and jade.util.leap.List slots.</HowWorkTest>
			<WhenTestPass> Test passed if no exception is fired and the decoded content is consistent with the original one.</WhenTestPass>
		</Test>		
		<Test name="Abs Descriptor As Concept" skip="false">
			<TestClassName>test.content.tests.TestAbsDescriptorAsConcept</TestClassName>
			<WhatTest> Tests the usage of AbsConcept as a Java class associated to a Concept in an ontology.</WhatTest>
			<HowWorkTest> The content used in this test is a predicate represented as a Java object including a concept represented as an instance of the AbsConcept class.</HowWorkTest>
			<WhenTestPass> Test passed if no exception is fired.</WhenTestPass>
		</Test>		
		<Test name="Abs Descriptor As Predicate" skip="false">
			<TestClassName>test.content.tests.TestAbsDescriptorAsPredicate</TestClassName>
			<WhatTest> Tests a ACLMessage content.</WhatTest>
			<HowWorkTest> It uses an AbsPredicate as a Java class associated to a Predicate in an ontology.</HowWorkTest>
			<WhenTestPass> Test passed if no exception is fired.</WhenTestPass>
		</Test>		
		<Test name="Slot Order" skip="false">
			<TestClassName>test.content.tests.TestSlotOrder</TestClassName>
			<WhatTest> Tests a ACLMessage content.</WhatTest>
			<HowWorkTest> It including a predicate where slots values have been set in a mixed order.</HowWorkTest>
			<WhenTestPass> Test passed if no exception is fired.</WhenTestPass>
		</Test>		
		<Test name="Multiple Inheritance" skip="false">
			<TestClassName>test.content.tests.TestMultipleInheritance</TestClassName>
			<WhatTest> Tests a content refering to an ontology including multiple inheritance among concepts.</WhatTest>
			<HowWorkTest> </HowWorkTest>
			<WhenTestPass> The test passes if all the expected values are found and no exception is fired.</WhenTestPass>
		</Test>		
	</TestsList>
