<?xml version="1.0" encoding="utf-8" ?>
<!-- Relative reference to the DTD file does not work when the test suite is in a jar file
<!DOCTYPE TestsList SYSTEM "../../common/xml/listTests.dtd" [
	<!ENTITY % inline "#PCDATA|em|br|UL|LI|b">
	]>
-->
	<TestsList>
		<Test name="Test split-container basic" skip="false">
			<TestClassName>test.leap.split.tests.TestSplitContainerBasic</TestClassName>
			<WhatTest>Test the creation of a basic split-container.
			</WhatTest>
			<HowWorkTest>A new split-container is started and the AMS is asked to start a new agent (ping agent).
			</HowWorkTest>
			<WhenTestPass> The test passes if:
			1. the agent is successfully created and replies to messages
			2. the agent is successfully killed
			3. the split-container is successfully killed.
			</WhenTestPass> 
		</Test> 
		<Test name="Test split-container NIO" skip="false">
			<TestClassName>test.leap.split.tests.TestSplitContainerNIO</TestClassName>
			<WhatTest>Test the creation of split-container using NIOBEDispatcher
			</WhatTest>
			<HowWorkTest>A new split-container is started and the AMS is asked to start a new agent (ping agent).
			</HowWorkTest>
			<WhenTestPass> The test passes if:
			1. the agent is successfully created and replies to messages
			2. the agent is successfully killed
			3. the split-container is successfully killed.
			</WhenTestPass> 
		</Test> 
		<Test name="Test split-container HTTP" skip="false">
			<TestClassName>test.leap.split.tests.TestSplitContainerHTTP</TestClassName>
			<WhatTest>Test the creation of split-container using HTTP
			</WhatTest>
			<HowWorkTest>A new split-container is started and the AMS is asked to start a new agent (ping agent).
			</HowWorkTest>
			<WhenTestPass> The test passes if:
			1. the agent is successfully created and replies to messages
			2. the agent is successfully killed
			3. the split-container is successfully killed.
			</WhenTestPass> 
		</Test> 
		<Test name="Bootstrap Wildcard agent creation on basic split-container." skip="false">
			<TestClassName>test.leap.split.tests.TestBootstrapAgentBasic</TestClassName>
			<WhatTest>Test the usage of wildcards in agent names when starting an agent at split-container bootstrap
			</WhatTest>
			<HowWorkTest>A new split-container is started specifying on the command line an agent including the %C wildcard in its name
			</HowWorkTest>
			<WhenTestPass> The test passes if an agent is created with the expected name (i.e. with the %C wildcard substituted with the container name)
			</WhenTestPass> 
		</Test>	
		<Test name="Bootstrap Wildcard agent creation on NIO split-container." skip="false">
			<TestClassName>test.leap.split.tests.TestBootstrapAgentNIO</TestClassName>
			<WhatTest>Test the usage of wildcards in agent names when starting a bootstrap agent on a split-container using NIOBEDispatcher.
			</WhatTest>
			<HowWorkTest>A new split-container is started specifying on the command line an agent including the %C wildcard in its name
			</HowWorkTest>
			<WhenTestPass> The test passes if an agent is created with the expected name (i.e. with the %C wildcard substituted with the container name)
			</WhenTestPass> 
		</Test>	
		<Test name="Bootstrap Wildcard agent creation on HTTP split-container." skip="false">
			<TestClassName>test.leap.split.tests.TestBootstrapAgentHTTP</TestClassName>
			<WhatTest>Test the usage of wildcards in agent names when starting a bootstrap agent on a split-container using HTTPPeer.
			</WhatTest>
			<HowWorkTest>A new split-container is started specifying on the command line an agent including the %C wildcard in its name
			</HowWorkTest>
			<WhenTestPass> The test passes if an agent is created with the expected name (i.e. with the %C wildcard substituted with the container name)
			</WhenTestPass> 
		</Test>	
		<Test name="Wildcard agent creation via AMS on basic split-container and remote communication." skip="false">
			<TestClassName>test.leap.split.tests.TestRemoteCommunicationBasic</TestClassName>
			<WhatTest>Test the usage of wildcards in agent names when starting an agent via AMS and the remote communication with a remote platform via HTTP MTP.
			</WhatTest>
			<HowWorkTest>A new split-container is started and the AMS is asked to start a ping agent on a remote platform.
			A controller agent, started on the split-container using wild-card in name, sends a message to the pingAgent and waits for a reply.
			</HowWorkTest>
			<WhenTestPass> The test passes if an agent is created with the expected name (i.e. with the %C wildcard substituted with the container name) and the 
			the communication between agents works properly.
			</WhenTestPass> 
		</Test>
		<Test name="Wildcard agent creation via AMS on split-container using HTTPPeer and remote communication." skip="false">
			<TestClassName>test.leap.split.tests.TestRemoteCommunicationHTTP</TestClassName>
			<WhatTest>Test the usage of wildcards in agent names when starting an agent via AMS and the remote communication with a remote platform via HTTP MTP.
			</WhatTest>
			<HowWorkTest>A new split-container is started (using HTTPPeer) and the AMS is asked to start a ping agent on a remote platform.
			A controller agent, started on the split-container using wild-card in name, sends a message to the pingAgent and waits for a reply.
			</HowWorkTest>
			<WhenTestPass> The test passes if an agent is created with the expected name (i.e. with the %C wildcard substituted with the container name) and the 
			the communication between agents works properly.
			</WhenTestPass> 
		</Test>	
		<Test name="Wildcard agent creation via AMS on a NIO split-container and remote communication." skip="false">
			<TestClassName>test.leap.split.tests.TestRemoteCommunicationNIO</TestClassName>
			<WhatTest>Test the usage of wildcards in agent names when starting an agent via AMS and the remote communication with a remote platform via HTTP MTP.
			</WhatTest>
			<HowWorkTest>A new split-container is started  and the AMS is asked to start a ping agent on a remote platform.
			A controller agent, started on the split-container using wild-card in name, sends a message to the pingAgent and waits for a reply.
			</HowWorkTest>
			<WhenTestPass> The test passes if an agent is created with the expected name (i.e. with the %C wildcard substituted with the container name) and the 
			the communication between agents works properly.
			</WhenTestPass> 
		</Test>	
		<Test name="Test the ending of a basic split-container using the MicroRuntime stop method." skip="false">
			<TestClassName>test.leap.split.tests.TestSplitContainerNaturalDeathBasic</TestClassName>
			<WhatTest>Test the killing of a Front End using the stopJADE method provided by the MicroRuntime.
			</WhatTest>
			<HowWorkTest>A new split-container is started  and the AMS is asked to start a killer agent on it.
			</HowWorkTest>
			<WhenTestPass>The test passes if the split-container is successfully killed by the agent.
			</WhenTestPass> 
		</Test>
		<Test name="Test the ending of a HTTP split-container using the MicroRuntime stop method." skip="false">
			<TestClassName>test.leap.split.tests.TestSplitContainerNaturalDeathHTTP</TestClassName>
			<WhatTest>Test the killing of a Front End using the stopJADE method provided by the MicroRuntime.
			</WhatTest>
			<HowWorkTest>A new split-container using HTTPPeer is started and the AMS is asked to start a killer agent on it.
			</HowWorkTest>
			<WhenTestPass>The test passes if the split-container is successfully killed by the agent.
			</WhenTestPass> 
		</Test>
		<Test name="Test the ending of a NIO split-container using the MicroRuntime stop method." skip="false">
			<TestClassName>test.leap.split.tests.TestSplitContainerNaturalDeathNIO</TestClassName>
			<WhatTest>Test the killing of a Front End using the stopJADE method provided by the MicroRuntime.
			</WhatTest>
			<HowWorkTest>A new split-container using NIOBEDispatcher is started  and the AMS is asked to start a killer agent on it.
			</HowWorkTest>
			<WhenTestPass>The test passes if the split-container is successfully killed by the agent.
			</WhenTestPass> 
		</Test>
		<Test name="Test the ending of a basic split-container using the exitwhenempty bootstrap option." skip="false">
			<TestClassName>test.leap.split.tests.TestExitWhenEmptyOnSplitContainerBasic</TestClassName>
			<WhatTest>Test the closure of a Front End using using the exitwhenempty bootstrap option.
			</WhatTest>
			<HowWorkTest>A new split-container is started  and the AMS is asked to start a agent on it. After a timeout
			the agent kills itself and consequently the container exits itself.
			</HowWorkTest>
			<WhenTestPass>The test passes if the split-container exits successfully .
			</WhenTestPass> 
		</Test>
		<Test name="Test the ending of a HTTP split-container using the exitwhenempty bootstrap option." skip="false">
			<TestClassName>test.leap.split.tests.TestExitWhenEmptyOnSplitContainerHTTP</TestClassName>
			<WhatTest>Test the closure of a Front End using using the exitwhenempty bootstrap option.
			</WhatTest>
			<HowWorkTest>A new split-container using HTTPPeer is started  and the AMS is asked to start a agent on it. After a timeout
			the agent kills itself and consequently the container exits itself.
			</HowWorkTest>
			<WhenTestPass>The test passes if the split-container exits successfully .
			</WhenTestPass> 
		</Test>
		<Test name="Test the ending of a NIO split-container using the exitwhenempty bootstrap option." skip="false">
			<TestClassName>test.leap.split.tests.TestExitWhenEmptyOnSplitContainerNIO</TestClassName>
			<WhatTest>Test the closure of a Front End using using the exitwhenempty bootstrap option.
			</WhatTest>
			<HowWorkTest>A new split-container using NIOBEDispatcher is started  and the AMS is asked to start a agent on it. After a timeout
			the agent kills itself and consequently the container exits itself.
			</HowWorkTest>
			<WhenTestPass>The test passes if the split-container exits successfully .
			</WhenTestPass> 
		</Test>
		<Test name="Test the ending of a basic split-container due to unexpected shut down." skip="false">
			<TestClassName>test.leap.split.tests.TestShutDownSplitContainerBasic</TestClassName>
			<WhatTest>Test the shut down of a split container started with using the max-disconnection-time bootstrap option.
			</WhatTest>
			<HowWorkTest>A new split-container is started, thent it is close (through jade controller kill method).
			 After a while the AMS is asked to verify if the container exits successfully. 
			</HowWorkTest>
			<WhenTestPass>The test passes if the split-container exits successfully .
			</WhenTestPass> 
		</Test>
		<Test name="Test the ending of a HTTP split-container due to unexpected shut down." skip="false">
			<TestClassName>test.leap.split.tests.TestShutDownSplitContainerHTTP</TestClassName>
			<WhatTest>Test the shut down of a split container started with using the max-disconnection-time bootstrap option.
			</WhatTest>
			<HowWorkTest>A new split-container is started, thent it is close (through jade controller kill method).
			 After a while the AMS is asked to verify if the container exits successfully. 
			</HowWorkTest>
			<WhenTestPass>The test passes if the split-container exits successfully .
			</WhenTestPass> 
		</Test>
		<Test name="Test the ending of a NIO split-container due to unexpected shut down." skip="false">
			<TestClassName>test.leap.split.tests.TestShutDownSplitContainerNIO</TestClassName>
			<WhatTest>Test the shut down of a split container started with using the max-disconnection-time bootstrap option.
			</WhatTest>
			<HowWorkTest>A new split-container is started, thent it is close (through jade controller kill method).
			 After a while the AMS is asked to verify if the container exits successfully. 
			</HowWorkTest>
			<WhenTestPass>The test passes if the split-container exits successfully .
			</WhenTestPass> 
		</Test>
		
	</TestsList>
