<?xml version="1.0" encoding="UTF-8"?>

<!-- Note that targets in this ANT build file are always invoked by other targets in the 
     main LEAP build file. In some cases they refer to properties that are not set locally -->        
<project name="JADE-LEAP for PJAVA" default="do-lib">
	<!-- PROPERTIES specific for PJAVA -->
	<property name="src" value="${pjava-root}/src"/>
	<property name="classes" value="${pjava-root}/classes"/>
	<property name="lib" value="${pjava-root}/lib"/>
	<property name="doc" value="${pjava-root}/doc"/>
	<property name="pjava-title" value="${title} v${version} for PJAVA"/>

        <!--Filtered src directory property
        <property name="filtered.src" location="${pjava-root}/filtered/src"/>
        -->

	<!-- INIT -->
	<target name="do-init" description="Create the appropriate directories">
		<mkdir dir="${pjava-root}"/>
		<mkdir dir="${src}"/>
		<mkdir dir="${classes}"/>
		<mkdir dir="${lib}"/>
		<mkdir dir="${doc}"/>
	</target>

	
	<!-- SETUP -->
	<target name="do-setup" depends="do-init" description="Setup the build environment">
		<!-- 1) Copy JADE sources -->
		<copy todir="${src}">
			<fileset dir="${jade-src}">
				<include name="**/jade/**"/>
				<exclude name="**/jade/core/sam/**"/>
				<exclude name="**/jade/imtp/rmi/**"/>
				<exclude name="**/jade/mtp/iiop/**"/>
				<exclude name="**/jade/tools/**"/>
			</fileset>
		</copy>
		<!-- 2) Copy LEAP sources -->
		<copy todir="${src}" overwrite="yes">
			<fileset dir="${leap-src}">
				<include name="**/jade/util/leap/**"/>
			</fileset>
		</copy>
		<!-- 3) Preprocess the whole -->
		<pproc basedir="${src}" type="pjava"/>
		<!-- 4) Copy the lib commons-codec -->
		<copy todir="${lib}/commons-codec" overwrite="yes">
			<fileset dir="../lib/commons-codec"/>
		</copy>
	</target>

	
	<!-- RESET -->
	<target name="do-reset" description="Reset the build environment">
		<delete dir = "${pjava-root}"/>
	</target>

	
	<!-- CLEAN -->
	<target name="do-clean" description="Clean class files">
		<delete dir = "${classes}"/>
		<delete dir = "${doc}"/>
		<delete dir = "${lib}"/>
		<mkdir dir="${classes}"/>
		<mkdir dir="${lib}"/>
		<mkdir dir="${doc}"/>
	</target>

	
	<!-- PARSERS -->
	<target name="do-parsers" if="javacc-home" description="Generate ACL and SL parsers from .jj files">
  		<!-- ACL Parser -->
		<javacc target="${src}/jade/lang/acl/ACLParser.jj" javacchome="${javacc-home}"/>
  		<!-- SL Parser -->
		<javacc target="${src}/jade/content/lang/sl/SLParser.jj" javacchome="${javacc-home}"/>
	</target>


	<!-- COMPILE -->
	<target name="do-compile" depends="do-setup, do-parsers, compile1, compile2" description="Compile sources"/>
	
	<target name="compile1" if="java-1.1-home" description="Compile sources using JDK1.1. classes as bootclasspath">	  
		<javac srcdir="${src}"
		       destdir="${classes}"
		       debug="${debug-build}"
		       debuglevel="vars,lines,source"
		       optimize="${optimised-build}"
		       deprecation="off"
		       classpath="${java-1.1-home}/lib/classes.zip;${lib}/commons-codec/commons-codec-1.3.jar"
		       bootclasspath="${java-1.1-home}/lib/classes.zip"
		       fork="yes"
		       compiler="classic"
		       source="1.3"
		       target="1.1"/>
	</target>
	
	<target name="compile2" unless="java-1.1-home" description="Compile sources using JAVA_HOME classes as bootclasspath">	  
		<javac srcdir="${src}"
		       destdir="${classes}"
		       debug="${debug-build}"
		       debuglevel="vars,lines,source"
		       optimize="${optimised-build}"
		       deprecation="off"
		       classpath="${lib}/commons-codec/commons-codec-1.3.jar"
		       fork="yes"
		       compiler="classic"
		       source="1.3"
		       target="1.1"/>
	</target>


	<!-- LIB -->
	<target name="do-lib" depends="do-compile" description="Create Jade-leap jar file">
		<delete file="${lib}/JadeLeap.jar" quiet="true"/>
		<jar jarfile="${lib}/JadeLeap.jar" basedir="${classes}"/>
	</target>

	
	<!-- JAVADOC -->
	<target name="do-javadoc" depends="do-setup" description="Generate javadoc">
		<javadoc sourcepath="${src}"
		         destdir="${doc}"
		         classpath="${classes};${boot-java-1.1-classes}"
		         doctitle="&lt;h1>${pjava-title}&lt;/h1>"
		         bottom="${javadoc-footer}"
		         verbose="false"
		         windowtitle="${pjava-title}"
                 packagenames="jade.*"/>
	</target>
	
	
	<!-- DEMO -->
	<target name="do-demo" depends="do-init, check-resources" description="Build the demo">
		<delete dir = "${demo-preprocessed}" quiet="true"/>
		<delete dir = "${demo-classes}" quiet="true"/>
		<mkdir dir="${demo-preprocessed}"/>
		<mkdir dir="${demo-classes}"/>
		
		<copy todir="${demo-preprocessed}" overwrite="yes">
			<fileset dir="${demo-src}">
			</fileset>
		</copy>
		
		<pproc basedir="${demo-preprocessed}" type="pjava"/>
	  
		<javac srcdir="${demo-preprocessed}"
		       destdir="${demo-classes}"
		       classpath="${lib}/JadeLeap.jar"
		       debug="${debug-build}"
		       optimize="${optimised-build}"
		       deprecation="off"
		       fork="yes"
		       compiler="classic"
		       source="1.3"
		       target="1.1"/>
		       
		<copy todir="${demo-classes}">
			<fileset dir="${classes}">
			</fileset>
		</copy>
		
		<delete file="${root}/demo/lib/chatPjava.jar" quiet="true"/>
		<jar jarfile="${root}/demo/lib/chatPjava.jar" basedir="${demo-classes}"/>
	</target>

	<!-- The following targets are there to ensure that the JadeLeap.jar file for PJAVA is available
	     as it is necessary for the compilation of the demo. More in details:
	     - If the jar file is already there, just do nothing
	     - else if the JADE sources are available, create the jar 
	     - else ask the user to insert the location of the jar file --> 
	<target name="check-resources">
		<available file="${lib}/JadeLeap.jar" property="JadeLeap" value="${lib}/JadeLeap.jar"/>
		<available file="${jade-home}/src/jade/Boot.java" property="jade-sources-available" value="true"/>

		<antcall target="get-leap-jar"/>
	</target>

	<target name="get-leap-jar" unless="JadeLeap">
		<antcall target="create-leap-jar"/>
		<antcall target="input-leap-jar"/>
	</target>

	<target name="create-leap-jar" if="jade-sources-available">
		<antcall target="do-lib"/>
	</target>

	<target name="input-leap-jar" unless="jade-sources-available">
		<input message="Insert the pathname of the JADE-LEAP jar file for PJAVA/CDC -->" addProperty="JadeLeap"/>
		<mkdir dir="${lib}"/>
		<copy file="${JadeLeap}" tofile="${lib}/JadeLeap.jar"/>
	</target>

	
</project>
