%!PS-Adobe-3.0
%%Creator: Windows PSCRIPT
%%Title: Microsoft Word - PARSING.DOC
%%BoundingBox: 13 10 577 832
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%Pages: (atend)
%%BeginResource: procset Win35Dict 3 1
/Win35Dict 290 dict def Win35Dict begin/bd{bind def}bind def/in{72
mul}bd/ed{exch def}bd/ld{load def}bd/tr/translate ld/gs/gsave ld/gr
/grestore ld/M/moveto ld/L/lineto ld/rmt/rmoveto ld/rlt/rlineto ld
/rct/rcurveto ld/st/stroke ld/n/newpath ld/sm/setmatrix ld/cm/currentmatrix
ld/cp/closepath ld/ARC/arcn ld/TR{65536 div}bd/lj/setlinejoin ld/lc
/setlinecap ld/ml/setmiterlimit ld/sl/setlinewidth ld/scignore false
def/sc{scignore{pop pop pop}{0 index 2 index eq 2 index 4 index eq
and{pop pop 255 div setgray}{3{255 div 3 1 roll}repeat setrgbcolor}ifelse}ifelse}bd
/FC{bR bG bB sc}bd/fC{/bB ed/bG ed/bR ed}bd/HC{hR hG hB sc}bd/hC{
/hB ed/hG ed/hR ed}bd/PC{pR pG pB sc}bd/pC{/pB ed/pG ed/pR ed}bd/sM
matrix def/PenW 1 def/iPen 5 def/mxF matrix def/mxE matrix def/mxUE
matrix def/mxUF matrix def/fBE false def/iDevRes 72 0 matrix defaultmatrix
dtransform dup mul exch dup mul add sqrt def/fPP false def/SS{fPP{
/SV save def}{gs}ifelse}bd/RS{fPP{SV restore}{gr}ifelse}bd/EJ{gsave
showpage grestore}bd/#C{userdict begin/#copies ed end}bd/FEbuf 2 string
def/FEglyph(G  )def/FE{1 exch{dup 16 FEbuf cvrs FEglyph exch 1 exch
putinterval 1 index exch FEglyph cvn put}for}bd/SM{/iRes ed/cyP ed
/cxPg ed/cyM ed/cxM ed 72 100 div dup scale dup 0 ne{90 eq{cyM exch
0 eq{cxM exch tr -90 rotate -1 1 scale}{cxM cxPg add exch tr +90 rotate}ifelse}{cyP
cyM sub exch 0 ne{cxM exch tr -90 rotate}{cxM cxPg add exch tr -90
rotate 1 -1 scale}ifelse}ifelse}{pop cyP cyM sub exch 0 ne{cxM cxPg
add exch tr 180 rotate}{cxM exch tr 1 -1 scale}ifelse}ifelse 100 iRes
div dup scale 0 0 transform .25 add round .25 sub exch .25 add round
.25 sub exch itransform translate}bd/SJ{1 index 0 eq{pop pop/fBE false
def}{1 index/Break ed div/dxBreak ed/fBE true def}ifelse}bd/ANSIVec[
16#0/grave 16#1/acute 16#2/circumflex 16#3/tilde 16#4/macron 16#5/breve
16#6/dotaccent 16#7/dieresis 16#8/ring 16#9/cedilla 16#A/hungarumlaut
16#B/ogonek 16#C/caron 16#D/dotlessi 16#27/quotesingle 16#60/grave
16#7C/bar 16#82/quotesinglbase 16#83/florin 16#84/quotedblbase 16#85
/ellipsis 16#86/dagger 16#87/daggerdbl 16#89/perthousand 16#8A/Scaron
16#8B/guilsinglleft 16#8C/OE 16#91/quoteleft 16#92/quoteright 16#93
/quotedblleft 16#94/quotedblright 16#95/bullet 16#96/endash 16#97
/emdash 16#99/trademark 16#9A/scaron 16#9B/guilsinglright 16#9C/oe
16#9F/Ydieresis 16#A0/space 16#A4/currency 16#A6/brokenbar 16#A7/section
16#A8/dieresis 16#A9/copyright 16#AA/ordfeminine 16#AB/guillemotleft
16#AC/logicalnot 16#AD/hyphen 16#AE/registered 16#AF/macron 16#B0/degree
16#B1/plusminus 16#B2/twosuperior 16#B3/threesuperior 16#B4/acute 16#B5
/mu 16#B6/paragraph 16#B7/periodcentered 16#B8/cedilla 16#B9/onesuperior
16#BA/ordmasculine 16#BB/guillemotright 16#BC/onequarter 16#BD/onehalf
16#BE/threequarters 16#BF/questiondown 16#C0/Agrave 16#C1/Aacute 16#C2
/Acircumflex 16#C3/Atilde 16#C4/Adieresis 16#C5/Aring 16#C6/AE 16#C7
/Ccedilla 16#C8/Egrave 16#C9/Eacute 16#CA/Ecircumflex 16#CB/Edieresis
16#CC/Igrave 16#CD/Iacute 16#CE/Icircumflex 16#CF/Idieresis 16#D0/Eth
16#D1/Ntilde 16#D2/Ograve 16#D3/Oacute 16#D4/Ocircumflex 16#D5/Otilde
16#D6/Odieresis 16#D7/multiply 16#D8/Oslash 16#D9/Ugrave 16#DA/Uacute
16#DB/Ucircumflex 16#DC/Udieresis 16#DD/Yacute 16#DE/Thorn 16#DF/germandbls
16#E0/agrave 16#E1/aacute 16#E2/acircumflex 16#E3/atilde 16#E4/adieresis
16#E5/aring 16#E6/ae 16#E7/ccedilla 16#E8/egrave 16#E9/eacute 16#EA
/ecircumflex 16#EB/edieresis 16#EC/igrave 16#ED/iacute 16#EE/icircumflex
16#EF/idieresis 16#F0/eth 16#F1/ntilde 16#F2/ograve 16#F3/oacute 16#F4
/ocircumflex 16#F5/otilde 16#F6/odieresis 16#F7/divide 16#F8/oslash
16#F9/ugrave 16#FA/uacute 16#FB/ucircumflex 16#FC/udieresis 16#FD/yacute
16#FE/thorn 16#FF/ydieresis ] def/reencdict 12 dict def/IsChar{basefontdict
/CharStrings get exch known}bd/MapCh{dup IsChar not{pop/bullet}if
newfont/Encoding get 3 1 roll put}bd/MapDegree{16#b0/degree IsChar{
/degree}{/ring}ifelse MapCh}bd/MapBB{16#a6/brokenbar IsChar{/brokenbar}{
/bar}ifelse MapCh}bd/ANSIFont{reencdict begin/newfontname ed/basefontname
ed FontDirectory newfontname known not{/basefontdict basefontname findfont
def/newfont basefontdict maxlength dict def basefontdict{exch dup/FID
ne{dup/Encoding eq{exch dup length array copy newfont 3 1 roll put}{exch
newfont 3 1 roll put}ifelse}{pop pop}ifelse}forall newfont/FontName
newfontname put 127 1 159{newfont/Encoding get exch/bullet put}for
ANSIVec aload pop ANSIVec length 2 idiv{MapCh}repeat MapDegree MapBB
newfontname newfont definefont pop}if newfontname end}bd/SB{FC/ULlen
ed/str ed str length fBE not{dup 1 gt{1 sub}if}if/cbStr ed/dxGdi ed
/y0 ed/x0 ed str stringwidth dup 0 ne{/y1 ed/x1 ed y1 y1 mul x1 x1
mul add sqrt dxGdi exch div 1 sub dup x1 mul cbStr div exch y1 mul
cbStr div}{exch abs neg dxGdi add cbStr div exch}ifelse/dyExtra ed
/dxExtra ed x0 y0 M fBE{dxBreak 0 BCh dxExtra dyExtra str awidthshow}{dxExtra
dyExtra str ashow}ifelse fUL{x0 y0 M dxUL dyUL rmt ULlen fBE{Break
add}if 0 mxUE transform gs rlt cyUL sl [] 0 setdash st gr}if fSO{x0
y0 M dxSO dySO rmt ULlen fBE{Break add}if 0 mxUE transform gs rlt cyUL
sl [] 0 setdash st gr}if n/fBE false def}bd/font{/name ed/Ascent ed
0 ne/fT3 ed 0 ne/fSO ed 0 ne/fUL ed/Sy ed/Sx ed 10.0 div/ori ed -10.0
div/esc ed/BCh ed name findfont/xAscent 0 def/yAscent Ascent def/ULesc
esc def ULesc mxUE rotate pop fT3{/esc 0 def xAscent yAscent mxUE transform
/yAscent ed/xAscent ed}if [Sx 0 0 Sy neg xAscent yAscent] esc mxE
rotate mxF concatmatrix makefont setfont [Sx 0 0 Sy neg 0 Ascent] mxUE
mxUF concatmatrix pop fUL{currentfont dup/FontInfo get/UnderlinePosition
known not{pop/Courier findfont}if/FontInfo get/UnderlinePosition get
1000 div 0 exch mxUF transform/dyUL ed/dxUL ed}if fSO{0 .3 mxUF transform
/dySO ed/dxSO ed}if fUL fSO or{currentfont dup/FontInfo get/UnderlineThickness
known not{pop/Courier findfont}if/FontInfo get/UnderlineThickness get
1000 div Sy mul/cyUL ed}if}bd/min{2 copy gt{exch}if pop}bd/max{2 copy
lt{exch}if pop}bd/CP{/ft ed{{ft 0 eq{clip}{eoclip}ifelse}stopped{currentflat
1 add setflat}{exit}ifelse}loop}bd/patfont 10 dict def patfont begin
/FontType 3 def/FontMatrix [1 0 0 -1 0 0] def/FontBBox [0 0 16 16]
def/Encoding StandardEncoding def/BuildChar{pop pop 16 0 0 0 16 16
setcachedevice 16 16 false [1 0 0 1 .25 .25]{pat}imagemask}bd end/p{
/pat 32 string def{}forall 0 1 7{dup 2 mul pat exch 3 index put dup
2 mul 1 add pat exch 3 index put dup 2 mul 16 add pat exch 3 index
put 2 mul 17 add pat exch 2 index put pop}for}bd/pfill{/PatFont patfont
definefont setfont/ch(AAAA)def X0 64 X1{Y1 -16 Y0{1 index exch M ch
show}for pop}for}bd/vert{X0 w X1{dup Y0 M Y1 L st}for}bd/horz{Y0 w
Y1{dup X0 exch M X1 exch L st}for}bd/fdiag{X0 w X1{Y0 M X1 X0 sub dup
rlt st}for Y0 w Y1{X0 exch M Y1 Y0 sub dup rlt st}for}bd/bdiag{X0 w
X1{Y1 M X1 X0 sub dup neg rlt st}for Y0 w Y1{X0 exch M Y1 Y0 sub dup
neg rlt st}for}bd/AU{1 add cvi 15 or}bd/AD{1 sub cvi -16 and}bd/SHR{pathbbox
AU/Y1 ed AU/X1 ed AD/Y0 ed AD/X0 ed}bd/hfill{/w iRes 37.5 div round
def 0.1 sl [] 0 setdash n dup 0 eq{horz}if dup 1 eq{vert}if dup 2 eq{fdiag}if
dup 3 eq{bdiag}if dup 4 eq{horz vert}if 5 eq{fdiag bdiag}if}bd/F{/ft
ed fm 256 and 0 ne{gs FC ft 0 eq{fill}{eofill}ifelse gr}if fm 1536
and 0 ne{SHR gs HC ft CP fm 1024 and 0 ne{/Tmp save def pfill Tmp restore}{fm
15 and hfill}ifelse gr}if}bd/S{PenW sl PC st}bd/m matrix def/GW{iRes
12 div PenW add cvi}bd/DoW{iRes 50 div PenW add cvi}bd/DW{iRes 8 div
PenW add cvi}bd/SP{/PenW ed/iPen ed iPen 0 eq iPen 6 eq or{[] 0 setdash}if
iPen 1 eq{[DW GW] 0 setdash}if iPen 2 eq{[DoW GW] 0 setdash}if iPen
3 eq{[DW GW DoW GW] 0 setdash}if iPen 4 eq{[DW GW DoW GW DoW GW] 0
setdash}if}bd/E{m cm pop tr scale 1 0 moveto 0 0 1 0 360 arc cp m sm}bd
/AG{/sy ed/sx ed sx div 4 1 roll sy div 4 1 roll sx div 4 1 roll sy
div 4 1 roll atan/a2 ed atan/a1 ed sx sy scale a1 a2 ARC}def/A{m cm
pop tr AG m sm}def/P{m cm pop tr 0 0 M AG cp m sm}def/RRect{n 4 copy
M 3 1 roll exch L 4 2 roll L L cp}bd/RRCC{/r ed/y1 ed/x1 ed/y0 ed/x0
ed x0 x1 add 2 div y0 M x1 y0 x1 y1 r arcto 4{pop}repeat x1 y1 x0 y1
r arcto 4{pop}repeat x0 y1 x0 y0 r arcto 4{pop}repeat x0 y0 x1 y0 r
arcto 4{pop}repeat cp}bd/RR{2 copy 0 eq exch 0 eq or{pop pop RRect}{2
copy eq{pop RRCC}{m cm pop/y2 ed/x2 ed/ys y2 x2 div 1 max def/xs x2
y2 div 1 max def/y1 exch ys div def/x1 exch xs div def/y0 exch ys div
def/x0 exch xs div def/r2 x2 y2 min def xs ys scale x0 x1 add 2 div
y0 M x1 y0 x1 y1 r2 arcto 4{pop}repeat x1 y1 x0 y1 r2 arcto 4{pop}repeat
x0 y1 x0 y0 r2 arcto 4{pop}repeat x0 y0 x1 y0 r2 arcto 4{pop}repeat
m sm cp}ifelse}ifelse}bd/PP{{rlt}repeat}bd/OB{gs 0 ne{7 3 roll/y ed
/x ed x y translate ULesc rotate x neg y neg translate x y 7 -3 roll}if
sc B fill gr}bd/B{M/dy ed/dx ed dx 0 rlt 0 dy rlt dx neg 0 rlt cp}bd
/CB{B clip n}bd/ErrHandler{errordict dup maxlength exch length gt
dup{errordict begin}if/errhelpdict 12 dict def errhelpdict begin/stackunderflow(operand stack underflow)def
/undefined(this name is not defined in a dictionary)def/VMerror(you have used up all the printer's memory)def
/typecheck(operator was expecting a different type of operand)def
/ioerror(input/output error occured)def end{end}if errordict begin
/handleerror{$error begin newerror{/newerror false def showpage 72
72 scale/x .25 def/y 9.6 def/Helvetica findfont .2 scalefont setfont
x y moveto(Offending Command = )show/command load{dup type/stringtype
ne{(max err string)cvs}if show}exec/y y .2 sub def x y moveto(Error = )show
errorname{dup type dup( max err string )cvs show( : )show/stringtype
ne{( max err string )cvs}if show}exec errordict begin errhelpdict errorname
known{x 1 add y .2 sub moveto errhelpdict errorname get show}if end
/y y .4 sub def x y moveto(Stack =)show ostack{/y y .2 sub def x 1
add y moveto dup type/stringtype ne{( max err string )cvs}if show}forall
showpage}if end}def end}bd end
%%EndResource
/SVDoc save def
%%EndProlog
%%BeginSetup
Win35Dict begin
ErrHandler
statusdict begin 0 setjobtimeout end
statusdict begin statusdict /jobname (Microsoft Word - PARSING.DOC) put end
/oldDictCnt countdictstack def {}stopped 
{ countdictstack oldDictCnt lt { Win35Dict begin } 
{1 1 countdictstack oldDictCnt sub {pop end } for } ifelse } if 
/oldDictCnt countdictstack def {a4
}stopped 
{ countdictstack oldDictCnt lt { Win35Dict begin } 
{1 1 countdictstack oldDictCnt sub {pop end } for } ifelse } if 
[{ }
/exec load currenttransfer /exec load] cvx settransfer
/setresolution where { pop 300 300 setresolution } if
%%EndSetup
%%Page: 1 1
%%PageResources: (atend)
SS
0 0 18 13 783 1169 300 SM
32 0 0 50 50 0 0 0 47 /Helvetica-Bold /font13 ANSIFont font
0 0 0 fC
182 256 1586 (Idee per il parsing dei messaggi con i linguaggi ACL / SL / custom.) 1586 SB
32 0 0 50 50 0 0 0 46 /Helvetica /font12 ANSIFont font
182 372 1952 (Secondo le specifiche FIPA 97 i messaggi tra gli agenti sono costituiti da pacchetti IIOP) 1952 SB
182 429 1942 (che contengono stringhe di caratteri in linguaggio ACL. A sua volta, un messaggio ACL) 1942 SB
182 486 1535 (ha dei campi che rimandano ad altri linguaggi; per esempio il campo ) 1535 SB
32 0 0 50 50 0 0 0 46 /Helvetica-Oblique /font19 ANSIFont font
1717 486 221 (:language) 221 SB
32 0 0 50 50 0 0 0 46 /Helvetica /font12 ANSIFont font
1938 486 201 ( indica in) 201 SB
182 543 733 (che linguaggio \350 scritto il campo ) 733 SB
32 0 0 50 50 0 0 0 46 /Helvetica-Oblique /font19 ANSIFont font
915 543 179 (:content) 179 SB
32 0 0 50 50 0 0 0 46 /Helvetica /font12 ANSIFont font
1094 543 370 (. Inoltre, i campi ) 370 SB
32 0 0 50 50 0 0 0 46 /Helvetica-Oblique /font19 ANSIFont font
1464 543 204 (:ontology) 204 SB
32 0 0 50 50 0 0 0 46 /Helvetica /font12 ANSIFont font
1668 543 56 ( e ) 56 SB
32 0 0 50 50 0 0 0 46 /Helvetica-Oblique /font19 ANSIFont font
1724 543 193 (:protocol) 193 SB
32 0 0 50 50 0 0 0 46 /Helvetica /font12 ANSIFont font
1917 543 247 ( forniscono) 247 SB
182 600 1239 (contesto addizionale per la conversazione inter-agente.) 1239 SB
182 657 1880 (Lo scenario che si prospetta \350 dunque quello di un linguaggio ACL \223esterno\224 e di pi\371) 1880 SB
182 714 1890 (linguaggi \223interni\224, dei quali SL viene proposto direttamente da FIPA 97. Ogni agente) 1890 SB
182 771 1780 (deve comprendere ACL e molti useranno SL, mentre solo alcuni adotteranno un) 1780 SB
182 828 1984 (linguaggio specifico per i contenuti. Tuttavia, quasi ogni tipo di agente sar\340 differente per) 1984 SB
182 885 1578 (quanto riguarda le ontologie che conosce ed i protocolli a cui aderisce.) 1578 SB
182 942 1955 (Tutti questi requisiti risultano in una gran quantit\340 di codice di parsing, che pu\362 risultare) 1955 SB
182 999 702 (ostico da scrivere e mantenere.) 702 SB
182 1056 1383 (La proposta presente cerca di raggiungere i seguenti obiettivi:) 1383 SB
182 1170 56 (1. ) 59 SB
241 1170 1846 (Rendere il codice di parsing facilmente comprensibile per agevolarne il debugging.) 1846 SB
182 1227 56 (2. ) 59 SB
241 1227 1129 (Ridurre lo sforzo realizzativo del codice di parsing.) 1129 SB
182 1284 56 (3. ) 59 SB
241 1284 1312 (Consentire la modifica e l\222estensione del codice di parsing.) 1312 SB
182 1341 56 (4. ) 59 SB
241 1341 1761 (Permettere il riuso del codice di parsing da parte di agenti sviluppati in seguito.) 1761 SB
182 1455 1985 (Per centrare gli obiettivi 3. e 4. occorre progettare un framework adeguato. In particolare,) 1985 SB
182 1512 1894 (la modifica e l\222estensione del codice di parsing possono riguardare la sintassi \(nuove) 1894 SB
182 1569 1974 (versioni di linguaggi esistenti, nuovi linguaggi\) o la semantica \(nuove azioni da compiere) 1974 SB
182 1626 1949 (quando si riconosce una determinata produzione grammaticale\). L\222esigenza 4. sul riuso) 1949 SB
182 1683 1832 (mira a consentire la realizzazione di un agente che conosca linguaggi, ontologie e) 1832 SB
182 1740 1860 (protocolli gi\340 pronti con una ridotta scrittura di codice. Per esempio, avendo scritto i) 1860 SB
182 1797 204 (package ) 204 SB
32 0 0 50 50 0 0 0 46 /Helvetica-Oblique /font19 ANSIFont font
386 1797 326 (fipa.languages) 326 SB
32 0 0 50 50 0 0 0 46 /Helvetica /font12 ANSIFont font
712 1797 28 (, ) 28 SB
32 0 0 50 50 0 0 0 46 /Helvetica-Oblique /font19 ANSIFont font
740 1797 322 (fipa.ontologies) 322 SB
32 0 0 50 50 0 0 0 46 /Helvetica /font12 ANSIFont font
1062 1797 56 ( e ) 56 SB
32 0 0 50 50 0 0 0 46 /Helvetica-Oblique /font19 ANSIFont font
1118 1797 298 (fipa.protocols) 298 SB
32 0 0 50 50 0 0 0 46 /Helvetica /font12 ANSIFont font
1416 1797 641 (, un agente dovrebbe essere) 641 SB
182 1854 435 (scritto come segue:) 435 SB

%%BeginResource: font MSTT31c174
/GreNewFont{10 dict dup 3 1 roll def dup begin 6 1 roll/FontType 3
def/FontMatrix exch def/FontBBox exch def/FontInfo 2 dict def FontInfo
/UnderlinePosition 3 -1 roll put FontInfo/UnderlineThickness 3 -1
roll put/Encoding 256 array def 0 1 255{Encoding exch/.notdef put}for
/CharProcs 256 dict def CharProcs/.notdef{}put/Metrics 256 dict def
Metrics/.notdef 3 -1 roll put/BuildChar{/char exch def/fontdict exch
def/charname fontdict/Encoding get char get def fontdict/Metrics get
charname get aload pop setcachedevice fontdict begin Encoding char
get CharProcs exch get end exec}def end definefont pop}def/AddChar{begin
Encoding 3 1 roll put CharProcs 3 1 roll put Metrics 3 1 roll put end}def
/MSTT31c174 [50.0 0 0 0 0 0] 40 -240 [-50.0 -50.0 50.0 50.0] [1 50 div 0 0 1 50 div 0 0] /MSTT31c174 GreNewFont
%%EndResource

32 0 0 50 50 0 0 1 39 /MSTT31c174 font

%%BeginResource: font MSTT31c174
/G69 [30.0 0.0 5.0 0.0 25.0 32.0]
/G69 {
    20 32 true [1 0 0 -1 -5.0 32.0] {<00e00000e00000e00000e00000e0000000000000000000000000000000003fe0003fe00000600000
60000060000060000060000060000060000060000060000060000060000060000060000060000060
00006000006000006000fffff0fffff0>} imagemask 
  }
  105 /G69 MSTT31c174 AddChar
/G6d [30.0 0.0 0.0 0.0 30.0 22.0]
/G6d {
    30 22 true [1 0 0 -1 0.0 22.0] {<fc781e00fdfc7f000f8ee3800f07c1c00e0380c00c0300c00c0300c00c0300c00c0300c00c0300c0
0c0300c00c0300c00c0300c00c0300c00c0300c00c0300c00c0300c00c0300c00c0300c00c0300c0
ffc3f0fcffc3f0fc>} imagemask 
  }
  109 /G6d MSTT31c174 AddChar
/G70 [30.0 0.0 1.0 -9.0 27.0 22.0]
/G70 {
    26 31 true [1 0 0 -1 -1.0 22.0] {<f00fc000fc7ff8000cf03c000dc00e000f8007000f0003800e0001800e0001800c0000c00c0000c0
0c0000c00c0000c00c0000c00c0000c00e0001800e0001800f0003800f8007000dc00e000cf03c00
0c7ff8000c0fc0000c0000000c0000000c0000000c0000000c0000000c0000000c000000fff00000
fff00000>} imagemask 
  }
  112 /G70 MSTT31c174 AddChar
/G6f [30.0 0.0 3.0 -1.0 26.0 22.0]
/G6f {
    23 23 true [1 0 0 -1 -3.0 22.0] {<00fe0003ff800f01e01c007038003830001860000c60000ce00006c00006c00006c00006c00006c0
0006e0000660000c60000c3000183800381c00700f83e003ff8000fe00>} imagemask 
  }
  111 /G6f MSTT31c174 AddChar
/G72 [30.0 0.0 4.0 0.0 27.0 22.0]
/G72 {
    23 22 true [1 0 0 -1 -4.0 22.0] {<7f01f07f07fc030f0e033c0603780003e00003c00003800003000003000003000003000003000003
0000030000030000030000030000030000030000ffffc0ffffc0>} imagemask 
  }
  114 /G72 MSTT31c174 AddChar
/G74 [30.0 0.0 4.0 -1.0 26.0 30.0]
/G74 {
    22 31 true [1 0 0 -1 -4.0 30.0] {<060000060000060000060000060000060000060000060000fffff0fffff006000006000006000006
00000600000600000600000600000600000600000600000600000600000600000600000600000600
0003001c03c0fc01fff0007f80>} imagemask 
  }
  116 /G74 MSTT31c174 AddChar
%%EndResource

183 1968 186 (import) 186 SB
182 1968 186 (import) 186 SB

%%BeginResource: font MSTT31c180
/MSTT31c180 [50.0 0 0 0 0 0] 40 -240 [-50.0 -50.0 50.0 50.0] [1 50 div 0 0 1 50 div 0 0] /MSTT31c180 GreNewFont
%%EndResource

32 0 0 50 50 0 0 1 39 /MSTT31c180 font

%%BeginResource: font MSTT31c180
/G20 [30.0 0.0 0.0 0.0 0.0 0.0]
/G20 {
} 
  32 /G20 MSTT31c180 AddChar
/G66 [30.0 0.0 6.0 0.0 27.0 31.0]
/G66 {
    21 31 true [1 0 0 -1 -6.0 31.0] {<003fe000fff801e038018000030000030000030000030000030000ffffe0ffffe003000003000003
00000300000300000300000300000300000300000300000300000300000300000300000300000300
00030000030000ffffc0ffffc0>} imagemask 
  }
  102 /G66 MSTT31c180 AddChar
/G69 [30.0 0.0 5.0 0.0 25.0 32.0]
/G69 {
    20 32 true [1 0 0 -1 -5.0 32.0] {<00e00000e00000e00000e00000e0000000000000000000000000000000003fe0003fe00000600000
60000060000060000060000060000060000060000060000060000060000060000060000060000060
00006000006000006000fffff0fffff0>} imagemask 
  }
  105 /G69 MSTT31c180 AddChar
/G70 [30.0 0.0 1.0 -9.0 27.0 22.0]
/G70 {
    26 31 true [1 0 0 -1 -1.0 22.0] {<f00fc000fc7ff8000cf03c000dc00e000f8007000f0003800e0001800e0001800c0000c00c0000c0
0c0000c00c0000c00c0000c00c0000c00e0001800e0001800f0003800f8007000dc00e000cf03c00
0c7ff8000c0fc0000c0000000c0000000c0000000c0000000c0000000c0000000c000000fff00000
fff00000>} imagemask 
  }
  112 /G70 MSTT31c180 AddChar
/G61 [30.0 0.0 4.0 -1.0 27.0 22.0]
/G61 {
    23 23 true [1 0 0 -1 -4.0 22.0] {<01fc000fff003f03803800c00000e000006000006000006000006003ff600fffe03e00e078006060
0060e00060c00060c00060c000e0e001e06007e0781e7e1ffc7e0fe000>} imagemask 
  }
  97 /G61 MSTT31c180 AddChar
/G2e [30.0 0.0 11.0 -1.0 19.0 6.0]
/G2e {
    8 7 true [1 0 0 -1 -11.0 6.0] {<3c7effffff7e3c>} imagemask 
  }
  46 /G2e MSTT31c180 AddChar
/G6c [30.0 0.0 5.0 0.0 25.0 31.0]
/G6c {
    20 31 true [1 0 0 -1 -5.0 31.0] {<3fe0003fe00000600000600000600000600000600000600000600000600000600000600000600000
60000060000060000060000060000060000060000060000060000060000060000060000060000060
00006000006000fffff0fffff0>} imagemask 
  }
  108 /G6c MSTT31c180 AddChar
/G6e [30.0 0.0 2.0 0.0 28.0 22.0]
/G6e {
    26 22 true [1 0 0 -1 -2.0 22.0] {<fc1f8000fc7fe0000ce070000d8038000f0018000e000c000c000c000c000c000c000c000c000c00
0c000c000c000c000c000c000c000c000c000c000c000c000c000c000c000c000c000c000c000c00
ffc0ffc0ffc0ffc0>} imagemask 
  }
  110 /G6e MSTT31c180 AddChar
/G67 [30.0 0.0 4.0 -9.0 28.0 22.0]
/G67 {
    24 31 true [1 0 0 -1 -4.0 22.0] {<01f80f07fe3f0e07301c03b03000f07000f0600070600070c00030c00030c00030c00030c00030c0
00306000706000707000f03000f01c03b00e073007fe3001f8300000300000300000300000700000
600000e00003c007ff0007fe00>} imagemask 
  }
  103 /G67 MSTT31c180 AddChar
/G75 [30.0 0.0 2.0 -1.0 28.0 22.0]
/G75 {
    26 23 true [1 0 0 -1 -2.0 22.0] {<fc01fc00fc01fc000c000c000c000c000c000c000c000c000c000c000c000c000c000c000c000c00
0c000c000c000c000c000c000c000c000c000c000c000c000c000c000c001c000e007c000600fc00
0783cfc003ff8fc000fc0000>} imagemask 
  }
  117 /G75 MSTT31c180 AddChar
/G65 [30.0 0.0 4.0 -1.0 26.0 22.0]
/G65 {
    22 23 true [1 0 0 -1 -4.0 22.0] {<00fc0007ff800f03c01c00e0380070700030600018600018c0000cc0000cfffffcfffffcc00000c0
0000e0000060000070000030000018000c1c003c0f81f803ffe000ff00>} imagemask 
  }
  101 /G65 MSTT31c180 AddChar
/G73 [30.0 0.0 5.0 -1.0 25.0 22.0]
/G73 {
    20 23 true [1 0 0 -1 -5.0 22.0] {<03fc600fff603c03e03000e06000606000606000007000003c00001ff80007ff00001fc00001e000
0060000030c00030c00030c00030e00060f000e0fc03c0dfff0003fc00>} imagemask 
  }
  115 /G73 MSTT31c180 AddChar
/G3b [30.0 0.0 8.0 -5.0 19.0 22.0]
/G3b {
    11 27 true [1 0 0 -1 -8.0 22.0] {<03c007c00fe00fe00fe007c003c000000000000000000000000000000fc01f801f801f003e003e00
3c007c0078007000f000e000c000>} imagemask 
  }
  59 /G3b MSTT31c180 AddChar
%%EndResource

368 1968 480 ( fipa.languages;) 480 SB
32 0 0 50 50 0 0 1 39 /MSTT31c174 font
183 2021 186 (import) 186 SB
182 2021 186 (import) 186 SB
32 0 0 50 50 0 0 1 39 /MSTT31c180 font

%%BeginResource: font MSTT31c180
/G6f [30.0 0.0 3.0 -1.0 26.0 22.0]
/G6f {
    23 23 true [1 0 0 -1 -3.0 22.0] {<00fe0003ff800f01e01c007038003830001860000c60000ce00006c00006c00006c00006c00006c0
0006e0000660000c60000c3000183800381c00700f83e003ff8000fe00>} imagemask 
  }
  111 /G6f MSTT31c180 AddChar
/G74 [30.0 0.0 4.0 -1.0 26.0 30.0]
/G74 {
    22 31 true [1 0 0 -1 -4.0 30.0] {<060000060000060000060000060000060000060000060000fffff0fffff006000006000006000006
00000600000600000600000600000600000600000600000600000600000600000600000600000600
0003001c03c0fc01fff0007f80>} imagemask 
  }
  116 /G74 MSTT31c180 AddChar
%%EndResource

368 2021 510 ( fipa.ontologies;) 510 SB
32 0 0 50 50 0 0 1 39 /MSTT31c174 font
183 2074 186 (import) 186 SB
182 2074 186 (import) 186 SB
32 0 0 50 50 0 0 1 39 /MSTT31c180 font

%%BeginResource: font MSTT31c180
/G72 [30.0 0.0 4.0 0.0 27.0 22.0]
/G72 {
    23 22 true [1 0 0 -1 -4.0 22.0] {<7f01f07f07fc030f0e033c0603780003e00003c00003800003000003000003000003000003000003
0000030000030000030000030000030000030000ffffc0ffffc0>} imagemask 
  }
  114 /G72 MSTT31c180 AddChar
/G63 [30.0 0.0 4.0 -1.0 27.0 22.0]
/G63 {
    23 23 true [1 0 0 -1 -4.0 22.0] {<00ff0c03ffcc0f00fc1c003c38001c30000c60000c600000c00000c00000c00000c00000c00000c0
0000c0000060000060000070000638000e1c003c0f01f007ffe000ff00>} imagemask 
  }
  99 /G63 MSTT31c180 AddChar
%%EndResource

368 2074 480 ( fipa.protocols;) 480 SB
32 0 0 50 50 0 0 1 39 /MSTT31c174 font

%%BeginResource: font MSTT31c174
/G63 [30.0 0.0 4.0 -1.0 27.0 22.0]
/G63 {
    23 23 true [1 0 0 -1 -4.0 22.0] {<00ff0c03ffcc0f00fc1c003c38001c30000c60000c600000c00000c00000c00000c00000c00000c0
0000c0000060000060000070000638000e1c003c0f01f007ffe000ff00>} imagemask 
  }
  99 /G63 MSTT31c174 AddChar
/G6c [30.0 0.0 5.0 0.0 25.0 31.0]
/G6c {
    20 31 true [1 0 0 -1 -5.0 31.0] {<3fe0003fe00000600000600000600000600000600000600000600000600000600000600000600000
60000060000060000060000060000060000060000060000060000060000060000060000060000060
00006000006000fffff0fffff0>} imagemask 
  }
  108 /G6c MSTT31c174 AddChar
/G61 [30.0 0.0 4.0 -1.0 27.0 22.0]
/G61 {
    23 23 true [1 0 0 -1 -4.0 22.0] {<01fc000fff003f03803800c00000e000006000006000006000006003ff600fffe03e00e078006060
0060e00060c00060c00060c000e0e001e06007e0781e7e1ffc7e0fe000>} imagemask 
  }
  97 /G61 MSTT31c174 AddChar
/G73 [30.0 0.0 5.0 -1.0 25.0 22.0]
/G73 {
    20 23 true [1 0 0 -1 -5.0 22.0] {<03fc600fff603c03e03000e06000606000606000007000003c00001ff80007ff00001fc00001e000
0060000030c00030c00030c00030e00060f000e0fc03c0dfff0003fc00>} imagemask 
  }
  115 /G73 MSTT31c174 AddChar
%%EndResource

183 2180 155 (class) 155 SB
182 2180 155 (class) 155 SB
32 0 0 50 50 0 0 1 39 /MSTT31c180 font

%%BeginResource: font MSTT31c180
/G6d [30.0 0.0 0.0 0.0 30.0 22.0]
/G6d {
    30 22 true [1 0 0 -1 0.0 22.0] {<fc781e00fdfc7f000f8ee3800f07c1c00e0380c00c0300c00c0300c00c0300c00c0300c00c0300c0
0c0300c00c0300c00c0300c00c0300c00c0300c00c0300c00c0300c00c0300c00c0300c00c0300c0
ffc3f0fcffc3f0fc>} imagemask 
  }
  109 /G6d MSTT31c180 AddChar
/G79 [30.0 0.0 4.0 -9.0 29.0 22.0]
/G79 {
    25 31 true [1 0 0 -1 -4.0 22.0] {<fe007f80fe007f803000060030000c0018000c00180018000c0018000c0030000600300006006000
030060000300e0000180c0000181c00000c1800000c3800000630000006300000036000000360000
001c0000001c000000180000001800000030000000300000006000000060000000c00000fffc0000
fffc0000>} imagemask 
  }
  121 /G79 MSTT31c180 AddChar
/G41 [30.0 0.0 -1.0 0.0 31.0 29.0]
/G41 {
    32 29 true [1 0 0 -1 1.0 29.0] {<07ffe00007ffe00000066000000c3000000c3000000c300000181800001818000018180000300c00
00300c0000700c00006006000060060000c0070000c0030000c0030001ffff8001ffff8001800180
030000c0030000c0030000c006000060060000600e0000600c000030ffe007ffffe007ff>} imagemask 
  }
  65 /G41 MSTT31c180 AddChar
%%EndResource

337 2180 270 ( myAgent ) 270 SB
32 0 0 50 50 0 0 1 39 /MSTT31c174 font

%%BeginResource: font MSTT31c174
/G65 [30.0 0.0 4.0 -1.0 26.0 22.0]
/G65 {
    22 23 true [1 0 0 -1 -4.0 22.0] {<00fc0007ff800f03c01c00e0380070700030600018600018c0000cc0000cfffffcfffffcc00000c0
0000e0000060000070000030000018000c1c003c0f81f803ffe000ff00>} imagemask 
  }
  101 /G65 MSTT31c174 AddChar
/G78 [30.0 0.0 2.0 0.0 27.0 22.0]
/G78 {
    25 22 true [1 0 0 -1 -2.0 22.0] {<7f80ff007f80ff0018001c000c003800060070000380e00001c1c00000e3800000770000003e0000
001c0000003e00000077000000e3800001c1c0000380e000070070000e0018001c000c0030000600
ff80ff80ff80ff80>} imagemask 
  }
  120 /G78 MSTT31c174 AddChar
/G6e [30.0 0.0 2.0 0.0 28.0 22.0]
/G6e {
    26 22 true [1 0 0 -1 -2.0 22.0] {<fc1f8000fc7fe0000ce070000d8038000f0018000e000c000c000c000c000c000c000c000c000c00
0c000c000c000c000c000c000c000c000c000c000c000c000c000c000c000c000c000c000c000c00
ffc0ffc0ffc0ffc0>} imagemask 
  }
  110 /G6e MSTT31c174 AddChar
/G64 [30.0 0.0 3.0 -1.0 29.0 31.0]
/G64 {
    26 32 true [1 0 0 -1 -3.0 31.0] {<0000fc000000fc0000000c0000000c0000000c0000000c0000000c0000000c0000000c0000fc0c00
03ff0c000f03cc001c00ec0038007c0030003c0060001c0060001c00c0000c00c0000c00c0000c00
c0000c00c0000c00c0000c00c0000c0060001c0060001c0030003c0038007c001c00ec000f03cfc0
03ff0fc000fc0000>} imagemask 
  }
  100 /G64 MSTT31c174 AddChar
%%EndResource

608 2180 217 (extends) 217 SB
607 2180 217 (extends) 217 SB
32 0 0 50 50 0 0 1 39 /MSTT31c180 font

%%BeginResource: font MSTT31c180
/G7b [30.0 0.0 10.0 -6.0 20.0 31.0]
/G7b {
    10 37 true [1 0 0 -1 -10.0 31.0] {<01c007c006000c000c000c000c000c000c000c000c000c000c000c000c000c001c007800f0007800
1c000c000c000c000c000c000c000c000c000c000c000c000c000c00060007c001c0>} imagemask 
  }
  123 /G7b MSTT31c180 AddChar
%%EndResource

824 2180 240 ( Agent {) 240 SB

%%BeginResource: font MSTT31c180
/G48 [30.0 0.0 2.0 0.0 28.0 29.0]
/G48 {
    26 29 true [1 0 0 -1 -2.0 29.0] {<ffc0ffc0ffc0ffc00c000c000c000c000c000c000c000c000c000c000c000c000c000c000c000c00
0c000c000c000c000c000c000ffffc000ffffc000c000c000c000c000c000c000c000c000c000c00
0c000c000c000c000c000c000c000c000c000c000c000c000c000c00ffc0ffc0ffc0ffc0>} imagemask 
  }
  72 /G48 MSTT31c180 AddChar
/G68 [30.0 0.0 2.0 0.0 28.0 31.0]
/G68 {
    26 31 true [1 0 0 -1 -2.0 31.0] {<fc000000fc0000000c0000000c0000000c0000000c0000000c0000000c0000000c0000000c1f8000
0c7fe0000de070000f8038000f0018000e000c000c000c000c000c000c000c000c000c000c000c00
0c000c000c000c000c000c000c000c000c000c000c000c000c000c000c000c000c000c00ffc0ffc0
ffc0ffc0>} imagemask 
  }
  104 /G68 MSTT31c180 AddChar
/G54 [30.0 0.0 4.0 0.0 26.0 29.0]
/G54 {
    22 29 true [1 0 0 -1 -4.0 29.0] {<fffffcfffffcc0300cc0300cc0300cc0300cc0300cc0300cc0300cc0300c00300000300000300000
30000030000030000030000030000030000030000030000030000030000030000030000030000030
000fffc00fffc0>} imagemask 
  }
  84 /G54 MSTT31c180 AddChar
/G62 [30.0 0.0 1.0 -1.0 27.0 31.0]
/G62 {
    26 32 true [1 0 0 -1 -1.0 31.0] {<fc000000fc0000000c0000000c0000000c0000000c0000000c0000000c0000000c0000000c0fc000
0c3ff0000cf03c000dc00e000f8007000f0003000e0001800e0001800c0000c00c0000c00c0000c0
0c0000c00c0000c00c0000c00c0000c00e0001800e0001800f0003000f8007000dc00e00fcf03c00
fc3ff000000fc000>} imagemask 
  }
  98 /G62 MSTT31c180 AddChar
/G64 [30.0 0.0 3.0 -1.0 29.0 31.0]
/G64 {
    26 32 true [1 0 0 -1 -3.0 31.0] {<0000fc000000fc0000000c0000000c0000000c0000000c0000000c0000000c0000000c0000fc0c00
03ff0c000f03cc001c00ec0038007c0030003c0060001c0060001c00c0000c00c0000c00c0000c00
c0000c00c0000c00c0000c00c0000c0060001c0060001c0030003c0038007c001c00ec000f03cfc0
03ff0fc000fc0000>} imagemask 
  }
  100 /G64 MSTT31c180 AddChar
/G4c [30.0 0.0 3.0 0.0 27.0 29.0]
/G4c {
    24 29 true [1 0 0 -1 -3.0 29.0] {<fffc00fffc0003000003000003000003000003000003000003000003000003000003000003000003
00000300000300000300000300030300030300030300030300030300030300030300030300030300
03ffffffffffff>} imagemask 
  }
  76 /G4c MSTT31c180 AddChar
%%EndResource

182 2286 930 (  HashTable supportedLanguages;) 930 SB

%%BeginResource: font MSTT31c180
/G4f [30.0 0.0 3.0 -1.0 28.0 29.0]
/G4f {
    25 30 true [1 0 0 -1 -3.0 29.0] {<007f000001ffc00003c0e0000f0078000c001c0018000c0038000e00300006006000070060000300
60000300c0000180c0000180c0000180c0000180c0000180c0000180c0000180c000018060000300
60000300600007003000060038000e0018000c000c001c000f00780003c0e00001ffc000007f0000
>} imagemask 
  }
  79 /G4f MSTT31c180 AddChar
%%EndResource

182 2339 960 (  HashTable supportedOntologies;) 960 SB

%%BeginResource: font MSTT31c180
/G50 [30.0 0.0 4.0 0.0 27.0 29.0]
/G50 {
    23 29 true [1 0 0 -1 -4.0 29.0] {<ffff80ffffe00c00700c00380c000c0c000c0c00060c00060c00060c00060c00060c000c0c001c0c
00380c00f00fffc00fff000c00000c00000c00000c00000c00000c00000c00000c00000c00000c00
00fffc00fffc00>} imagemask 
  }
  80 /G50 MSTT31c180 AddChar
%%EndResource

182 2392 930 (  HashTable supportedProtocols;) 930 SB
182 2498 60 (  ) 60 SB
32 0 0 50 50 0 0 1 39 /MSTT31c174 font

%%BeginResource: font MSTT31c174
/G75 [30.0 0.0 2.0 -1.0 28.0 22.0]
/G75 {
    26 23 true [1 0 0 -1 -2.0 22.0] {<fc01fc00fc01fc000c000c000c000c000c000c000c000c000c000c000c000c000c000c000c000c00
0c000c000c000c000c000c000c000c000c000c000c000c000c000c000c001c000e007c000600fc00
0783cfc003ff8fc000fc0000>} imagemask 
  }
  117 /G75 MSTT31c174 AddChar
/G62 [30.0 0.0 1.0 -1.0 27.0 31.0]
/G62 {
    26 32 true [1 0 0 -1 -1.0 31.0] {<fc000000fc0000000c0000000c0000000c0000000c0000000c0000000c0000000c0000000c0fc000
0c3ff0000cf03c000dc00e000f8007000f0003000e0001800e0001800c0000c00c0000c00c0000c0
0c0000c00c0000c00c0000c00c0000c00e0001800e0001800f0003000f8007000dc00e00fcf03c00
fc3ff000000fc000>} imagemask 
  }
  98 /G62 MSTT31c174 AddChar
%%EndResource

243 2498 186 (public) 186 SB
242 2498 186 (public) 186 SB
32 0 0 50 50 0 0 1 39 /MSTT31c180 font

%%BeginResource: font MSTT31c180
/G28 [30.0 0.0 15.0 -6.0 22.0 31.0]
/G28 {
    7 37 true [1 0 0 -1 -15.0 31.0] {<06060c0c181838303060606060c0c0c0c0c0c0c0c0c0c0c06060606030303818180c0c0606>} imagemask 
  }
  40 /G28 MSTT31c180 AddChar
/G29 [30.0 0.0 8.0 -6.0 15.0 31.0]
/G29 {
    7 37 true [1 0 0 -1 -8.0 31.0] {<c0c0606030301818180c0c0c0c06060606060606060606060c0c0c0c18181830306060c0c0>} imagemask 
  }
  41 /G29 MSTT31c180 AddChar
%%EndResource

428 2498 360 ( myAgent\(\) {) 360 SB

%%BeginResource: font MSTT31c180
/G2f [30.0 0.0 5.0 -4.0 24.0 34.0]
/G2f {
    19 38 true [1 0 0 -1 -5.0 34.0] {<0000600000600000e00000c00001c0000180000380000300000700000600000e00000c00001c0000
180000380000300000700000600000600000c00000c00001c0000180000380000300000700000600
000e00000c00001c0000180000380000300000700000600000e00000c00000c00000>} imagemask 
  }
  47 /G2f MSTT31c180 AddChar
/G49 [30.0 0.0 6.0 0.0 24.0 29.0]
/G49 {
    18 29 true [1 0 0 -1 -6.0 29.0] {<ffffc0ffffc000c00000c00000c00000c00000c00000c00000c00000c00000c00000c00000c00000
c00000c00000c00000c00000c00000c00000c00000c00000c00000c00000c00000c00000c00000c0
00ffffc0ffffc0>} imagemask 
  }
  73 /G49 MSTT31c180 AddChar
/G2c [30.0 0.0 7.0 -7.0 17.0 8.0]
/G2c {
    10 15 true [1 0 0 -1 -7.0 8.0] {<0fc00f801f801f001f003e003e003c007c00780078007000f000e000c000>} imagemask 
  }
  44 /G2c MSTT31c180 AddChar
%%EndResource

182 2551 1500 (    // Inserisce linguaggi, ontologie e protocolli) 1500 SB
182 2604 1410 (    // supportati nelle apposite strutture dati) 1410 SB

%%BeginResource: font MSTT31c180
/G7d [30.0 0.0 10.0 -6.0 20.0 31.0]
/G7d {
    10 37 true [1 0 0 -1 -10.0 31.0] {<e000f80018000c000c000c000c000c000c000c000c000c000c000c000c000c000e0007c003c007c0
0e000c000c000c000c000c000c000c000c000c000c000c000c001c001800f800e000>} imagemask 
  }
  125 /G7d MSTT31c180 AddChar
%%EndResource

182 2657 90 (  }) 90 SB
182 2763 30 (}) 30 SB
32 0 0 50 50 0 0 0 46 /Helvetica /font12 ANSIFont font
182 2873 1544 (Si pensa di creare una gerarchia di classi per il parsing, come segue:) 1544 SB
32 0 0 50 50 0 0 1 39 /MSTT31c174 font
183 2987 155 (class) 155 SB
182 2987 155 (class) 155 SB
32 0 0 50 50 0 0 1 39 /MSTT31c180 font
337 2987 270 ( Parser {) 270 SB

%%BeginResource: font MSTT31c180
/G43 [30.0 0.0 3.0 -1.0 27.0 29.0]
/G43 {
    24 30 true [1 0 0 -1 -3.0 29.0] {<007f0603ffc60780f60e003e1c000e38000e300006600006600000e00000c00000c00000c00000c0
0000c00000c00000c00000c00000c00000c000006000006000007000003000031800070c000e0700
1c03c0f801ffe0003f80>} imagemask 
  }
  67 /G43 MSTT31c180 AddChar
/G2d [30.0 0.0 4.0 13.0 25.0 16.0]
/G2d {
    21 3 true [1 0 0 -1 -4.0 16.0] {<fffff8fffff8fffff8>} imagemask 
  }
  45 /G2d MSTT31c180 AddChar
/G46 [30.0 0.0 5.0 0.0 29.0 29.0]
/G46 {
    24 29 true [1 0 0 -1 -5.0 29.0] {<ffffffffffff0c00030c00030c00030c00030c00030c00030c00000c06000c06000c06000c06000f
fe000ffe000c06000c06000c06000c06000c00000c00000c00000c00000c00000c00000c00000c00
00fffc00fffc00>} imagemask 
  }
  70 /G46 MSTT31c180 AddChar
%%EndResource

182 3040 1080 (  // Classe base - Forse interfaccia) 1080 SB
182 3093 30 (}) 30 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Helvetica
%%+ font Helvetica-Bold
%%+ font Helvetica-Oblique
%%+ font MSTT31c174
%%+ font MSTT31c180
%%Page: 2 2
%%PageResources: (atend)
SS
0 0 18 13 783 1169 300 SM
32 0 0 50 50 0 0 1 39 /MSTT31c174 font
0 0 0 fC
183 256 155 (class) 155 SB
182 256 155 (class) 155 SB
32 0 0 50 50 0 0 1 39 /MSTT31c180 font

%%BeginResource: font MSTT31c180
/G53 [30.0 0.0 4.0 -1.0 25.0 29.0]
/G53 {
    21 30 true [1 0 0 -1 -4.0 29.0] {<01fc3007ff301e03f03800f03000706000306000306000306000006000003000003c00001f000007
fc0000ff800007c00000e0000030000038000018000018c00018c00018c00018e00030f00030f800
e0de03c0cfff8001fc00>} imagemask 
  }
  83 /G53 MSTT31c180 AddChar
/G45 [30.0 0.0 2.0 0.0 26.0 29.0]
/G45 {
    24 29 true [1 0 0 -1 -2.0 29.0] {<fffffefffffe0c00060c00060c00060c00060c00060c00060c00000c06000c06000c06000c06000f
fe000ffe000c06000c06000c06000c06000c00000c00030c00030c00030c00030c00030c00030c00
03ffffffffffff>} imagemask 
  }
  69 /G45 MSTT31c180 AddChar
/G78 [30.0 0.0 2.0 0.0 27.0 22.0]
/G78 {
    25 22 true [1 0 0 -1 -2.0 22.0] {<7f80ff007f80ff0018001c000c003800060070000380e00001c1c00000e3800000770000003e0000
001c0000003e00000077000000e3800001c1c0000380e000070070000e0018001c000c0030000600
ff80ff80ff80ff80>} imagemask 
  }
  120 /G78 MSTT31c180 AddChar
/G5f [30.0 0.0 0.0 -14.0 31.0 -12.0]
/G5f {
    31 2 true [1 0 0 -1 0.0 -12.0] {<fffffffefffffffe>} imagemask 
  }
  95 /G5f MSTT31c180 AddChar
%%EndResource

337 256 630 ( S-Expression_Parser ) 630 SB
32 0 0 50 50 0 0 1 39 /MSTT31c174 font
968 256 217 (extends) 217 SB
967 256 217 (extends) 217 SB
32 0 0 50 50 0 0 1 39 /MSTT31c180 font
1184 256 270 ( Parser {) 270 SB
182 309 1440 (  // Parser per linguaggi basati su S-Expression) 1440 SB
182 362 30 (}) 30 SB
32 0 0 50 50 0 0 1 39 /MSTT31c174 font
183 468 155 (class) 155 SB
182 468 155 (class) 155 SB
32 0 0 50 50 0 0 1 39 /MSTT31c180 font
337 468 360 ( FSA_Parser ) 360 SB
32 0 0 50 50 0 0 1 39 /MSTT31c174 font
698 468 217 (extends) 217 SB
697 468 217 (extends) 217 SB
32 0 0 50 50 0 0 1 39 /MSTT31c180 font
914 468 270 ( Parser {) 270 SB
182 521 900 (  // Parser basato su lex/yacc) 900 SB
182 574 30 (}) 30 SB
32 0 0 50 50 0 0 0 46 /Helvetica /font12 ANSIFont font
182 684 1998 (Per il parsing dei linguaggi pi\371 elementari, come ACL e SL, si useranno classi derivate da) 1998 SB
32 0 0 50 50 0 0 0 46 /Helvetica-Oblique /font19 ANSIFont font
182 741 472 (S-Expression_Parser) 472 SB
32 0 0 50 50 0 0 0 46 /Helvetica /font12 ANSIFont font
654 741 1039 (, mentre per sintassi complicate si deriver\340 da ) 1039 SB
32 0 0 50 50 0 0 0 46 /Helvetica-Oblique /font19 ANSIFont font
1693 741 273 (FSA_Parser) 273 SB
32 0 0 50 50 0 0 0 46 /Helvetica /font12 ANSIFont font
1966 741 70 (. In) 70 SB
182 798 1900 (ambedue i casi il parser dovr\340 costruire una struttura dati analoga che rappresenta la) 1900 SB
182 855 2000 (struttura del messaggio. I vantaggi di usare una struttura dati esplicita invece di codificare) 2000 SB
182 912 1237 (il parsing nella struttura del programma sono molteplici:) 1237 SB
182 1026 56 (1. ) 59 SB
241 1026 1779 (La struttura dati pu\362 essere stampata od esaminata con un debugger durante lo) 1779 SB
241 1083 200 (sviluppo.) 200 SB
182 1140 56 (2. ) 59 SB
241 1140 1896 (Sia che si usi SL od un altro linguaggio per rappresentare le conoscenze dell\222agente,) 1896 SB
241 1197 1831 (avere delle classi che ne rappresentano i costrutti permette di visualizzare lo stato) 1831 SB
241 1254 1724 (mentale dell\222agente, oltre a salvarlo su disco o trasferirne parti ad altri agenti.) 1724 SB
182 1311 56 (3. ) 59 SB
241 1311 1908 (In ogni caso, quando si introdurranno algoritmi complessi serviranno strutture dati per) 1908 SB
241 1368 1927 (contenere i belief e simili. Inserendole gi\340 in fase di parsing si ha un accordo completo) 1927 SB
241 1425 1307 (tra le diverse forme di rappresentazione della conoscenza.) 1307 SB
182 1482 56 (4. ) 59 SB
241 1482 1894 (Il trattamento dei sottolinguaggi non pone problemi particolari \(si passer\340 al parser di) 1894 SB
241 1539 1276 (contenuti il nodo radice del sottoalbero relativo al campo ) 1276 SB
32 0 0 50 50 0 0 0 46 /Helvetica-Oblique /font19 ANSIFont font
1517 1539 179 (:content) 179 SB
32 0 0 50 50 0 0 0 46 /Helvetica /font12 ANSIFont font
1696 1539 480 ( del messaggio ACL\).) 480 SB
182 1653 1939 (Si propone di scrivere direttamente il parser nel caso dei linguaggi ACL \(14 produzioni,) 1939 SB
182 1710 1956 (15 token\) ed SL \(17 produzioni, 8 token nel caso di SL completo; 7 produzioni per SL0\).) 1956 SB
182 1767 1977 (Per linguaggi con sintassi complicata si potr\340 ricorrere ad automi a stati finiti, tramite tool) 1977 SB
182 1824 122 (quali ) 122 SB
32 0 0 50 50 0 0 0 46 /Helvetica-Oblique /font19 ANSIFont font
304 1824 156 (Javacc) 156 SB
32 0 0 50 50 0 0 0 46 /Helvetica /font12 ANSIFont font
460 1824 14 (.) 14 SB
182 1938 2004 (Quando un agente deve esaminare un messaggio che ha ricevuto, vi sono tre componenti) 2004 SB
182 1995 1969 (che concorrono all\222interpretazione del contenuto del messaggio: il linguaggio, l\222ontologia) 1969 SB
182 2052 1832 (ed il protocollo. Durante l\222esame del messaggio, si selezioneranno l\222ontologia ed il) 1832 SB
182 2109 2006 (protocollo indicati negli opportuni campi del messaggio ACL. Per esempio ci sar\340 il codice) 2006 SB
182 2166 221 (seguente:) 221 SB
32 0 0 50 50 0 0 1 39 /MSTT31c180 font

%%BeginResource: font MSTT31c180
/G4d [30.0 0.0 -1.0 0.0 29.0 29.0]
/G4d {
    30 29 true [1 0 0 -1 1.0 29.0] {<fe0003fcff0003fc0f0003c00d8006c00d8006c00cc00ec00cc00cc00ce00cc00c6018c00c6018c0
0c3038c00c3030c00c1830c00c1860c00c0c60c00c0ce0c00c0ec0c00c06c0c00c0780c00c0380c0
0c0000c00c0000c00c0000c00c0000c00c0000c00c0000c00c0000c0ffe01ffcffe01ffc>} imagemask 
  }
  77 /G4d MSTT31c180 AddChar
/G3d [30.0 0.0 2.0 10.0 27.0 20.0]
/G3d {
    25 10 true [1 0 0 -1 -2.0 20.0] {<ffffff80ffffff80000000000000000000000000000000000000000000000000ffffff80ffffff80
>} imagemask 
  }
  61 /G3d MSTT31c180 AddChar
%%EndResource

182 2280 1170 (aclMessage msg = pending.nextMessage\(\);) 1170 SB

%%BeginResource: font MSTT31c180
/G4e [30.0 0.0 1.0 0.0 29.0 29.0]
/G4e {
    28 29 true [1 0 0 -1 -1.0 29.0] {<fe007ff0fe007ff00f0003000f8003000d8003000dc003000cc003000c6003000c7003000c300300
0c3803000c1803000c0c03000c0e03000c0603000c0703000c0303000c0183000c01c3000c00c300
0c00e3000c0063000c0033000c003b000c001b000c001f000c000f00ffe00700ffe00700>} imagemask 
  }
  78 /G4e MSTT31c180 AddChar
/G56 [30.0 0.0 0.0 0.0 30.0 29.0]
/G56 {
    30 29 true [1 0 0 -1 0.0 29.0] {<ffe01ffcffe01ffc0c0000c00c0000c0060001800600018007000380030003000300030001800600
018006000180060000c00c0000c00c0000c00c000060180000601800007038000030300000303000
001860000018600000186000000cc000000cc000000cc000000780000007800000078000>} imagemask 
  }
  86 /G56 MSTT31c180 AddChar
/G22 [30.0 0.0 7.0 17.0 23.0 31.0]
/G22 {
    16 14 true [1 0 0 -1 -7.0 31.0] {<fc3ffc3ffc3ff83ef83ef83e781e781e781e701c701c701c701c701c>} imagemask 
  }
  34 /G22 MSTT31c180 AddChar
/G3a [30.0 0.0 11.0 -1.0 18.0 22.0]
/G3a {
    7 23 true [1 0 0 -1 -11.0 22.0] {<387cfefefe7c38000000000000000000387cfefefe7c38>} imagemask 
  }
  58 /G3a MSTT31c180 AddChar
%%EndResource

182 2386 1440 (String ontologyName = msg.getValue\(":ontology"\);) 1440 SB
182 2439 1440 (String protocolName = msg.getValue\(":protocol"\);) 1440 SB
182 2492 1440 (String languageName = msg.getValue\(":language"\);) 1440 SB

%%BeginResource: font MSTT31c180
/G6b [30.0 0.0 5.0 0.0 28.0 31.0]
/G6b {
    23 31 true [1 0 0 -1 -5.0 31.0] {<fc0000fc00000c00000c00000c00000c00000c00000c00000c00000c03fc0c03fc0c01c00c03800c
07000c0c000c18000c30000ce0000dc0000fc0000f60000c30000c18000c0c000c06000c03000c01
800c00c00c0060fc07fefc07fe>} imagemask 
  }
  107 /G6b MSTT31c180 AddChar
%%EndResource

182 2598 1920 (Ontology msgOntology = supportedOntologies.lookup\(ontologyName\);) 1920 SB
182 2651 1890 (Protocol msgProtocol = supportedProtocols.lookup\(protocolName\);) 1890 SB
182 2704 1890 (Parser contentParser = supportedLanguages.lookup\(languageName\);) 1890 SB
182 2757 1530 (contentParser.parse\(msg, msgOntology, msgProtocol\);) 1530 SB
32 0 0 50 50 0 0 0 46 /Helvetica /font12 ANSIFont font
182 2867 1879 (Come si vede, l\222ontologia ed il protocollo vengono passati al parser del linguaggio di) 1879 SB
182 2924 1884 (contenuto. L\222ontologia verr\340 usata come controllo ad ogni passo di parsing, mentre il) 1884 SB
182 2981 535 (protocollo servir\340 come ) 535 SB
32 0 0 50 50 0 0 0 46 /Helvetica-Oblique /font19 ANSIFont font
717 2981 157 (pattern) 157 SB
32 0 0 50 50 0 0 0 46 /Helvetica /font12 ANSIFont font
874 2981 1275 ( per decidere se un dato messaggio \350 accettabile e come) 1275 SB
182 3038 494 (rispondere. La classe ) 494 SB
32 0 0 50 50 0 0 0 46 /Helvetica-Oblique /font19 ANSIFont font
676 3038 184 (Protocol) 184 SB
32 0 0 50 50 0 0 0 46 /Helvetica /font12 ANSIFont font
860 3038 1314 ( sar\340 un albero di messaggi ACL gi\340 pronti, con un cursore) 1314 SB
182 3095 1958 (che si sposta lungo la struttura per indicare lo stato corrente dello scambio di messaggi.) 1958 SB
182 3152 2000 (All\222inizio del protocollo il cursore \350 posizionato sulla radice dell\222albero; ad ogni messaggio) 2000 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Helvetica
%%+ font Helvetica-Oblique
%%+ font MSTT31c174
%%+ font MSTT31c180
%%Page: 3 3
%%PageResources: (atend)
SS
0 0 18 13 783 1169 300 SM
32 0 0 50 50 0 0 0 46 /Helvetica /font12 ANSIFont font
0 0 0 fC
182 256 1915 (ricevuto si controlla che questo sia accettabile nello stato corrente: se lo \350 si avanza il) 1915 SB
182 313 1768 (cursore e si spedisce la risposta opportuna, altrimenti si spedisce un opportuno) 1768 SB
182 370 893 (messaggio di errore \223Protocol violation\224.) 893 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Helvetica
%%Trailer
SVDoc restore
end
%%Pages: 3
% TrueType font name key:
%    MSTT310000 = 
%    MSTT310000 = 
%    MSTT310000 = 
%    MSTT310000 = 
%    MSTT310000 = 
%    MSTT310000 = 
%    MSTT310000 = 
%    MSTT31c153 = 7597DArialF00000032000002bc0000
%    MSTT31c15e = 7597DArialF00000032000001900000
%    MSTT31c169 = 7597DArialF00000032000001900001
%    MSTT31c174 = 7597DMS LineDrawF00000032000002bc0000
%    MSTT31c180 = 7597DMS LineDrawF00000032000001900000
%%DocumentSuppliedResources: procset Win35Dict 3 1
%%+ font MSTT31c174
%%+ font MSTT31c180

%%DocumentNeededResources: font Helvetica
%%+ font Helvetica-Bold
%%+ font Helvetica-Oblique

%%EOF
