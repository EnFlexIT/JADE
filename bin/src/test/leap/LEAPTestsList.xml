<?xml version="1.0" encoding="utf-8" ?>
<!-- Relative reference to the DTD file does not work when the test suite is in a jar file
<!DOCTYPE TestsList SYSTEM "../common/xml/listTests.dtd" [
	<!ENTITY % inline "#PCDATA|em|br|UL|LI|b">
	]>
-->
	<TestsList> 
		<Test name="Basic life-cycle and communication" skip="false">
			<TestClassName>test.leap.tests.TestLCCommunication</TestClassName>
			<WhatTest> Tests the basic operations of life-cycle management (agent creation/killing) and communication (message exchange) in a MIDP environment.</WhatTest>
			<HowWorkTest> 
				1) The tester agent (running in the fixed network) requests the AMS to create a ping agent (a simple agent that just replies to messages sending back each received message) on a MIDP container.
				2) The tester agent sends a first message to the ping agent and waits for the reply. This reply must have the same fields (except sender and receiver) of the message that was sent.
				3) The tester agent requests the AMS to kill the ping agent.
				4) The tester agent sends a second message to the ping agent and waits for a FAILURE notification from the AMS since the ping agent should no longer be there.
			</HowWorkTest>
			<WhenTestPass> The test passes if all the described checks are OK, no exception is thrown and everything is completed within 30 sec.</WhenTestPass>
		</Test>	
		
		<Test name="Sending messages in the takeDown() method" skip="false">
			<TestClassName>test.leap.tests.TestTakeDownSend</TestClassName>
			<WhatTest> Tests that messages sent within the agent takeDown() method are correctly delivered</WhatTest>
			<HowWorkTest> 
			</HowWorkTest>
			<WhenTestPass> The test passes if all the expected messages are received within a given timeout</WhenTestPass>
			<Argument key="n-participants" value="2"> The number of agents that will send messages in their takeDown() method</Argument>
			<Argument key="n-messages" value="10"> The number of messages to be sent </Argument>
		</Test>	
		
		<Test name="BackEnd in main container fault tolerance" skip="false">
			<TestClassName>test.leap.tests.TestBackEndFault</TestClassName>
			<WhatTest> Tests that a split container can recover from a fault of the container hosting its back-end when this role is played by the Main Container</WhatTest>
			<HowWorkTest> A sender agent and a ping agent are created on the split container. Then a backup main is created. After that the master main container (hosting the back-end for the split container) is killed and then restored. Finally a message is sent to the ping agent</HowWorkTest>
			<WhenTestPass> The test passes if all messages from the sender agent and the reply from the ping agent are correctly received.</WhenTestPass>
		</Test>	
		
		<Test name="BackEnd in BEManagementService fault tolerance" skip="false">
			<TestClassName>test.leap.tests.TestBEManagementFault</TestClassName>
			<WhatTest> Tests that a split container can recover from a fault of the container hosting its back-end when this role is played by a peripheral container through the BEManagementService</WhatTest>
			<HowWorkTest> This test works exactly as the "BackEnd in main container fault tolerance" test except for the fact that the mediator container (and not the main) is killed and then restored.</HowWorkTest>
			<WhenTestPass> The test passes if all messages from the sender agent and the reply from the ping agent are correctly received.</WhenTestPass>
		</Test>	
		
		<Test name="Message reception" skip="true">
			<TestClassName>test.leap.tests.TestMessageReception</TestClassName>
			<WhatTest> 
			</WhatTest>
			<HowWorkTest> 
			</HowWorkTest>
			<WhenTestPass>
			</WhenTestPass>
			<Argument key="period" value="60000"> The time interval (in ms) between sending two successive messages to the receiver agent</Argument>
			<Argument key="n-messages" value="100"> The number of messages to be sent </Argument>
			<Argument key="size" value="1000"> The size in bytes of the content of each message </Argument>
		</Test>	
		
		<Test name="Message order preservation" skip="true">
			<TestClassName>test.leap.tests.TestMessageOrder</TestClassName>
			<WhatTest> Tests whether a number of messages exchanged between agents both in the fixed network and in the wireless environment are posted correctly and in the same order they were sent.</WhatTest>
			<HowWorkTest>
				An agent (the "light agent") on a wireless container carries out "conversations" with N participants agents in the fixed network. 
				Conversation with each participant Pi consists of sending K messages to Pi and receiving K messages from Pi. 
				Both the light agent and the participants waits a fixed time T after sending each message.
			</HowWorkTest>
			<WhenTestPass> 
				The test passes if all conversations are carried out (including message order) successfully.
			</WhenTestPass>
			<Argument key="n-participants" value="10"> The number of participant agents in the fixed network </Argument>
			<Argument key="n-messages" value="100"> The number of messages sent and received in each conversation </Argument>
			<Argument key="period" value="100000"> The time interval (in ms) between sending two successive messages </Argument>
		</Test>	
		
		<Test name="Message transmission performances" skip="true">
			<TestClassName>test.leap.tests.TestPerformances</TestClassName>
			<WhatTest> Measures the performances of the communication mechanism (the round-trip time) in the wireless environment.</WhatTest>
			<HowWorkTest>
			</HowWorkTest>
			<WhenTestPass> 
			</WhenTestPass>
			<Argument key="n-iterations" value="30"> The number of iterations over which the average round-trip-time is computed.</Argument>
		</Test>	
		
		<Test name="Light container kill" skip="false">
			<TestClassName>test.leap.tests.TestKillLightContainer</TestClassName>
			<WhatTest> Tests the KillContainer operation on a light container.</WhatTest>
			<HowWorkTest> The light container is killed by requesting the AMS to do so. Then the AMS is queried for platform locations.</HowWorkTest>
			<WhenTestPass> The test passes if the light container is no longer found among the platform locations.</WhenTestPass>
		</Test>	
		
	</TestsList>
