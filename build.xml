
<!-- ANT BUILD FILE FOR THE JADE PROJECT -->

<!-- The following targets are expected to be used by users:
ant jade - to compile JADE
ant lib - to create the JADE libraries (i.e. all the .jar files)
ant examples - to compile demo
ant dist - to create the distribution files
-->

<!-- set properties for this project -->
<project name="JADE" default="jade" basedir=".">
  <description>JADE build file</description>
  <property file="build.properties"/>
  <property environment="env"/>
  <!-- set global properties for this build -->
  <property name="root" location="."/>
  <property name="lib" location="lib"/>
  <property name="src" location="src"/>
  <property name="dist" location=".."/>
  <property name="doc" location="doc"/>
  <property name="build" location="classes"/>
  <property name="demo" location="demo"/>
  
  <target name="init">
    <!-- Create the time stamp -->
    <tstamp/>
    <!-- Create the directory structure -->
    <mkdir dir="${doc}"/>
    <mkdir dir="${lib}"/>
    <mkdir dir="${build}"/>
    <condition property="javacc.home.is.set">
      <not>
        <equals arg1="${env.JAVACC_HOME}" arg2="$${env.JAVACC_HOME}"/>
      </not>
    </condition>
    <condition property="jess.home.is.set">
      <not>
        <equals arg1="${env.JESS_HOME}" arg2="$${env.JESS_HOME}"/>
      </not>
    </condition>
    <condition property="EXECidlj.is.set">
      <equals arg1="${EXECidlj}" arg2="true"/>
    </condition>
    <condition property="EXECSubWCRev">
      <available file="${SubWCRev.exe}"/>
    </condition>
    <condition property="tagThisVersion.is.true">
        <equals arg1="${tagThisVersion}" arg2="true"/>
    </condition>
  </target>
  <target name="check_javacc" unless="javacc.home.is.set">
    <echo>javacc task is being skipped and the pre-built parsers will be used. If you want to rebuild the parsers, set the environment variable JAVACC_HOME to the home directory where your javacc program has been installed.</echo>
  </target>
  <target name="check_jess" unless="jess.home.is.set">
    <echo>jess task is being skipped. If you want to compile the examples based on JESS, set the environment variable JESS_HOME to the home directory where your jess program has been installed.</echo>
  </target>
  <target name="check_execIdlj" unless="EXECidlj.is.set">
    <echo>Default behaviour: IDLJ task is being skipped.</echo>
  </target>
  <target name="check_execSubWCRev" depends="init" unless="EXECSubWCRev">
    <echo>WARNING: SubWCRev is being skipped. The copyright notice of JADE Runtime might be wrong!</echo>
  </target>

  <!--     _______________________________________________
                               compile
         _______________________________________________ -->
  <target name="jade" depends="init,parser,idlj,doTag" description="compile the source ">
    <!-- Compile the java code from ${src} into ${build} -->
    <!--   <delete dir="${build}/examples"/>
    <delete dir="${build}/demo"/> -->
    <javac srcdir="${src}" destdir="${build}" classpath="lib/commons-codec/commons-codec-1.3.jar" nowarn="on" optimize="${javac.optimize}" debug="${javac.debug}" debuglevel="lines,vars,source" deprecation="on" excludes="demo/**,examples/**,test/**" >
	</javac>
    <copy todir="${build}">
      <fileset dir="${src}">
        <include name="**/*.png"/>
        <include name="**/*.gif"/>
        <include name="**/*.jpg"/>
      </fileset>
    </copy>
    <rmic classname="jade.imtp.rmi.ServiceManagerRMIImpl" base="${build}"/>
    <rmic classname="jade.imtp.rmi.NodeRMIImpl" base="${build}"/>
  </target>
  <!--     _______________________________________________
                                idlj
          _______________________________________________ -->
  <target name="idlj" depends="init,check_execIdlj" if="EXECidlj.is.set">
    <echo>WARNING: Executing the idlj task might create wrong java files</echo>
    <exec dir="${src}" executable="idlj.exe">
      <arg line="-fall fipa.idl"/>
    </exec>
  </target>

	 <!--     _______________________________________________
	                                doTag
	 This task is needed because, contrary to CVS, subversion does not replace $Name$ with the tag name
	          _______________________________________________ -->
	  <target name="doTag" depends="SubWCRev" if="tagThisVersion.is.true" description="Set the JADE version number in jade.core.Runtime.">
	    <echo>tagging new release: JADE-${version}</echo>
	  	<replace file="src/jade/core/Runtime.java" token="$Name$" value="JADE-${version}" summary="yes"/>
	  </target>
	
  <!--     _______________________________________________
                                SubWCRev
          _______________________________________________ -->
  <target name="SubWCRev" depends="init,check_execSubWCRev" if="EXECSubWCRev" description="Set the value of the latest revision number and date for this checkout of JADE">
    <echo>executing SUBWCRev to set revision number and date for this JADE</echo>
    <exec dir="." executable="${SubWCRev.exe}">
     <arg line=". src\jade\core\Runtime.java src\jade\core\Runtime.java"/>
    </exec>
  </target>
  <!--     _______________________________________________
                              parser
         _______________________________________________ -->
  <target name="parser" depends="init, check_javacc, MakeACLParser, MakeSLParser" description="generate parser with javacc"/>
  <target name="MakeACLParser" depends="init, check_javacc" if="javacc.home.is.set">
    <javacc javacchome="${env.JAVACC_HOME}" outputdirectory="src/jade/lang/acl" target="src/jade/lang/acl/ACLParser.jj"/>
  </target>
  <target name="MakeSLParser" depends="init, check_javacc" if="javacc.home.is.set">
    <javacc javacchome="${env.JAVACC_HOME}" outputdirectory="src/jade/content/lang/sl" target="src/jade/content/lang/sl/SLParser.jj"/>
  </target>
  <!--     ________________________________________________
                             jar
         ________________________________________________ -->
  <target name="lib" depends="jade" description="generate jar archive">
    <!-- Create the jadeTools.jar file -->
		<delete file="${lib}/jadeTools.jar" quiet="true"/>
    <jar jarfile="${lib}/jadeTools.jar">
      <fileset dir="${build}">
      	<include name="**/jade/tools/**"/>
      	<exclude name="**/jade/tools/*.class"/>
      	<include name="**/jade/gui/**"/>
      	<exclude name="**/jade/gui/GuiAgent.class"/>
      	<exclude name="**/jade/gui/GuiAgent$GuiHandlerBehaviour.class"/>
      	<exclude name="**/jade/gui/GuiEvent.class"/>
      </fileset>
    </jar>
    <!-- Create the iiop.jar file -->
		<delete file="${lib}/iiop.jar" quiet="true"/>
    <jar jarfile="${lib}/iiop.jar">
      <fileset dir="${build}" includes="**/FIPA/*"/>
      <fileset dir="${build}" includes="**/jade/mtp/iiop/*"/>
    </jar>
    <!-- Create the http.jar file -->
                <delete file="${lib}/http.jar" quiet="true"/>
    <jar jarfile="${lib}/http.jar">
      <fileset dir="${build}" includes="**/jade/mtp/http/*"/>
    </jar>
    <!-- Create the jade.jar file -->
		<delete file="${lib}/jade.jar" quiet="true"/>
    <jar jarfile="${lib}/jade.jar" manifest="${build}/jade.mf">
      <fileset dir="${build}">
      	<exclude name="**/examples/**"/>
      	<exclude name="**/demo/**"/>
      	<exclude name="**/test/**"/>
       	<exclude name="**/FIPA/**"/>
      	<exclude name="**/jade/tools/**"/>
      	<exclude name="**/jade/gui/**"/>
	<exclude name="**/jade/mtp/iiop/**" />
	<exclude name="**/jade/mtp/http/**" />
      </fileset>
      <fileset dir="${build}">
      	<include name="**/jade/tools/*.class"/>
      	<include name="**/jade/gui/GuiAgent.class"/>
      	<include name="**/jade/gui/GuiAgent$GuiHandlerBehaviour.class"/>
      	<include name="**/jade/gui/GuiEvent.class"/>
      </fileset>
  	</jar>
  </target>
  <!--    __________________________________________________
                            clean
        __________________________________________________ -->
  <target name="clean" description="clean up">
    <!-- Delete the ${build} directory tree -->
    <delete includeEmptyDirs="true">
      <fileset dir="${build}" excludes="**/*.mf"/>
    </delete>
  	<!-- clean the doc/api directory -->
  	<delete dir="${doc}/api" excludes="javalogo52x88.gif" includeEmptyDirs="true"/>
  </target>
  <!--    __________________________________________________
                            doc
        __________________________________________________ -->
  <target name="doc" description="generate javadoc documentation">
  	<!-- clean the doc/api directory -->
  	<delete dir="${doc}/api" excludes="javalogo52x88.gif" includeEmptyDirs="true"/>
  	<!-- generate new javadoc documentation -->
    <javadoc destdir="${doc}/api" author="true" windowtitle="JADE ${version} API Reference" sourcepath="${src}" use="true" packagenames="jade.core, jade.core.behaviours, jade.core.event, jade.lang.acl, jade.domain, jade.domain.FIPAAgentManagement, jade.domain.JADEAgentManagement, jade.domain.mobility, jade.proto, jade.gui, jade.wrapper.gateway, jade.wrapper, jade.domain.DFGUIManagement, jade.domain.introspection, jade.content, jade.content.abs, jade.content.acl, jade.content.lang, jade.content.lang.j, jade.content.lang.leap, jade.content.lang.sl, jade.content.onto, jade.content.onto.basic, jade.content.schema, jade.content.schema.facets, jade.util, jade.util.leap, jade.mtp, jade.mtp.iiop jade.mtp.http jade.mtp.http.https"/>
    <javadoc destdir="${doc}/tools/sniffer/html/jdoc" author="true" windowtitle="JADE ${version} Sniffer Reference" sourcepath="${src}" packagenames="jade.tools.sniffer"/>
  </target>
  <!--     _______________________________________________
                               examples
         _______________________________________________ -->
  <target name="examples" depends="lib,examples1,jessexamples" description="compile the examples "/>
  <target name="examples1" depends="lib" description="compile all examples except the JESS-based examples">
    <!-- Compile the java code from ${src} into ${build} -->
    <javac srcdir="${src}" destdir="${build}" nowarn="off" optimize="${javac.optimize}" debug="${javac.debug}" deprecation="off" includes="examples/**" excludes="examples/jess/**,examples/JadeJessProtege/**" classpath="${lib}/jade.jar"/>
  </target>
  <!--     _______________________________________________
                               JESS-based examples
         _______________________________________________ -->
  <target name="jessexamples" depends="init,check_jess,lib" if="jess.home.is.set" description="compile the JESS-based examples ">
    <!-- Compile the java code from ${src} into ${build} -->
    <echo>Trying to compile the examples based on JESS. If the JESS library is not included into the CLASSPATH, a number of errors will be generated by the compiler but the task will contine.</echo>
    <javac srcdir="${src}" destdir="${build}" nowarn="off" optimize="${javac.optimize}" debug="${javac.debug}" deprecation="off" includes="examples/jess/** examples/JadeJessProtege/**" classpath="${lib}/jade.jar,${env.JESS_HOME}/jess.jar,${env.JESS_HOME}/JessTab.jar" failonerror="false"/>
  </target>
  <!--     _______________________________________________
                               Demo
         _______________________________________________ -->
  <target name="demo" depends="lib" description="compile the demo">
    <javac srcdir="${src}" destdir="${build}" nowarn="off" optimize="${javac.optimize}" debug="${javac.debug}" deprecation="off" includes="demo/**" classpath="${lib}/jade.jar,${root}/demo/CalendarBean.jar"/>
		<delete file="${demo}/MeetingScheduler.jar" quiet="true"/>
    <jar jarfile="${demo}/MeetingScheduler.jar" manifest="${demo}/demo.mf">
      <fileset dir="${build}" includes="**/demo/**"/>
    </jar>
  </target>
  <!--     _______________________________________________
                               dist
         _______________________________________________ -->
  <!-- Make distribution zip file and put in ${dist} -->
  <target name="dist" depends="check_javacc_dist,dist_src,dist_examples,dist_doc,dist_bin,dist_all"/>
  <target name="check_javacc_dist" unless="javacc.home.is.set">
    <echo>The javadoc documentation for user should be generated through the ANT target apidoc of the leap distribution. That target filters out irrelevant files and packages.</echo>
    <echo>javacc task is being skipped and THE DISTRIBUTION FILES MIGHT NOT BE PROPERLY GENERATED. If you want to rebuild the parsers, set the environment variable JAVACC_HOME to the home directory where your javacc program has been installed.</echo>
  </target>
  <target name="dist_src" depends="init,parser">
    <jar jarfile="${dist}/JADE-src-${version}.zip">
      <fileset dir="${dist}" includes="jade/src/FIPA/**"/>
      <fileset dir="${dist}" includes="jade/src/jade/**"/>
      <fileset dir="${dist}" includes="jade/build.xml"/>
      <fileset dir="${dist}" includes="jade/README"/>
      <fileset dir="${dist}" includes="jade/COPYNG"/>
      <fileset dir="${dist}" includes="jade/ChangeLog"/>
      <fileset dir="${dist}" includes="jade/License"/>
      <fileset dir="${dist}" includes="jade/src/*.idl"/>
      <fileset dir="${dist}" includes="jade/src/*.html"/>
      <fileset dir="${dist}" includes="jade/classes/*.mf"/>
      <fileset dir="${dist}" includes="jade/lib/commons-codec/**"/>
    </jar>
  </target>
  <target name="dist_examples" depends="init">
    <jar jarfile="${dist}/JADE-examples-${version}.zip">
      <fileset dir="${dist}" includes="jade/src/examples/**"/>
      <fileset dir="${dist}" includes="jade/src/demo/**"/>
      <fileset dir="${dist}" includes="jade/demo/**"/>
      <fileset dir="${dist}" includes="jade/README"/>
      <fileset dir="${dist}" includes="jade/COPYNG"/>
      <fileset dir="${dist}" includes="jade/ChangeLog"/>
      <fileset dir="${dist}" includes="jade/License"/>
    </jar>
  </target>
  <target name="dist_doc" depends="init,doc">
    <jar jarfile="${dist}/JADE-doc-${version}.zip">
      <fileset dir="${dist}" includes="jade/doc/**"/>
      <fileset dir="${dist}" includes="jade/README"/>
      <fileset dir="${dist}" includes="jade/COPYNG"/>
      <fileset dir="${dist}" includes="jade/ChangeLog"/>
      <fileset dir="${dist}" includes="jade/License"/>
    </jar>
  </target>
  <target name="dist_bin" depends="init,examples,demo">
    <jar jarfile="demo/MeetingScheduler.jar" manifest="demo/demo.mf">
      <fileset dir="${build}" includes="**/demo/**"/>
    </jar>
    <jar jarfile="${dist}/JADE-bin-${version}.zip">
      <fileset dir="${dist}" includes="jade/lib/**"/>
      <fileset dir="${dist}" includes="jade/demo/*"/>
      <fileset dir="${dist}" includes="jade/README"/>
      <fileset dir="${dist}" includes="jade/COPYNG"/>
      <fileset dir="${dist}" includes="jade/ChangeLog"/>
      <fileset dir="${dist}" includes="jade/License"/>
    </jar>
  </target>
  <target name="dist_all" depends="init,dist_src,dist_examples,dist_doc,dist_bin">
    <jar jarfile="${dist}/JADE-all-${version}.zip">
      <fileset dir="${dist}" includes="JADE-src-${version}.zip"/>
      <fileset dir="${dist}" includes="JADE-examples-${version}.zip"/>
      <fileset dir="${dist}" includes="JADE-doc-${version}.zip"/>
      <fileset dir="${dist}" includes="JADE-bin-${version}.zip"/>
    </jar>
  </target>
  
  <target name="dist_redoc" depends="init">
    <jar jarfile="${dist}/JADE-doc-${version}.zip">
      <fileset dir="${dist}" includes="jade/doc/**"/>
      <fileset dir="${dist}" includes="jade/README"/>
      <fileset dir="${dist}" includes="jade/COPYNG"/>
      <fileset dir="${dist}" includes="jade/ChangeLog"/>
      <fileset dir="${dist}" includes="jade/License"/>
    </jar>
    <jar jarfile="${dist}/JADE-all-${version}.zip">
      <fileset dir="${dist}" includes="JADE-src-${version}.zip"/>
      <fileset dir="${dist}" includes="JADE-examples-${version}.zip"/>
      <fileset dir="${dist}" includes="JADE-doc-${version}.zip"/>
      <fileset dir="${dist}" includes="JADE-bin-${version}.zip"/>
    </jar>
  </target>
</project>
